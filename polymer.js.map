{"version":3,"sources":["webpack:///webpack/bootstrap 183e46e6af4373b8a572","webpack:///./lib/utils/boot.html","webpack:///./lib/utils/mixin.html","webpack:///./lib/mixins/mutable-data.html","webpack:///./lib/utils/async.html","webpack:///./lib/utils/resolve-url.html","webpack:///./lib/mixins/property-effects.html","webpack:///./lib/utils/case-map.html","webpack:///./lib/utils/debounce.html","webpack:///./lib/utils/flush.html","webpack:///./lib/utils/templatize.html","webpack:///./polymer-element.html","webpack:///./lib/legacy/legacy-element-mixin.html","webpack:///./lib/mixins/element-mixin.html","webpack:///./lib/mixins/gesture-event-listeners.html","webpack:///./lib/utils/array-splice.html","webpack:///./lib/utils/settings.html","webpack:///./lib/utils/style-gather.html","webpack:///./polymer.html","webpack:///./~/@webcomponents/shadycss/apply-shim.min.js","webpack:///./~/@webcomponents/shadycss/custom-style-interface.min.js","webpack:///./lib/elements/array-selector.html","webpack:///./lib/elements/custom-style.html","webpack:///./lib/elements/dom-bind.html","webpack:///./lib/elements/dom-if.html","webpack:///./lib/elements/dom-module.html","webpack:///./lib/elements/dom-repeat.html","webpack:///./lib/legacy/class.html","webpack:///./lib/legacy/mutable-data-behavior.html","webpack:///./lib/legacy/polymer-fn.html","webpack:///./lib/legacy/polymer.dom.html","webpack:///./lib/legacy/templatizer-behavior.html","webpack:///./lib/mixins/property-accessors.html","webpack:///./lib/mixins/template-stamp.html","webpack:///./lib/utils/flattened-nodes-observer.html","webpack:///./lib/utils/gestures.html","webpack:///./lib/utils/import-href.html","webpack:///./lib/utils/path.html","webpack:///./lib/utils/render-status.html","webpack:///./lib/utils/unresolved.html","webpack:///./~/@webcomponents/shadycss/apply-shim.html","webpack:///./~/@webcomponents/shadycss/custom-style-interface.html"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA,mDAA2C,cAAc;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;AChEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,CAAC;;;;;;;;AClDD;AACA;;;;AAIA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,aAAa,SAAS;AACtB,cAAc,SAAS;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,SAAS;AACtB,cAAc,SAAS;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,CAAC;;;;;;;;;AChED;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB,EAAE;AACnB,iBAAiB,EAAE;AACnB,kBAAkB,QAAQ;AAC1B;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,oBAAoB;AACpB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB,EAAE;AACnB,iBAAiB,EAAE;AACnB,kBAAkB,QAAQ;AAC1B;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,GAAG;;AAEH;AACA;;AAEA,CAAC;;;;;;;;ACvLD;AACA;;;AAGA;;AAEA;;AAEA,iBAAiB,qEAAqE;AACtF,qBAAqB;;AAErB;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE,oBAAoB;;AAE1F;AACA;AACA,mBAAmB,SAAS;AAC5B;AACA;AACA;AACA;AACA,SAAS;AACT,4BAA4B,UAAU;AACtC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,kBAAkB,eAAe;AACjC;AACA;AACA;AACA,mBAAmB,+BAA+B;AAClD;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,iBAAiB,SAAS;AAC1B,kBAAkB,OAAO;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,SAAS;AAC1B,kBAAkB,OAAO;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,uBAAuB;AACxC,kBAAkB,OAAO;AACzB;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,SAAS;AAC1B,kBAAkB,EAAE;AACpB;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,CAAC;;;;;;;;AClMD;AACA;;;;AAIA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,GAAG;;;;;;;;;ACjGH;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;;AAGA;;AAEA;;AAEA,cAAc,OAAO;AACrB;;AAEA;AACA;AACA;;AAEA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,QAAQ;AACrB,aAAa,SAAS;AACtB,aAAa,GAAG;AAChB,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,EAAE;AACf,aAAa,EAAE;AACf,aAAa,SAAS;AACtB,aAAa,GAAG;AAChB,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,sBAAsB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,oDAAoD;AACpD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,OAAO,4CAA4C,SAAS;AACzE,aAAa,EAAE;AACf,aAAa,0BAA0B;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,SAAS;AAC5D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,MAAM;AACnB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,OAAO;AACpB,aAAa,EAAE;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,aAAa,SAAS;AACtB;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,cAAc;AAC3B,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,WAAW,cAAc;AACzB;AACA;AACA;AACA;AACA;AACA,iBAAiB,wBAAwB;AACzC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa,SAAS;AACtB;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,oBAAoB;AACpB,qBAAqB,uBAAuB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,QAAQ;AACrB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,SAAS;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,KAAK;AAClB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,EAAE;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa,KAAK;AAClB,aAAa,EAAE;AACf,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,cAAc,EAAE;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;;AAEA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA,SAAS,uBAAuB;AAChC;AACA,mBAAmB,yBAAyB;AAC5C;AACA;AACA;AACA;AACA,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,KAAK;AAClB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA,mBAAmB,gBAAgB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,iBAAiB;AAC9B,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,SAAS;AACtB,aAAa,GAAG;AAChB;AACA,aAAa,gBAAgB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,0CAA0C;AAChE;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,cAAc,EAAE;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE;AACnE,kCAAkC;AAClC,iCAAiC;AACjC,gCAAgC;AAChC;AACA;;AAEA;AACA;AACA,iBAAiB,gBAAgB;AACjC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,gDAAgD;AAChD;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,cAAc;AAC3B,aAAa,OAAO;AACpB,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,cAAc;AAC3B,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,cAAc,SAAS;AACvB;AACA;AACA;AACA;AACA,gCAAgC,KAAK;AACrC;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,MAAM;AACnB,aAAa,OAAO;AACpB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA,kCAAkC,wBAAwB;AAC1D;AACA;AACA,gCAAgC;AAChC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,MAAM;AACnB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB,oBAAoB;AACpB,oBAAoB;AACpB;AACA;;AAEA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB,QAAQ;AACzB,kBAAkB,QAAQ;AAC1B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,kBAAkB,QAAQ;AAC1B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,kBAAkB,QAAQ;AAC1B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,kBAAkB,QAAQ;AAC1B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,kBAAkB,QAAQ;AAC1B;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,KAAK;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,+BAA+B;AAChD,iBAAiB,EAAE;AACnB,iBAAiB,SAAS;AAC1B;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA,kBAAkB,QAAQ;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,OAAO;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,KAAK;AACtB,iBAAiB,OAAO;AACxB,iBAAiB,EAAE;AACnB;AACA;AACA;AACA;AACA,uDAAuD;AACvD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,yEAAyE,IAAI;AAC7E;AACA,yDAAyD,IAAI;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gDAAgD;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D;AAC1D;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,oBAAoB;AAC3C;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,YAAY,IAAI;AAC5C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE;AAChE;AACA,8BAA8B,UAAU;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,+BAA+B;AAChD,iBAAiB,+BAA+B;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,+BAA+B;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,6BAA6B,YAAY,GAAG,aAAa,GAAG,aAAa;AACzE;AACA,sCAAsC,YAAY;AAClD,8BAA8B,YAAY;AAC1C;AACA,gBAAgB,sBAAsB,aAAa,qDAAqD;AACxG,gBAAgB;AAChB;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB,MAAM;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,MAAM;AACrC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,iCAAiC;AAClD;AACA;AACA,mDAAmD;AACnD;AACA;AACA;AACA,iBAAiB,QAAQ;AACzB,kBAAkB,EAAE;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,iCAAiC;AAClD;AACA;AACA,mDAAmD;AACnD;AACA;AACA;AACA,iBAAiB,EAAE;AACnB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,8DAA8D,OAAO;AACrE;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB,KAAK;AACtB,kBAAkB,OAAO;AACzB;AACA;AACA;AACA;AACA,+BAA+B,MAAM;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,kBAAkB,EAAE;AACpB;AACA;AACA;AACA;AACA,+BAA+B,MAAM;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,iBAAiB,KAAK;AACtB,kBAAkB,MAAM;AACxB;AACA;AACA;AACA;AACA,+BAA+B,MAAM;AACrC;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,kBAAkB,EAAE;AACpB;AACA;AACA;AACA;AACA,+BAA+B,MAAM;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB,KAAK;AACtB,kBAAkB,OAAO;AACzB;AACA;AACA;AACA;AACA,+BAA+B,MAAM;AACrC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB,GAAG;AACpB;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT,+BAA+B,OAAO;AACtC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,iDAAiD;AACjD,SAAS;AACT;AACA;AACA,mDAAmD;AACnD,WAAW;AACX;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB,gBAAgB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,iBAAiB,gBAAgB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,MAAM;AAC1B,uBAAuB,0CAA0C;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB,gBAAgB;AACjC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,iBAAiB,gBAAgB;AACjC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,oBAAoB;AACrC;AACA,kBAAkB,OAAO;AACzB;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,oBAAoB;AACrC;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA,kBAAkB,OAAO,0BAA0B;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,oBAAoB;AACrC,kBAAkB,iBAAiB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,GAAG;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,iBAAiB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,gBAAgB;AACrC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,KAAK;AACtB,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,kBAAkB,QAAQ;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,KAAK;AACtB,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,kBAAkB,QAAQ;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,KAAK;AACtB,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,kBAAkB,QAAQ;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,wBAAwB,uCAAuC;AAC/D;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,MAAM,MAAM,aAAa,MAAM,OAAO,QAAQ,cAAc;AAC1E;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,kBAAkB,cAAc;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,MAAM;AACrC;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,wBAAwB,wCAAwC;AAChE;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,iBAAiB;AAClC,yBAAyB,eAAe;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,YAAY;AAC7B;AACA,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,iBAAiB,QAAQ;AACzB,kBAAkB,EAAE;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,CAAC;;;;;;;;ACnhFD;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,CAAC;;;;;;;;ACvDD;AACA;;AAEA;;AAEA;;;AAGA;AACA;;AAEA,iBAAiB,qEAAqE;AACtF,kBAAkB;;AAElB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA,eAAe,aAAa;AAC5B,eAAe,WAAW;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,mBAAmB;AAChC,aAAa,aAAa;AAC1B,aAAa,WAAW;AACxB,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;AC3GD;AACA;;;AAGA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,aAAa,kBAAkB;AAC/B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA,CAAC;;;;;;;;ACnDD;AACA;;AAEA;;AAEA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,6CAA6C,oBAAoB;AACjE;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,iDAAiD;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,GAAG;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB,EAAE;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA,qBAAqB,YAAY;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,iCAAiC;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,2DAA2D;AAC1E;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,kEAAkE;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,iCAAiC;AAC9C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,kBAAkB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,IAAI;AACjC,+CAA+C,IAAI;AACnD,4DAA4D,IAAI;AAChE,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,iBAAiB,oBAAoB;AACrC,iBAAiB,EAAE,uCAAuC;AAC1D;AACA,iBAAiB,GAAG;AACpB,kBAAkB,qBAAqB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,oBAAoB;AACrC;AACA,iBAAiB,YAAY;AAC7B,kBAAkB,qBAAqB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA,4DAA4D;AAC5D;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,GAAG;;;;;;;;;AC/cH;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;ACxBD;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;;AAGA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,iCAAiC,IAAI;AACrC;AACA;AACA;AACA;AACA,2BAA2B,QAAQ;AACnC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB,oBAAoB;AACpB,oBAAoB;AACpB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,oBAAoB;AACpB;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,EAAE;AACnB,kBAAkB,OAAO;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB,EAAE;AACnB,kBAAkB,EAAE;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB,QAAQ;AACzB,iBAAiB,GAAG;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,EAAE;AACnB,iBAAiB,OAAO;AACxB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,kBAAkB,OAAO;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,4BAA4B;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,kBAAkB,OAAO;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB;AACA,kBAAkB,OAAO;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,oBAAoB;AACrC,kBAAkB,iBAAiB;AACnC;AACA;AACA;AACA;AACA,6BAA6B,iBAAiB;AAC9C;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB,GAAG;AACpB;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA,kBAAkB,MAAM;AACxB;AACA;AACA;AACA,+DAA+D;AAC/D;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,QAAQ;AACzB,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,QAAQ;AACzB,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,QAAQ;AACzB;AACA,iBAAiB,aAAa;AAC9B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,kBAAkB,QAAQ;AAC1B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,YAAY;AAC9B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,kBAAkB,YAAY;AAC9B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,YAAY;AAC9B;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB,OAAO;AACzB;AACA;AACA;AACA;AACA,wBAAwB,aAAa;AACrC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,kBAAkB,aAAa;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,kBAAkB,YAAY;AAC9B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,QAAQ;AACzB;AACA,kBAAkB,YAAY;AAC9B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,QAAQ;AACzB;AACA,kBAAkB,mBAAmB;AACrC;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA,iBAAiB,MAAM;AACvB,kBAAkB,QAAQ;AAC1B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,aAAa;AAC9B,kBAAkB,QAAQ;AAC1B;AACA;AACA;AACA;;AAEA;AACA,8CAA8C;AAC9C;;AAEA;AACA;AACA,iBAAiB,OAAO;AACxB,kBAAkB,OAAO;AACzB;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB,WAAW;AAC5B;AACA,iBAAiB,OAAO;AACxB;AACA,kBAAkB,OAAO;AACzB;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,kBAAkB,QAAQ;AAC1B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,SAAS;AAC1B,iBAAiB,QAAQ;AACzB;AACA;AACA,kBAAkB,OAAO;AACzB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB;AACA,kBAAkB,QAAQ;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB,SAAS;AAC1B;AACA,iBAAiB,SAAS;AAC1B;AACA,iBAAiB,QAAQ;AACzB;AACA,kBAAkB,gBAAgB;AAClC;AACA,mDAAmD;AACnD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB,SAAS;AAC1B,kBAAkB,QAAQ;AAC1B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB,SAAS;AAC1B;AACA,iBAAiB,aAAa;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;;AAGA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB,SAAS;AAC1B;AACA,iBAAiB,aAAa;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB,aAAa;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,iBAAiB,aAAa;AAC9B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,+BAA+B;AAChD;AACA,iBAAiB,EAAE;AACnB,kBAAkB,MAAM;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB,MAAM;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,KAAK;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,KAAK;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,KAAK;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB,KAAK;AACtB,kBAAkB,OAAO;AACzB;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA,GAAG;;AAEH,CAAC;;;;;;;;ACj5BD;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,+BAA+B;;AAE/B;AACA,+CAA+C;AAC/C,aAAa,qBAAqB;AAClC;AACA,aAAa,qBAAqB;AAClC;AACA,aAAa,wCAAwC;AACrD;AACA,aAAa,6BAA6B;AAC1C;AACA,aAAa,4CAA4C;AACzD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,OAAO;AAChC;AACA,2BAA2B,OAAO;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB,oBAAoB;AACpB;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,YAAY;AAC3B,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,YAAY;AAC3B,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB,YAAY;AAC9B;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,YAAY;AAC3B,gBAAgB,yBAAyB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,YAAY;AAC3B,gBAAgB,yBAAyB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,YAAY;AAC3B,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,YAAY;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,YAAY;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,YAAY;AAC3B;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,YAAY;AAC3B;AACA,eAAe,OAAO;AACtB;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA,mBAAmB,sBAAsB;AACzC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,SAAS;AAC3B;AACA;AACA;AACA;AACA,sBAAsB,QAAQ;AAC9B;AACA;AACA;AACA,sBAAsB,OAAO;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,QAAQ;AACvC;AACA;AACA;AACA,oBAAoB,QAAQ;AAC5B;AACA;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,YAAY;AAC3B;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,YAAY;AAC3B;AACA,eAAe,oBAAoB;AACnC,eAAe,OAAO;AACtB;AACA,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,MAAM;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,2BAA2B;AAC7C;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,OAAO;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB,oBAAoB;AACpB,iBAAiB,SAAS;AAC1B,kBAAkB,KAAK;AACvB;AACA;AACA;AACA;AACA;AACA,iCAAiC,aAAa;AAC9C;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,kDAAkD;AAClD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,kBAAkB;AACxD;AACA;AACA;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB,QAAQ;AACzB;AACA,kBAAkB,OAAO;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,eAAe,YAAY;AAC3B;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,eAAe,YAAY;AAC3B;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,kBAAkB;AACvD;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,CAAC;;;;;;;;ACj1BD;AACA;;AAEA;;;AAGA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,oBAAoB;AACpB;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA,GAAG;;AAEH,CAAC;;;;;;;;ACpDD;AACA;;;AAGA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,qBAAqB,cAAc;AACnC;AACA;AACA;;AAEA;AACA,qBAAqB,iBAAiB;AACtC;;AAEA,qBAAqB,cAAc;AACnC,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,MAAM;AACrB;AACA,eAAe,OAAO;AACtB;AACA,eAAe,OAAO;AACtB;AACA,eAAe,MAAM;AACrB;AACA,eAAe,OAAO;AACtB;AACA,eAAe,OAAO;AACtB;AACA,gBAAgB,MAAM;AACtB,gEAAgE;AAChE,qDAAqD;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,OAAO;AACP;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,qBAAqB,gBAAgB;AACrC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,MAAM;AACrB;AACA,eAAe,MAAM;AACrB;AACA,gBAAgB,MAAM;AACtB,gEAAgE;AAChE,qDAAqD;AACrD;AACA;AACA;AACA;AACA;AACA;;AAEA,CAAC;;;;;;;;ACxTD;AACA;;AAEA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA,CAAC;;;;;;;;ACtDD;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,oBAAoB;AACnC,eAAe,OAAO;AACtB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;;;;;;;;ACzID;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;;AAGA;AACA;;;;;;;;ACrBA,YAAY;;AAEZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,SAAS,aAAa,sBAAsB,0CAA0C,mCAAmC,eAAe,YAAY;AACjK,cAAc,kCAAkC,oBAAoB,UAAU,eAAe,2BAA2B,IAAI,SAAS,UAAU,sBAAsB,kDAAkD,YAAY,WAAW,aAAa,gBAAgB,MAAM,oCAAoC;AACrT,gBAAgB,mCAAmC,mCAAmC,uIAAuI,2MAA2M,sCAAsC,cAAc,WAAW;AACve,eAAe,8BAA8B,IAAI,qBAAqB,IAAI,iBAAiB,IAAI,SAAS,aAAa;AACrH,kBAAkB,kBAAkB,SAAS,uBAAuB,gBAAgB,+DAA+D,MAAM,IAAI,qBAAqB,cAAc,eAAe,mIAAmI,kCAAkC,4BAA4B,QAAQ;AACxZ,2EAA2E,GAAG,gBAAgB,KAAK,WAAW,SAAS,QAAQ,sBAAsB,KAAK,WAAW,SAAS,IAAI,GAAG,IAAI,KAAK,gCAAgC,aAAa,mBAAmB,QAAQ,WAAW,SAAS,4CAA4C,yBAAyB,eAAe,yLAAyL,cAAc,4DAA4D,eAAe,sDAAsD,gCAAgC,mDAAmD,OAAO,IAAI,cAAc,GAAG,2EAA2E,OAAO,KAAK,KAAK,QAAQ,GAAG,uCAAuC,wCAAwC,kDAAkD,cAAc,2JAA2J,gMAAgM,QAAQ,cAAc,eAAe,8BAA8B,cAAc,cAAc,8DAA8D,0BAA0B,oBAAoB,MAAM,kBAAkB,aAAa,2BAA2B,6CAA6C,uCAAuC,4CAA4C,cAAc;AAC/wD,gBAAgB,wBAAwB,+BAA+B,GAAG,QAAQ,UAAU,mBAAmB,IAAI,sBAAsB,iCAAiC,KAAK,qBAAqB,mBAAmB,wBAAwB,iBAAiB,wFAAwF,SAAS,uCAAuC,aAAa,UAAU,8BAA8B,WAAW,WAAW,WAAW,4BAA4B,WAAW,wBAAwB,WAAW,aAAa,mBAAmB,aAAa,0BAA0B,uBAAuB,cAAc,cAAc,UAAU,4BAA4B,mCAAmC,WAAW,mBAAmB;AACzwB,4BAA4B,kBAAkB,WAAW,YAAY,mBAAmB,UAAU,0BAA0B,kBAAkB,gBAAgB,0CAA0C,OAAO,EAAE,mBAAmB,UAAU,4BAA4B,WAAW,SAAS,gBAAgB,OAAO,EAAE,aAAa,0BAA0B,mCAAmC;AACjY,iBAAiB,gCAAgC,qBAAqB,EAAE,cAAc,gBAAgB,UAAU,YAAY,EAAE,kBAAkB,UAAU,uCAAuC,sBAAsB,sBAAsB,QAAQ,4BAA4B,iBAAiB,gBAAgB,gBAAgB,wHAAwH,WAAW,IAAI,WAAW,uBAAuB;AAC3e,gBAAgB,YAAY,GAAG,gBAAgB,OAAO,WAAW,4CAA4C,cAAc,QAAQ,IAAI,uBAAuB,iBAAiB,qOAAqO,IAAI,OAAO,SAAS,iBAAiB;AACzb,uBAAuB,qBAAqB,gCAAgC,GAAG,EAAE,eAAe,2EAA2E,mDAAmD,gBAAgB,YAAY,WAAW,0BAA0B,mBAAmB,4BAA4B,WAAW,WAAW,UAAU,KAAK,oBAAoB,MAAM,EAAE,sCAAsC;AACrb,+CAA+C,yCAAyC,wCAAwC,4CAA4C,6BAA6B,qDAAqD,eAAe,SAAS,iBAAiB,KAAK,EAAE,sEAAsE,eAAe,iCAAiC,sCAAsC,IAAI,+FAA+F,sCAAsC,qBAAqB,OAAO,GAAG,GAAG,YAAY,aAAa,WAAW,YAAY,cAAc,KAAK,EAAE,qBAAqB,cAAc,uFAAuF,OAAO,iCAAiC,iCAAiC,mBAAmB,EAAE,GAAG,0CAA0C,QAAQ,OAAO,WAAW;AACz9B,cAAc,KAAK,QAAQ,0BAA0B,iBAAiB,YAAY,WAAW,KAAK,uCAAuC,UAAU,kBAAkB,uCAAuC,QAAQ,mFAAmF,8FAA8F,WAAW,4BAA4B,wCAAwC,WAAW;AAC/d,qCAAqC,QAAQ,oBAAoB,0EAA0E,oBAAoB,iGAAiG,wGAAwG,sCAAsC,QAAQ;AACtZ,mDAAmD,qEAAqE,iBAAiB,8BAA8B,KAAK,uBAAuB,4BAA4B,KAAK,oBAAoB,0BAA0B,KAAK,kBAAkB,2BAA2B,KAAK,mBAAmB,qCAAqC,qEAAqE,6BAA6B;AACne,IAAI,6BAA6B;;AAEjC;;;;;;;AC1BA,YAAY;;AAEZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,kDAAkD,cAAc,2JAA2J,gMAAgM,QAAQ,gBAAgB,+EAA+E,sEAAsE,aAAa,QAAQ,iCAAiC,sCAAsC,IAAI,+FAA+F,sCAAsC,qBAAqB,OAAO,GAAG,GAAG,kBAAkB,aAAa,qBAAqB,iBAAiB,cAAc,oCAAoC,0BAA0B,+EAA+E,0BAA0B,0DAA0D,MAAM,8BAA8B;AACprC,yBAAyB,gCAAgC,WAAW,KAAK,WAAW,6BAA6B,gBAAgB,MAAM,yBAAyB,iBAAiB,sBAAsB,KAAK,sBAAsB,+BAA+B,OAAO,QAAQ,4BAA4B,UAAU,yCAAyC,iDAAiD;AAChZ,qCAAqC,mBAAmB,eAAe,SAAS,iBAAiB,KAAK,mBAAmB,eAAe,SAAS,iBAAiB,SAAS,UAAU,IAAI,aAAa,EAAE,YAAY,mCAAmC,4BAA4B,4BAA4B,MAAM,OAAO,yBAAyB,MAAM,2BAA2B,MAAM,mBAAmB,qCAAqC,qEAAqE,4BAA4B,EAAE,wCAAwC;;AAE/jB;;;;;;;ACbA;AACA;;AAEA;;AAEA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,oBAAoB;AACpB;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW;;AAEX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;;AAEX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;;AAEX;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;;AAEX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,WAAW;AACX,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA;AACA;AACA,WAAW;AACX;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,EAAE;AACnB,kBAAkB,QAAQ;AAC1B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,EAAE;AACnB,kBAAkB,QAAQ;AAC1B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,EAAE;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,EAAE;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;;AAEA;;AAEA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA,eAAe;AACf,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,WAAW;AACzE,sCAAsC,YAAY;AAClD,qCAAqC,WAAW;AAChD;AACA;AACA;AACA,gDAAgD,WAAW,cAAc,UAAU;AACnF;AACA;AACA,4CAA4C,UAAU;AACtD,sCAAsC,YAAY;AAClD,qCAAqC,WAAW;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,4BAA4B;AAC1C,cAAc,gCAAgC;AAC9C;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA,qBAAqB;AACrB;AACA;AACA;;AAEA,CAAC;;;;;;;;;AChZD;AACA;;AAEA;;;AAGA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,iBAAiB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,CAAC;;;;;;;;ACjED;AACA;;AAEA;;AAEA;;AAEA;;;;AAIA;AACA;;AAEA;AACA;AACA,oBAAoB;AACpB,oBAAoB;AACpB,oBAAoB;AACpB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,uCAAuC;;AAEvC;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,0BAA0B;AACjD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA,aAAa;AACb,oCAAoC,gBAAgB;AACpD;AACA;AACA;AACA;AACA;AACA,0CAA0C,GAAG;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;;AAEA;;AAEA,GAAG;;;;;;;;;AChHH;AACA;;AAEA;;AAEA;;AAEA;;;;AAIA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,mCAAmC;AACnC;AACA,qBAAqB,iBAAiB;;AAEtC,2BAA2B,aAAa;;AAExC;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA,aAAa;AACb,oCAAoC,gBAAgB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,4BAA4B;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,4BAA4B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA,CAAC;;;;;;;;ACjQD;AACA;;AAEA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qCAAqC;;AAErC;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA,CAAC;;;;;;;;AC9HD;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;;AAGA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB,eAAe;AACf;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,WAAW;AACvD,sCAAsC,YAAY;AAClD,qCAAqC,WAAW;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,4BAA4B;AAC9C,kBAAkB,gCAAgC;AAClD;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA,+EAA+E;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,WAAW;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,mCAAmC;AACnC;AACA,qBAAqB,qBAAqB;;AAE1C,2BAA2B,aAAa;;AAExC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,2BAA2B;AAC9C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,2BAA2B;AAChD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,WAAW;AACX,kCAAkC,gBAAgB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,+BAA+B;AAC9D;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,oBAAoB,sDAAsD,EAAE;AAC5E;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,oBAAoB,wDAAwD,EAAE;AAC9E;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,qBAAqB,gBAAgB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAe,WAAW;AAC1B,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,gBAAgB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,eAAe;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,2CAA2C,YAAY;AACvD;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,wBAAwB;AAC3C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,2BAA2B;AAC9C;AACA;AACA;;AAEA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,YAAY;AAC3B,gBAAgB,EAAE;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,YAAY;AAC3B,gBAAgB,EAAE;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,YAAY;AAC3B,gBAAgB,qBAAqB;AACrC;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA,CAAC;;;;;;;;;ACzqBD;AACA;;;;AAIA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,aAAa;AAC5B,eAAe,YAAY;AAC3B,gBAAgB,YAAY;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,sBAAsB,4BAA4B;AAClD;AACA;AACA;AACA;AACA,4BAA4B,4BAA4B;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,IAAI;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAe,MAAM;AACrB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,gBAAgB,MAAM;AACtB;AACA;AACA;AACA,oCAAoC,QAAQ;AAC5C;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,KAAK;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA,gBAAgB,sBAAsB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,GAAG;;;;;;;;;ACpUH;AACA;;;AAGA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;;AAEA,CAAC;;;;;;;;;AC1ID;AACA;;;;AAIA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,4DAA4D;AAC5D;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA,gBAAgB,sBAAsB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA,GAAG;;;;;;;;;ACpCH;AACA;;AAEA;;AAEA;;AAEA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,KAAK;AAClB,aAAa,OAAO;AACpB,cAAc,QAAQ;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB;AACA,gBAAgB,+BAA+B;AAC/C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,+BAA+B;AAC9C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,KAAK;AACpB,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,KAAK;AACrB;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;;AAEA;AACA,iEAAiE;AACjE,kEAAkE,aAAa;AAC/E;AACA,gBAAgB,YAAY;AAC5B;AACA;AACA;AACA,iCAAiC,cAAc;AAC/C;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,uBAAuB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,KAAK;AACpB,eAAe,QAAQ;AACvB;AACA,gBAAgB,KAAK;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,gBAAgB,KAAK;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,gBAAgB,mBAAmB;AACnC;AACA;AACA;AACA;AACA,mCAAmC,oBAAoB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,gBAAgB,eAAe;AAC/B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB,oBAAoB;AACrC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB,uBAAuB;AACxC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,OAAO;AACP;AACA;;AAEA;AACA,iBAAiB,uBAAuB;AACxC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,KAAK;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,KAAK;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,WAAW;AACxB,cAAc,gBAAgB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,kBAAkB;AAC/B;AACA;AACA,CAAC;;;;;;;;ACjUD;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,kBAAkB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,oBAAoB;AACrC,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,QAAQ;AACzB;AACA,kBAAkB,qBAAqB;AACvC;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,YAAY;AAC7B,kBAAkB,qBAAqB;AACvC;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,GAAG;;;;;;;;AC7HH;AACA;;AAEA;;AAEA;;AAEA;;;AAGA;;AAEA;;AAEA;;AAEA;;AAEA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,gBAAgB;AACjC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA,SAAS;AACT,sCAAsC;AACtC;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,eAAe;AACpC;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,iBAAiB,EAAE;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB,QAAQ;AACzB,iBAAiB,GAAG;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,QAAQ;AACzB,iBAAiB,EAAE;AACnB,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,EAAE;AACnB,kBAAkB,mBAAmB;AACrC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,eAAe;AACf;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB,EAAE;AACnB,kBAAkB,EAAE;AACpB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA,kFAAkF,MAAM;AACxF;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB,SAAS,0CAA0C;AACpE;AACA;AACA;AACA;AACA;AACA,mDAAmD;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,wCAAwC,EAAE;AAC1C;AACA;AACA,WAAW;AACX;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,kBAAkB,QAAQ;AAC1B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB,EAAE;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB,EAAE;AACnB,kBAAkB,QAAQ;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,kBAAkB,QAAQ;AAC1B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB;AACA,iBAAiB,OAAO;AACxB;AACA;AACA;AACA,gEAAgE;AAChE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB,EAAE;AACnB,iBAAiB,EAAE;AACnB,kBAAkB,QAAQ;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA,GAAG;;AAEH,CAAC;;;;;;;;AClkBD;AACA;;AAEA;;;AAGA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,GAAG;AAC3C;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,0CAA0C,4BAA4B;AACtE;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,oBAAoB;AACpB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,OAAO;AAC7B;AACA;AACA;AACA,4BAA4B,OAAO;AACnC,6BAA6B,OAAO;AACpC,oBAAoB;AACpB;AACA;AACA;AACA,qCAAqC,QAAQ;AAC7C;AACA,gCAAgC,OAAO;AACvC;AACA;AACA,8BAA8B,OAAO;AACrC,+BAA+B,OAAO;AACtC,6BAA6B,OAAO;AACpC,gBAAgB;AAChB;AACA;AACA;AACA;AACA,+BAA+B,QAAQ;AACvC;AACA,gDAAgD;AAChD;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,oBAAoB;AACrC,iBAAiB,QAAQ;AACzB;AACA,kBAAkB,OAAO;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,aAAa;AAC3E;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,KAAK;AACtB,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,kBAAkB,QAAQ;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,KAAK;AACtB,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB;AACA;AACA,2DAA2D,MAAM;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,oBAAoB;AACrC,iBAAiB,OAAO;AACxB;AACA,iBAAiB,OAAO;AACxB,kBAAkB,QAAQ;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,KAAK;AACtB,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,kBAAkB,QAAQ;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,cAAc;AACnD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,KAAK;AACtB,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,iBAAiB,EAAE;AACnB,kBAAkB,QAAQ;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,oBAAoB;AACrC,kBAAkB,iBAAiB;AACnC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,oBAAoB;AACrC,kBAAkB,iBAAiB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,6BAA6B;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,KAAK;AACtB,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,iBAAiB,GAAG;AACpB;AACA,kBAAkB,SAAS;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,KAAK;AACtB,iBAAiB,OAAO;AACxB,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,KAAK;AACtB,iBAAiB,OAAO;AACxB,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA,GAAG;;AAEH,CAAC;;;;;;;;ACtdD;AACA;;AAEA;;AAEA;;;AAGA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,KAAK;AAClB,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,KAAK;AACpB,gBAAgB,MAAM;AACtB;AACA;AACA;AACA,mCAAmC,cAAc;AACjD,OAAO;AACP;AACA;AACA,uCAAuC,cAAc;AACrD,WAAW;AACX;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA,iBAAiB,iBAAiB;AAClC;AACA,iBAAiB,iBAAiB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb,8DAA8D,gBAAgB;AAC9E;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,qBAAqB,sBAAsB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,sCAAsC;AAC5D,wBAAwB,4CAA4C;AACpE;AACA;AACA;AACA;AACA,sBAAsB,sCAAsC;AAC5D,2BAA2B,4BAA4B;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,qBAAqB;AACxC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,qBAAqB;AACxC;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA,CAAC;;;;;;;;AC3OD;AACA;;AAEA;;AAEA;;;AAGA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,WAAW;AAChD,KAAK;AACL;AACA;AACA,GAAG;;AAEH,iCAAiC,0BAA0B;AAC3D;AACA;AACA;AACA;AACA,yCAAyC,cAAc,iBAAiB,0BAA0B;AAClG;AACA;AACA,KAAK;AACL,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa,SAAS;AACtB;AACA;AACA;AACA,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,wBAAwB,iBAAiB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,yEAAyE,cAAc;;AAEvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,gBAAgB,YAAY;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,eAAe,MAAM;AACrB,gBAAgB,YAAY;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,eAAe,MAAM;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,wBAAwB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,wBAAwB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,eAAe,MAAM;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,eAAe,KAAK;AACpB,eAAe,OAAO;AACtB,eAAe,SAAS;AACxB,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,eAAe,KAAK;AACpB,eAAe,OAAO;AACtB,eAAe,SAAS;AACxB;AACA,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,eAAe,YAAY;AAC3B,eAAe,OAAO;AACtB,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,iBAAiB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,eAAe,YAAY;AAC3B,eAAe,OAAO;AACtB,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,iBAAiB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA,qBAAqB,wBAAwB;AAC7C;AACA;AACA,KAAK;;AAEL;AACA;AACA,eAAe,OAAO;AACtB,gBAAgB,OAAO;AACvB;AACA;AACA,wBAAwB,6BAA6B;AACrD;AACA,0BAA0B,oBAAoB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,KAAK;AACpB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,eAAe,YAAY;AAC3B,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB;AACA;AACA,gCAAgC,kDAAkD;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,WAAW;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,WAAW;AACtC;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,6BAA6B;AACxD;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA,CAAC;;;;;;;;AC70BD;AACA;;;;AAIA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,UAAU;AACvB;AACA,aAAa,UAAU;AACvB;AACA,aAAa,SAAS;AACtB;AACA,cAAc,gBAAgB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA,CAAC;;;;;;;;AChGD;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+BAA+B;AAC9C,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA,qBAAqB,eAAe;AACpC;AACA,uBAAuB,eAAe;AACtC;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+BAA+B;AAC9C,gBAAgB,eAAe;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,+BAA+B;AAC9C,eAAe,QAAQ;AACvB;AACA,gBAAgB,EAAE;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,gBAAgB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,+BAA+B;AAC9C,eAAe,EAAE;AACjB,gBAAgB,mBAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,cAAc,QAAQ;AACtB;AACA;;AAEA;;AAEA,CAAC;;;;;;;;ACvQD;AACA;;;AAGA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,iCAAiC,OAAO;AACxC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,WAAW;AAC1B,eAAe,MAAM;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,WAAW;AAC1B,eAAe,MAAM;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,CAAC;;;;;;;;ACxHD;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA,CAAC;;;;;;;;ACrBD;AACA;;;;;;;ACDA;AACA","file":"polymer.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 41);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 183e46e6af4373b8a572","/*__wc__loader*/\n\n(function() {\n  'use strict';\n\n  const userPolymer = window.Polymer;\n\n  /**\n   * @namespace Polymer\n   * @summary Polymer is a lightweight library built on top of the web\n   * standards-based Web Components API's, and makes it easy to build your\n   * own custom HTML elements.\n   * @param {Object} info Prototype for the custom element. It must contain\n   * an `is` property to specify the element name. Other properties populate\n   * the element prototype. The `properties`, `observers`, `hostAttributes`,\n   * and `listeners` properties are processed to create element features.\n   * @return {Object} Returns a custom element class for the given provided\n   * prototype `info` object. The name of the element if given by `info.is`.\n   */\n  window.Polymer = function(info) {\n    return window.Polymer._polymerFn(info);\n  }\n\n  // support user settings on the Polymer object\n  if (userPolymer) {\n    Object.assign(Polymer, userPolymer);\n  }\n\n  // To be plugged by legacy implementation if loaded\n  /**\n   * @param {Object} info Prototype for the custom element. It must contain\n   * an `is` property to specify the element name. Other properties populate\n   * the element prototype. The `properties`, `observers`, `hostAttributes`,\n   * and `listeners` properties are processed to create element features.\n   */\n  window.Polymer._polymerFn = function(info) { // eslint-disable-line no-unused-vars\n    throw new Error('Load polymer.html to use the Polymer() function.');\n  }\n  window.Polymer.version = '2.0.1';\n\n  /* eslint-disable no-unused-vars */\n  /*\n  When using Closure Compiler, JSCompiler_renameProperty(property, object) is replaced by the munged name for object[property]\n  We cannot alias this function, so we have to use a small shim that has the same behavior when not compiling.\n  */\n  window.JSCompiler_renameProperty = function(prop, obj) {\n    return prop;\n  }\n  /* eslint-enable */\n\n})();\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/utils/boot.html\n// module id = 0\n// module chunks = 0","/*__wc__loader*/\nrequire('./boot.html');\n\n\n\n(function() {\n\n  'use strict';\n\n  // unique global id for deduping mixins.\n  let dedupeId = 0;\n\n  /**\n   * Given a mixin producing function, memoize applications of mixin to base\n   * @private\n   * @param {Function} mixin Mixin for which to create a caching mixin.\n   * @return {Function} Returns a mixin which when applied multiple times to the\n   * same base will always return the same extended class.\n   */\n  function cachingMixin(mixin) {\n    return function(base) {\n      if (!mixin.__mixinApplications) {\n        mixin.__mixinApplications = new WeakMap();\n      }\n      let map = mixin.__mixinApplications;\n      let application = map.get(base);\n      if (!application) {\n        application = mixin(base);\n        map.set(base, application);\n      }\n      return application;\n    };\n  }\n\n  /**\n   * Wraps an ES6 class expression mixin such that the mixin is only applied\n   * if it has not already been applied its base argument.  Also memoizes mixin\n   * applications.\n   *\n   * @memberof Polymer\n   * @param {Function} mixin ES6 class expression mixin to wrap\n   * @return {Function} Wrapped mixin that deduplicates and memoizes\n   *   mixin applications to base\n   */\n  Polymer.dedupingMixin = function(mixin) {\n    mixin = cachingMixin(mixin);\n    // maintain a unique id for each mixin\n    mixin.__dedupeId = ++dedupeId;\n    return function(base) {\n      let baseSet = base.__mixinSet;\n      if (baseSet && baseSet[mixin.__dedupeId]) {\n        return base;\n      }\n      let extended = mixin(base);\n      // copy inherited mixin set from the extended class, or the base class\n      // NOTE: we avoid use of Set here because some browser (IE11)\n      // cannot extend a base Set via the constructor.\n      extended.__mixinSet =\n        Object.create(extended.__mixinSet || baseSet || null);\n      extended.__mixinSet[mixin.__dedupeId] = true;\n      return extended;\n    }\n  };\n\n})();\n\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/utils/mixin.html\n// module id = 1\n// module chunks = 0","/*__wc__loader*/\nrequire('../utils/mixin.html');\n\n\n(function() {\n  'use strict';\n\n  // Common implementation for mixin & behavior\n  function mutablePropertyChange(inst, property, value, old, mutableData) {\n    let isObject;\n    if (mutableData) {\n      isObject = (typeof value === 'object' && value !== null);\n      // Pull `old` for Objects from temp cache, but treat `null` as a primitive\n      if (isObject) {\n        old = inst.__dataTemp[property];\n      }\n    }\n    // Strict equality check, but return false for NaN===NaN\n    let shouldChange = (old !== value && (old === old || value === value));\n    // Objects are stored in temporary cache (cleared at end of\n    // turn), which is used for dirty-checking\n    if (isObject && shouldChange) {\n      inst.__dataTemp[property] = value;\n    }\n    return shouldChange;\n  }\n\n  /**\n   * Element class mixin to skip strict dirty-checking for objects and arrays\n   * (always consider them to be \"dirty\"), for use on elements utilizing\n   * `Polymer.PropertyEffects`\n   *\n   * By default, `Polymer.PropertyEffects` performs strict dirty checking on\n   * objects, which means that any deep modifications to an object or array will\n   * not be propagated unless \"immutable\" data patterns are used (i.e. all object\n   * references from the root to the mutation were changed).\n   *\n   * Polymer also provides a proprietary data mutation and path notification API\n   * (e.g. `notifyPath`, `set`, and array mutation API's) that allow efficient\n   * mutation and notification of deep changes in an object graph to all elements\n   * bound to the same object graph.\n   *\n   * In cases where neither immutable patterns nor the data mutation API can be\n   * used, applying this mixin will cause Polymer to skip dirty checking for\n   * objects and arrays (always consider them to be \"dirty\").  This allows a\n   * user to make a deep modification to a bound object graph, and then either\n   * simply re-set the object (e.g. `this.items = this.items`) or call `notifyPath`\n   * (e.g. `this.notifyPath('items')`) to update the tree.  Note that all\n   * elements that wish to be updated based on deep mutations must apply this\n   * mixin or otherwise skip strict dirty checking for objects/arrays.\n   *\n   * In order to make the dirty check strategy configurable, see\n   * `Polymer.OptionalMutableData`.\n   *\n   * Note, the performance characteristics of propagating large object graphs\n   * will be worse as opposed to using strict dirty checking with immutable\n   * patterns or Polymer's path notification API.\n   *\n   * @polymerMixin\n   * @memberof Polymer\n   * @summary Element class mixin to skip strict dirty-checking for objects\n   *   and arrays\n   */\n  Polymer.MutableData = Polymer.dedupingMixin(superClass => {\n\n    /**\n     * @polymerMixinClass\n     * @implements {Polymer_MutableData}\n     */\n    class MutableData extends superClass {\n      /**\n       * Overrides `Polymer.PropertyEffects` to provide option for skipping\n       * strict equality checking for Objects and Arrays.\n       *\n       * This method pulls the value to dirty check against from the `__dataTemp`\n       * cache (rather than the normal `__data` cache) for Objects.  Since the temp\n       * cache is cleared at the end of a turn, this implementation allows\n       * side-effects of deep object changes to be processed by re-setting the\n       * same object (using the temp cache as an in-turn backstop to prevent\n       * cycles due to 2-way notification).\n       *\n       * @param {string} property Property name\n       * @param {*} value New property value\n       * @param {*} old Previous property value\n       * @return {boolean} Whether the property should be considered a change\n       * @protected\n       */\n      _shouldPropertyChange(property, value, old) {\n        return mutablePropertyChange(this, property, value, old, true);\n      }\n\n    }\n\n    return MutableData;\n\n  });\n\n  /**\n   * Element class mixin to add the optional ability to skip strict\n   * dirty-checking for objects and arrays (always consider them to be\n   * \"dirty\") by setting a `mutable-data` attribute on an element instance.\n   *\n   * By default, `Polymer.PropertyEffects` performs strict dirty checking on\n   * objects, which means that any deep modifications to an object or array will\n   * not be propagated unless \"immutable\" data patterns are used (i.e. all object\n   * references from the root to the mutation were changed).\n   *\n   * Polymer also provides a proprietary data mutation and path notification API\n   * (e.g. `notifyPath`, `set`, and array mutation API's) that allow efficient\n   * mutation and notification of deep changes in an object graph to all elements\n   * bound to the same object graph.\n   *\n   * In cases where neither immutable patterns nor the data mutation API can be\n   * used, applying this mixin will allow Polymer to skip dirty checking for\n   * objects and arrays (always consider them to be \"dirty\").  This allows a\n   * user to make a deep modification to a bound object graph, and then either\n   * simply re-set the object (e.g. `this.items = this.items`) or call `notifyPath`\n   * (e.g. `this.notifyPath('items')`) to update the tree.  Note that all\n   * elements that wish to be updated based on deep mutations must apply this\n   * mixin or otherwise skip strict dirty checking for objects/arrays.\n   *\n   * While this mixin adds the ability to forgo Object/Array dirty checking,\n   * the `mutableData` flag defaults to false and must be set on the instance.\n   *\n   * Note, the performance characteristics of propagating large object graphs\n   * will be worse by relying on `mutableData: true` as opposed to using\n   * strict dirty checking with immutable patterns or Polymer's path notification\n   * API.\n   *\n   * @polymerMixin\n   * @memberof Polymer\n   * @summary Element class mixin to optionally skip strict dirty-checking\n   *   for objects and arrays\n   */\n  Polymer.OptionalMutableData = Polymer.dedupingMixin(superClass => {\n\n    /**\n     * @polymerMixinClass\n     * @implements {Polymer_OptionalMutableData}\n     */\n    class OptionalMutableData extends superClass {\n\n      static get properties() {\n        return {\n          /**\n           * Instance-level flag for configuring the dirty-checking strategy\n           * for this element.  When true, Objects and Arrays will skip dirty\n           * checking, otherwise strict equality checking will be used.\n           */\n          mutableData: Boolean\n        };\n      }\n\n      /**\n       * Overrides `Polymer.PropertyEffects` to provide option for skipping\n       * strict equality checking for Objects and Arrays.\n       *\n       * When `this.mutableData` is true on this instance, this method\n       * pulls the value to dirty check against from the `__dataTemp` cache\n       * (rather than the normal `__data` cache) for Objects.  Since the temp\n       * cache is cleared at the end of a turn, this implementation allows\n       * side-effects of deep object changes to be processed by re-setting the\n       * same object (using the temp cache as an in-turn backstop to prevent\n       * cycles due to 2-way notification).\n       *\n       * @param {string} property Property name\n       * @param {*} value New property value\n       * @param {*} old Previous property value\n       * @return {boolean} Whether the property should be considered a change\n       * @protected\n       */\n      _shouldPropertyChange(property, value, old) {\n        return mutablePropertyChange(this, property, value, old, this.mutableData);\n      }\n    }\n\n    return OptionalMutableData;\n\n  });\n\n  // Export for use by legacy behavior\n  Polymer.MutableData._mutablePropertyChange = mutablePropertyChange;\n\n})();\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/mixins/mutable-data.html\n// module id = 2\n// module chunks = 0","/*__wc__loader*/\nrequire('./boot.html');\n\n\n(function() {\n\n  'use strict';\n\n  /** @typedef {{run: function(function(), number=):number, cancel: function(number)}} */\n  let AsyncInterface; // eslint-disable-line no-unused-vars\n\n  // Microtask implemented using Mutation Observer\n  let microtaskCurrHandle = 0;\n  let microtaskLastHandle = 0;\n  let microtaskCallbacks = [];\n  let microtaskNodeContent = 0;\n  let microtaskNode = document.createTextNode('');\n  new window.MutationObserver(microtaskFlush).observe(microtaskNode, {characterData: true});\n\n  function microtaskFlush() {\n    const len = microtaskCallbacks.length;\n    for (let i = 0; i < len; i++) {\n      let cb = microtaskCallbacks[i];\n      if (cb) {\n        try {\n          cb();\n        } catch (e) {\n          setTimeout(() => { throw e });\n        }\n      }\n    }\n    microtaskCallbacks.splice(0, len);\n    microtaskLastHandle += len;\n  }\n\n  /**\n   * Module that provides a number of strategies for enqueuing asynchronous\n   * tasks.  Each sub-module provides a standard `run(fn)` interface that returns a\n   * handle, and a `cancel(handle)` interface for canceling async tasks before\n   * they run.\n   *\n   * @namespace\n   * @memberof Polymer\n   * @summary Module that provides a number of strategies for enqueuing asynchronous\n   * tasks.\n   */\n  Polymer.Async = {\n\n    /**\n     * Async interface wrapper around `setTimeout`.\n     *\n     * @namespace\n     * @memberof Polymer.Async\n     * @summary Async interface wrapper around `setTimeout`.\n     */\n    timeOut: {\n      /**\n       * Returns a sub-module with the async interface providing the provided\n       * delay.\n       *\n       * @memberof Polymer.Async.timeOut\n       * @param {number} delay Time to wait before calling callbacks in ms\n       * @return {AsyncInterface} An async timeout interface\n       */\n      after(delay) {\n        return  {\n          run(fn) { return setTimeout(fn, delay) },\n          cancel: window.clearTimeout.bind(window)\n        }\n      },\n      /**\n       * Enqueues a function called in the next task.\n       *\n       * @memberof Polymer.Async.timeOut\n       * @param {Function} fn Callback to run\n       * @return {number} Handle used for canceling task\n       */\n      run: window.setTimeout.bind(window),\n      /**\n       * Cancels a previously enqueued `timeOut` callback.\n       *\n       * @memberof Polymer.Async.timeOut\n       * @param {number} handle Handle returned from `run` of callback to cancel\n       */\n      cancel: window.clearTimeout.bind(window)\n    },\n\n    /**\n     * Async interface wrapper around `requestAnimationFrame`.\n     *\n     * @namespace\n     * @memberof Polymer.Async\n     * @summary Async interface wrapper around `requestAnimationFrame`.\n     */\n    animationFrame: {\n      /**\n       * Enqueues a function called at `requestAnimationFrame` timing.\n       *\n       * @memberof Polymer.Async.animationFrame\n       * @param {Function} fn Callback to run\n       * @return {number} Handle used for canceling task\n       */\n      run: window.requestAnimationFrame.bind(window),\n      /**\n       * Cancels a previously enqueued `animationFrame` callback.\n       *\n       * @memberof Polymer.Async.timeOut\n       * @param {number} handle Handle returned from `run` of callback to cancel\n       */\n      cancel: window.cancelAnimationFrame.bind(window)\n    },\n\n    /**\n     * Async interface wrapper around `requestIdleCallback`.  Falls back to\n     * `setTimeout` on browsers that do not support `requestIdleCallback`.\n     *\n     * @namespace\n     * @memberof Polymer.Async\n     * @summary Async interface wrapper around `requestIdleCallback`.\n     */\n    idlePeriod: {\n      /**\n       * Enqueues a function called at `requestIdleCallback` timing.\n       *\n       * @memberof Polymer.Async.idlePeriod\n       * @param {function(IdleDeadline)} fn Callback to run\n       * @return {number} Handle used for canceling task\n       */\n      run(fn) {\n        return window.requestIdleCallback ?\n          window.requestIdleCallback(fn) :\n          window.setTimeout(fn, 16);\n      },\n      /**\n       * Cancels a previously enqueued `idlePeriod` callback.\n       *\n       * @memberof Polymer.Async.idlePeriod\n       * @param {number} handle Handle returned from `run` of callback to cancel\n       */\n      cancel(handle) {\n        window.cancelIdleCallback ?\n          window.cancelIdleCallback(handle) :\n          window.clearTimeout(handle);\n      }\n    },\n\n    /**\n     * Async interface for enqueueing callbacks that run at microtask timing.\n     *\n     * Note that microtask timing is achieved via a single `MutationObserver`,\n     * and thus callbacks enqueued with this API will all run in a single\n     * batch, and not interleaved with other microtasks such as promises.\n     * Promises are avoided as an implementation choice for the time being\n     * due to Safari bugs that cause Promises to lack microtask guarantees.\n     *\n     * @namespace\n     * @memberof Polymer.Async\n     * @summary Async interface for enqueueing callbacks that run at microtask\n     *   timing.\n     */\n    microTask: {\n\n      /**\n       * Enqueues a function called at microtask timing.\n       *\n       * @memberof Polymer.Async.microTask\n       * @param {Function} callback Callback to run\n       * @return {*} Handle used for canceling task\n       */\n      run(callback) {\n        microtaskNode.textContent = microtaskNodeContent++;\n        microtaskCallbacks.push(callback);\n        return microtaskCurrHandle++;\n      },\n\n      /**\n       * Cancels a previously enqueued `microTask` callback.\n       *\n       * @memberof Polymer.Async.microTask\n       * @param {number} handle Handle returned from `run` of callback to cancel\n       */\n      cancel(handle) {\n        const idx = handle - microtaskLastHandle;\n        if (idx >= 0) {\n          if (!microtaskCallbacks[idx]) {\n            throw new Error('invalid async handle: ' + handle);\n          }\n          microtaskCallbacks[idx] = null;\n        }\n      }\n\n    }\n  };\n\n})();\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/utils/async.html\n// module id = 3\n// module chunks = 0","/*__wc__loader*/\nrequire('./boot.html');\n\n\n\n  (function() {\n    'use strict';\n\n    let CSS_URL_RX = /(url\\()([^)]*)(\\))/g;\n    let ABS_URL = /(^\\/)|(^#)|(^[\\w-\\d]*:)/;\n    let workingURL;\n    let resolveDoc;\n    /**\n     * Resolves the given URL against the provided `baseUri'.\n     *\n     * @memberof Polymer.ResolveUrl\n     * @param {string} url Input URL to resolve\n     * @param {string} baseURI Base URI to resolve the URL against\n     * @return {string} resolved URL\n     */\n    function resolveUrl(url, baseURI) {\n      if (url && ABS_URL.test(url)) {\n        return url;\n      }\n      // Lazy feature detection.\n      if (workingURL === undefined) {\n        workingURL = false;\n        try {\n          const u = new URL('b', 'http://a');\n          u.pathname = 'c%20d';\n          workingURL = (u.href === 'http://a/c%20d');\n        } catch (e) {\n          // silently fail\n        }\n      }\n      if (!baseURI) {\n        baseURI = document.baseURI || window.location.href;\n      }\n      if (workingURL) {\n        return (new URL(url, baseURI)).href;\n      }\n      // Fallback to creating an anchor into a disconnected document.\n      if (!resolveDoc) {\n        resolveDoc = document.implementation.createHTMLDocument('temp');\n        resolveDoc.base = resolveDoc.createElement('base');\n        resolveDoc.head.appendChild(resolveDoc.base);\n        resolveDoc.anchor = resolveDoc.createElement('a');\n        resolveDoc.body.appendChild(resolveDoc.anchor);\n      }\n      resolveDoc.base.href = baseURI;\n      resolveDoc.anchor.href = url;\n      return resolveDoc.anchor.href || url;\n\n    }\n\n    /**\n     * Resolves any relative URL's in the given CSS text against the provided\n     * `ownerDocument`'s `baseURI`.\n     *\n     * @memberof Polymer.ResolveUrl\n     * @param {string} cssText CSS text to process\n     * @param {string} baseURI Base URI to resolve the URL against\n     * @return {string} Processed CSS text with resolved URL's\n     */\n    function resolveCss(cssText, baseURI) {\n      return cssText.replace(CSS_URL_RX, function(m, pre, url, post) {\n        return pre + '\\'' +\n          resolveUrl(url.replace(/[\"']/g, ''), baseURI) +\n          '\\'' + post;\n      });\n    }\n\n    /**\n     * Returns a path from a given `url`. The path includes the trailing\n     * `/` from the url.\n     *\n     * @memberof Polymer.ResolveUrl\n     * @param {string} url Input URL to transform\n     * @return {string} resolved path\n     */\n    function pathFromUrl(url) {\n      return url.substring(0, url.lastIndexOf('/') + 1);\n    }\n\n    /**\n     * Module with utilities for resolving relative URL's.\n     *\n     * @namespace\n     * @memberof Polymer\n     * @summary Module with utilities for resolving relative URL's.\n     */\n    Polymer.ResolveUrl = {\n      resolveCss: resolveCss,\n      resolveUrl: resolveUrl,\n      pathFromUrl: pathFromUrl\n    };\n\n  })();\n\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/utils/resolve-url.html\n// module id = 4\n// module chunks = 0","/*__wc__loader*/\nrequire('../utils/boot.html');\n\nrequire('../utils/mixin.html');\n\nrequire('../utils/path.html');\n\nrequire('../utils/case-map.html');\n\nrequire('./property-accessors.html');\n\nrequire('./template-stamp.html');\n\n\n(function() {\n\n  'use strict';\n\n  /** @const {Object} */\n  const CaseMap = Polymer.CaseMap;\n\n  // Monotonically increasing unique ID used for de-duping effects triggered\n  // from multiple properties in the same turn\n  let dedupeId = 0;\n\n  // Property effect types; effects are stored on the prototype using these keys\n  const TYPES = {\n    COMPUTE: '__computeEffects',\n    REFLECT: '__reflectEffects',\n    NOTIFY: '__notifyEffects',\n    PROPAGATE: '__propagateEffects',\n    OBSERVE: '__observeEffects',\n    READ_ONLY: '__readOnly'\n  }\n\n  /**\n   * Ensures that the model has an own-property map of effects for the given type.\n   * The model may be a prototype or an instance.\n   *\n   * Property effects are stored as arrays of effects by property in a map,\n   * by named type on the model. e.g.\n   *\n   *   __computeEffects: {\n   *     foo: [ ... ],\n   *     bar: [ ... ]\n   *   }\n   *\n   * If the model does not yet have an effect map for the type, one is created\n   * and returned.  If it does, but it is not an own property (i.e. the\n   * prototype had effects), the the map is deeply cloned and the copy is\n   * set on the model and returned, ready for new effects to be added.\n   *\n   * @param {Object} model Prototype or instance\n   * @param {string} type Property effect type\n   * @return {Object} The own-property map of effects for the given type\n   * @private\n   */\n  function ensureOwnEffectMap(model, type) {\n    let effects = model[type];\n    if (!effects) {\n      effects = model[type] = {};\n    } else if (!model.hasOwnProperty(type)) {\n      effects = model[type] = Object.create(model[type]);\n      for (let p in effects) {\n        let protoFx = effects[p];\n        let instFx = effects[p] = Array(protoFx.length);\n        for (let i=0; i<protoFx.length; i++) {\n          instFx[i] = protoFx[i];\n        }\n      }\n    }\n    return effects;\n  }\n\n  // -- effects ----------------------------------------------\n\n  /**\n   * Runs all effects of a given type for the given set of property changes\n   * on an instance.\n   *\n   * @param {Object} inst The instance with effects to run\n   * @param {Object} effects Object map of property-to-Array of effects\n   * @param {Object} props Bag of current property changes\n   * @param {Object=} oldProps Bag of previous values for changed properties\n   * @param {boolean=} hasPaths True with `props` contains one or more paths\n   * @param {*=} extraArgs Additional metadata to pass to effect function\n   * @return {boolean} True if an effect ran for this property\n   * @private\n   */\n  function runEffects(inst, effects, props, oldProps, hasPaths, extraArgs) {\n    if (effects) {\n      let ran = false;\n      let id = dedupeId++;\n      for (let prop in props) {\n        if (runEffectsForProperty(inst, effects, id, prop, props, oldProps, hasPaths, extraArgs)) {\n          ran = true;\n        }\n      }\n      return ran;\n    }\n    return false;\n  }\n\n  /**\n   * Runs a list of effects for a given property.\n   *\n   * @param {Object} inst The instance with effects to run\n   * @param {Object} effects Object map of property-to-Array of effects\n   * @param {number} dedupeId Counter used for de-duping effects\n   * @param {string} prop Name of changed property\n   * @param {*} props Changed properties\n   * @param {*} oldProps Old properties\n   * @param {boolean=} hasPaths True with `props` contains one or more paths\n   * @param {*=} extraArgs Additional metadata to pass to effect function\n   * @return {boolean} True if an effect ran for this property\n   * @private\n   */\n  function runEffectsForProperty(inst, effects, dedupeId, prop, props, oldProps, hasPaths, extraArgs) {\n    let ran = false;\n    let rootProperty = hasPaths ? Polymer.Path.root(prop) : prop;\n    let fxs = effects[rootProperty];\n    if (fxs) {\n      for (let i=0, l=fxs.length, fx; (i<l) && (fx=fxs[i]); i++) {\n        if ((!fx.info || fx.info.lastRun !== dedupeId) &&\n            (!hasPaths || pathMatchesTrigger(prop, fx.trigger))) {\n          if (fx.info) {\n            fx.info.lastRun = dedupeId;\n          }\n          fx.fn(inst, prop, props, oldProps, fx.info, hasPaths, extraArgs);\n          ran = true;\n        }\n      }\n    }\n    return ran;\n  }\n\n  /**\n   * Determines whether a property/path that has changed matches the trigger\n   * criteria for an effect.  A trigger is a descriptor with the following\n   * structure, which matches the descriptors returned from `parseArg`.\n   * e.g. for `foo.bar.*`:\n   * ```\n   * trigger: {\n   *   name: 'a.b',\n   *   structured: true,\n   *   wildcard: true\n   * }\n   * ```\n   * If no trigger is given, the path is deemed to match.\n   *\n   * @param {string} path Path or property that changed\n   * @param {Object} trigger Descriptor\n   * @return {boolean} Whether the path matched the trigger\n   */\n  function pathMatchesTrigger(path, trigger) {\n    if (trigger) {\n      let triggerPath = trigger.name;\n      return (triggerPath == path) ||\n        (trigger.structured && Polymer.Path.isAncestor(triggerPath, path)) ||\n        (trigger.wildcard && Polymer.Path.isDescendant(triggerPath, path));\n    } else {\n      return true;\n    }\n  }\n\n  /**\n   * Implements the \"observer\" effect.\n   *\n   * Calls the method with `info.methodName` on the instance, passing the\n   * new and old values.\n   *\n   * @param {Object} inst The instance the effect will be run on\n   * @param {string} property Name of property\n   * @param {Object} props Bag of current property changes\n   * @param {Object} oldProps Bag of previous values for changed properties\n   * @param {Object} info Effect metadata\n   * @private\n   */\n  function runObserverEffect(inst, property, props, oldProps, info) {\n    let fn = inst[info.methodName];\n    let changedProp = info.property;\n    if (fn) {\n      fn.call(inst, inst.__data[changedProp], oldProps[changedProp]);\n    } else if (!info.dynamicFn) {\n      console.warn('observer method `' + info.methodName + '` not defined');\n    }\n  }\n\n  /**\n   * Runs \"notify\" effects for a set of changed properties.\n   *\n   * This method differs from the generic `runEffects` method in that it\n   * will dispatch path notification events in the case that the property\n   * changed was a path and the root property for that path didn't have a\n   * \"notify\" effect.  This is to maintain 1.0 behavior that did not require\n   * `notify: true` to ensure object sub-property notifications were\n   * sent.\n   *\n   * @param {Element} inst The instance with effects to run\n   * @param {Object} notifyProps Bag of properties to notify\n   * @param {Object} props Bag of current property changes\n   * @param {Object} oldProps Bag of previous values for changed properties\n   * @param {boolean} hasPaths True with `props` contains one or more paths\n   * @private\n   */\n  function runNotifyEffects(inst, notifyProps, props, oldProps, hasPaths) {\n    // Notify\n    let fxs = inst.__notifyEffects;\n    let notified;\n    let id = dedupeId++;\n    // Try normal notify effects; if none, fall back to try path notification\n    for (let prop in notifyProps) {\n      if (notifyProps[prop]) {\n        if (fxs && runEffectsForProperty(inst, fxs, id, prop, props, oldProps, hasPaths)) {\n          notified = true;\n        } else if (hasPaths && notifyPath(inst, prop, props)) {\n          notified = true;\n        }\n      }\n    }\n    // Flush host if we actually notified and host was batching\n    // And the host has already initialized clients; this prevents\n    // an issue with a host observing data changes before clients are ready.\n    let host;\n    if (notified && (host = inst.__dataHost) && host._invalidateProperties) {\n      host._invalidateProperties();\n    }\n  }\n\n  /**\n   * Dispatches {property}-changed events with path information in the detail\n   * object to indicate a sub-path of the property was changed.\n   *\n   * @param {Element} inst The element from which to fire the event\n   * @param {string} path The path that was changed\n   * @param {Object} props Bag of current property changes\n   * @return {boolean} Returns true if the path was notified\n   * @private\n   */\n  function notifyPath(inst, path, props) {\n    let rootProperty = Polymer.Path.root(path);\n    if (rootProperty !== path) {\n      let eventName = Polymer.CaseMap.camelToDashCase(rootProperty) + '-changed';\n      dispatchNotifyEvent(inst, eventName, props[path], path);\n      return true;\n    }\n  }\n\n  /**\n   * Dispatches {property}-changed events to indicate a property (or path)\n   * changed.\n   *\n   * @param {Element} inst The element from which to fire the event\n   * @param {string} eventName The name of the event to send ('{property}-changed')\n   * @param {*} value The value of the changed property\n   * @param {string | null | undefined} path If a sub-path of this property changed, the path\n   *   that changed (optional).\n   * @private\n   */\n  function dispatchNotifyEvent(inst, eventName, value, path) {\n    let detail = {\n      value: value,\n      queueProperty: true\n    };\n    if (path) {\n      detail.path = path;\n    }\n    inst.dispatchEvent(new CustomEvent(eventName, { detail }));\n  }\n\n  /**\n   * Implements the \"notify\" effect.\n   *\n   * Dispatches a non-bubbling event named `info.eventName` on the instance\n   * with a detail object containing the new `value`.\n   *\n   * @param {Element} inst The instance the effect will be run on\n   * @param {string} property Name of property\n   * @param {Object} props Bag of current property changes\n   * @param {Object} oldProps Bag of previous values for changed properties\n   * @param {Object} info Effect metadata\n   * @param {boolean} hasPaths True with `props` contains one or more paths\n   * @private\n   */\n  function runNotifyEffect(inst, property, props, oldProps, info, hasPaths) {\n    let rootProperty = hasPaths ? Polymer.Path.root(property) : property;\n    let path = rootProperty != property ? property : null;\n    let value = path ? Polymer.Path.get(inst, path) : inst.__data[property];\n    if (path && value === undefined) {\n      value = props[property];  // specifically for .splices\n    }\n    dispatchNotifyEvent(inst, info.eventName, value, path);\n  }\n\n  /**\n   * Handler function for 2-way notification events. Receives context\n   * information captured in the `addNotifyListener` closure from the\n   * `__notifyListeners` metadata.\n   *\n   * Sets the value of the notified property to the host property or path.  If\n   * the event contained path information, translate that path to the host\n   * scope's name for that path first.\n   *\n   * @param {Event} event Notification event (e.g. '<property>-changed')\n   * @param {Object} inst Host element instance handling the notification event\n   * @param {string} fromProp Child element property that was bound\n   * @param {string} toPath Host property/path that was bound\n   * @param {boolean} negate Whether the binding was negated\n   * @private\n   */\n  function handleNotification(event, inst, fromProp, toPath, negate) {\n    let value;\n    let detail = event.detail;\n    let fromPath = detail && detail.path;\n    if (fromPath) {\n      toPath = Polymer.Path.translate(fromProp, toPath, fromPath);\n      value = detail && detail.value;\n    } else {\n      value = event.target[fromProp];\n    }\n    value = negate ? !value : value;\n    if (!inst.__readOnly || !inst.__readOnly[toPath]) {\n      if (inst._setPendingPropertyOrPath(toPath, value, true, Boolean(fromPath))\n        && (!detail || !detail.queueProperty)) {\n        inst._invalidateProperties();\n      }\n    }\n  }\n\n  /**\n   * Implements the \"reflect\" effect.\n   *\n   * Sets the attribute named `info.attrName` to the given property value.\n   *\n   * @param {Object} inst The instance the effect will be run on\n   * @param {string} property Name of property\n   * @param {Object} props Bag of current property changes\n   * @param {Object} oldProps Bag of previous values for changed properties\n   * @param {Object} info Effect metadata\n   * @private\n   */\n  function runReflectEffect(inst, property, props, oldProps, info) {\n    let value = inst.__data[property];\n    if (Polymer.sanitizeDOMValue) {\n      value = Polymer.sanitizeDOMValue(value, info.attrName, 'attribute', inst);\n    }\n    inst._propertyToAttribute(property, info.attrName, value);\n  }\n\n  /**\n   * Runs \"computed\" effects for a set of changed properties.\n   *\n   * This method differs from the generic `runEffects` method in that it\n   * continues to run computed effects based on the output of each pass until\n   * there are no more newly computed properties.  This ensures that all\n   * properties that will be computed by the initial set of changes are\n   * computed before other effects (binding propagation, observers, and notify)\n   * run.\n   *\n   * @param {Element} inst The instance the effect will be run on\n   * @param {Object} changedProps Bag of changed properties\n   * @param {Object} oldProps Bag of previous values for changed properties\n   * @param {boolean} hasPaths True with `props` contains one or more paths\n   * @private\n   */\n  function runComputedEffects(inst, changedProps, oldProps, hasPaths) {\n    let computeEffects = inst.__computeEffects;\n    if (computeEffects) {\n      let inputProps = changedProps;\n      while (runEffects(inst, computeEffects, inputProps, oldProps, hasPaths)) {\n        Object.assign(oldProps, inst.__dataOld);\n        Object.assign(changedProps, inst.__dataPending);\n        inputProps = inst.__dataPending;\n        inst.__dataPending = null;\n      }\n    }\n  }\n\n  /**\n   * Implements the \"computed property\" effect by running the method with the\n   * values of the arguments specified in the `info` object and setting the\n   * return value to the computed property specified.\n   *\n   * @param {Object} inst The instance the effect will be run on\n   * @param {string} property Name of property\n   * @param {Object} props Bag of current property changes\n   * @param {Object} oldProps Bag of previous values for changed properties\n   * @param {Object} info Effect metadata\n   * @private\n   */\n  function runComputedEffect(inst, property, props, oldProps, info) {\n    let result = runMethodEffect(inst, property, props, oldProps, info);\n    let computedProp = info.methodInfo;\n    if (inst.__dataHasAccessor && inst.__dataHasAccessor[computedProp]) {\n      inst._setPendingProperty(computedProp, result, true);\n    } else {\n      inst[computedProp] = result;\n    }\n  }\n\n  /**\n   * Computes path changes based on path links set up using the `linkPaths`\n   * API.\n   *\n   * @param {Element} inst The instance whose props are changing\n   * @param {string} path Path that has changed\n   * @param {*} value Value of changed path\n   * @private\n   */\n  function computeLinkedPaths(inst, path, value) {\n    let links = inst.__dataLinkedPaths;\n    if (links) {\n      let link;\n      for (let a in links) {\n        let b = links[a];\n        if (Polymer.Path.isDescendant(a, path)) {\n          link = Polymer.Path.translate(a, b, path);\n          inst._setPendingPropertyOrPath(link, value, true, true);\n        } else if (Polymer.Path.isDescendant(b, path)) {\n          link = Polymer.Path.translate(b, a, path);\n          inst._setPendingPropertyOrPath(link, value, true, true);\n        }\n      }\n    }\n  }\n\n  // -- bindings ----------------------------------------------\n\n  /**\n   * Adds binding metadata to the current `nodeInfo`, and binding effects\n   * for all part dependencies to `templateInfo`.\n   *\n   * @param {Function} constructor Class that `_parseTemplate` is currently\n   *   running on\n   * @param {Object} templateInfo Template metadata for current template\n   * @param {Object} nodeInfo Node metadata for current template node\n   * @param {string} kind Binding kind, either 'property', 'attribute', or 'text'\n   * @param {string} target Target property name\n   * @param {Array<Object>} parts Array of binding part metadata\n   * @param {string} literal Literal text surrounding binding parts (specified\n   *   only for 'property' bindings, since these must be initialized as part\n   *   of boot-up)\n   * @private\n   */\n  function addBinding(constructor, templateInfo, nodeInfo, kind, target, parts, literal) {\n    // Create binding metadata and add to nodeInfo\n    nodeInfo.bindings = nodeInfo.bindings || [];\n    let binding = { kind, target, parts, literal, isCompound: (parts.length !== 1) };\n    nodeInfo.bindings.push(binding);\n    // Add listener info to binding metadata\n    if (shouldAddListener(binding)) {\n      let {event, negate} = binding.parts[0];\n      binding.listenerEvent = event || (CaseMap.camelToDashCase(target) + '-changed');\n      binding.listenerNegate = negate;\n    }\n    // Add \"propagate\" property effects to templateInfo\n    let index = templateInfo.nodeInfoList.length;\n    for (let i=0; i<binding.parts.length; i++) {\n      let part = binding.parts[i];\n      part.compoundIndex = i;\n      addEffectForBindingPart(constructor, templateInfo, binding, part, index);\n    }\n  }\n\n  /**\n   * Adds property effects to the given `templateInfo` for the given binding\n   * part.\n   *\n   * @param {Function} constructor Class that `_parseTemplate` is currently\n   *   running on\n   * @param {Object} templateInfo Template metadata for current template\n   * @param {Object} binding Binding metadata\n   * @param {Object} part Binding part metadata\n   * @param {number} index Index into `nodeInfoList` for this node\n   */\n  function addEffectForBindingPart(constructor, templateInfo, binding, part, index) {\n    if (!part.literal) {\n      if (binding.kind === 'attribute' && binding.target[0] === '-') {\n        console.warn('Cannot set attribute ' + binding.target +\n          ' because \"-\" is not a valid attribute starting character');\n      } else {\n        let dependencies = part.dependencies;\n        let info = { index, binding, part, evaluator: constructor };\n        for (let j=0; j<dependencies.length; j++) {\n          let trigger = dependencies[j];\n          if (typeof trigger == 'string') {\n            trigger = parseArg(trigger);\n            trigger.wildcard = true;\n          }\n          constructor._addTemplatePropertyEffect(templateInfo, trigger.rootProperty, {\n            fn: runBindingEffect,\n            info, trigger\n          });\n        }\n      }\n    }\n  }\n\n  /**\n   * Implements the \"binding\" (property/path binding) effect.\n   *\n   * Note that binding syntax is overridable via `_parseBindings` and\n   * `_evaluateBinding`.  This method will call `_evaluateBinding` for any\n   * non-literal parts returned from `_parseBindings`.  However,\n   * there is no support for _path_ bindings via custom binding parts,\n   * as this is specific to Polymer's path binding syntax.\n   *\n   * @param {Element} inst The instance the effect will be run on\n   * @param {string} path Name of property\n   * @param {Object} props Bag of current property changes\n   * @param {Object} oldProps Bag of previous values for changed properties\n   * @param {Object} info Effect metadata\n   * @param {boolean} hasPaths True with `props` contains one or more paths\n   * @param {Array} nodeList List of nodes associated with `nodeInfoList` template\n   *   metadata\n   * @private\n   */\n  function runBindingEffect(inst, path, props, oldProps, info, hasPaths, nodeList) {\n    let node = nodeList[info.index];\n    let binding = info.binding;\n    let part = info.part;\n    // Subpath notification: transform path and set to client\n    // e.g.: foo=\"{{obj.sub}}\", path: 'obj.sub.prop', set 'foo.prop'=obj.sub.prop\n    if (hasPaths && part.source && (path.length > part.source.length) &&\n        (binding.kind == 'property') && !binding.isCompound &&\n        node.__dataHasAccessor && node.__dataHasAccessor[binding.target]) {\n      let value = props[path];\n      path = Polymer.Path.translate(part.source, binding.target, path);\n      if (node._setPendingPropertyOrPath(path, value, false, true)) {\n        inst._enqueueClient(node);\n      }\n    } else {\n      let value = info.evaluator._evaluateBinding(inst, part, path, props, oldProps, hasPaths);\n      // Propagate value to child\n      applyBindingValue(inst, node, binding, part, value);\n    }\n  }\n\n  /**\n   * Sets the value for an \"binding\" (binding) effect to a node,\n   * either as a property or attribute.\n   *\n   * @param {Object} inst The instance owning the binding effect\n   * @param {Node} node Target node for binding\n   * @param {Object} binding Binding metadata\n   * @param {Object} part Binding part metadata\n   * @param {*} value Value to set\n   * @private\n   */\n  function applyBindingValue(inst, node, binding, part, value) {\n    value = computeBindingValue(node, value, binding, part);\n    if (Polymer.sanitizeDOMValue) {\n      value = Polymer.sanitizeDOMValue(value, binding.target, binding.kind, node);\n    }\n    if (binding.kind == 'attribute') {\n      // Attribute binding\n      inst._valueToNodeAttribute(node, value, binding.target);\n    } else {\n      // Property binding\n      let prop = binding.target;\n      if (node.__dataHasAccessor && node.__dataHasAccessor[prop]) {\n        if (!node.__readOnly || !node.__readOnly[prop]) {\n          if (node._setPendingProperty(prop, value)) {\n            inst._enqueueClient(node);\n          }\n        }\n      } else  {\n        inst._setUnmanagedPropertyToNode(node, prop, value);\n      }\n    }\n  }\n\n  /**\n   * Transforms an \"binding\" effect value based on compound & negation\n   * effect metadata, as well as handling for special-case properties\n   *\n   * @param {Node} node Node the value will be set to\n   * @param {*} value Value to set\n   * @param {Object} binding Binding metadata\n   * @param {Object} part Binding part metadata\n   * @return {*} Transformed value to set\n   * @private\n   */\n  function computeBindingValue(node, value, binding, part) {\n    if (binding.isCompound) {\n      let storage = node.__dataCompoundStorage[binding.target];\n      storage[part.compoundIndex] = value;\n      value = storage.join('');\n    }\n    if (binding.kind !== 'attribute') {\n      // Some browsers serialize `undefined` to `\"undefined\"`\n      if (binding.target === 'textContent' ||\n          (node.localName == 'input' && binding.target == 'value')) {\n        value = value == undefined ? '' : value;\n      }\n    }\n    return value;\n  }\n\n  /**\n   * Returns true if a binding's metadata meets all the requirements to allow\n   * 2-way binding, and therefore a `<property>-changed` event listener should be\n   * added:\n   * - used curly braces\n   * - is a property (not attribute) binding\n   * - is not a textContent binding\n   * - is not compound\n   *\n   * @param {Object} binding Binding metadata\n   * @return {boolean} True if 2-way listener should be added\n   * @private\n   */\n  function shouldAddListener(binding) {\n    return binding.target &&\n           binding.kind != 'attribute' &&\n           binding.kind != 'text' &&\n           !binding.isCompound &&\n           binding.parts[0].mode === '{';\n  }\n\n  /**\n   * Setup compound binding storage structures, notify listeners, and dataHost\n   * references onto the bound nodeList.\n   *\n   * @param {Object} inst Instance that bas been previously bound\n   * @param {Object} templateInfo Template metadata\n   * @private\n   */\n  function setupBindings(inst, templateInfo) {\n    // Setup compound storage, dataHost, and notify listeners\n    let {nodeList, nodeInfoList} = templateInfo;\n    if (nodeInfoList.length) {\n      for (let i=0; i < nodeInfoList.length; i++) {\n        let info = nodeInfoList[i];\n        let node = nodeList[i];\n        let bindings = info.bindings;\n        if (bindings) {\n          for (let i=0; i<bindings.length; i++) {\n            let binding = bindings[i];\n            setupCompoundStorage(node, binding);\n            addNotifyListener(node, inst, binding);\n          }\n        }\n        node.__dataHost = inst;\n      }\n    }\n  }\n\n  /**\n   * Initializes `__dataCompoundStorage` local storage on a bound node with\n   * initial literal data for compound bindings, and sets the joined\n   * literal parts to the bound property.\n   *\n   * When changes to compound parts occur, they are first set into the compound\n   * storage array for that property, and then the array is joined to result in\n   * the final value set to the property/attribute.\n   *\n   * @param {Node} node Bound node to initialize\n   * @param {Object} binding Binding metadata\n   * @private\n   */\n  function setupCompoundStorage(node, binding) {\n    if (binding.isCompound) {\n      // Create compound storage map\n      let storage = node.__dataCompoundStorage ||\n        (node.__dataCompoundStorage = {});\n      let parts = binding.parts;\n      // Copy literals from parts into storage for this binding\n      let literals = new Array(parts.length);\n      for (let j=0; j<parts.length; j++) {\n        literals[j] = parts[j].literal;\n      }\n      let target = binding.target;\n      storage[target] = literals;\n      // Configure properties with their literal parts\n      if (binding.literal && binding.kind == 'property') {\n        node[target] = binding.literal;\n      }\n    }\n  }\n\n  /**\n   * Adds a 2-way binding notification event listener to the node specified\n   *\n   * @param {Object} node Child element to add listener to\n   * @param {Object} inst Host element instance to handle notification event\n   * @param {Object} binding Binding metadata\n   * @private\n   */\n  function addNotifyListener(node, inst, binding) {\n    if (binding.listenerEvent) {\n      let part = binding.parts[0];\n      node.addEventListener(binding.listenerEvent, function(e) {\n        handleNotification(e, inst, binding.target, part.source, part.negate);\n      });\n    }\n  }\n\n  // -- for method-based effects (complexObserver & computed) --------------\n\n  /**\n   * Adds property effects for each argument in the method signature (and\n   * optionally, for the method name if `dynamic` is true) that calls the\n   * provided effect function.\n   *\n   * @param {Element | Object} model Prototype or instance\n   * @param {Object} sig Method signature metadata\n   * @param {string} type Type of property effect to add\n   * @param {Function} effectFn Function to run when arguments change\n   * @param {*=} methodInfo Effect-specific information to be included in\n   *   method effect metadata\n   * @param {boolean|Object=} dynamicFn Boolean or object map indicating whether\n   *   method names should be included as a dependency to the effect. Note,\n   *   defaults to true if the signature is static (sig.static is true).\n   * @private\n   */\n  function createMethodEffect(model, sig, type, effectFn, methodInfo, dynamicFn) {\n    dynamicFn = sig.static || (dynamicFn &&\n      (typeof dynamicFn !== 'object' || dynamicFn[sig.methodName]));\n    let info = {\n      methodName: sig.methodName,\n      args: sig.args,\n      methodInfo,\n      dynamicFn\n    };\n    for (let i=0, arg; (i<sig.args.length) && (arg=sig.args[i]); i++) {\n      if (!arg.literal) {\n        model._addPropertyEffect(arg.rootProperty, type, {\n          fn: effectFn, info: info, trigger: arg\n        });\n      }\n    }\n    if (dynamicFn) {\n      model._addPropertyEffect(sig.methodName, type, {\n        fn: effectFn, info: info\n      });\n    }\n  }\n\n  /**\n   * Calls a method with arguments marshaled from properties on the instance\n   * based on the method signature contained in the effect metadata.\n   *\n   * Multi-property observers, computed properties, and inline computing\n   * functions call this function to invoke the method, then use the return\n   * value accordingly.\n   *\n   * @param {Object} inst The instance the effect will be run on\n   * @param {string} property Name of property\n   * @param {Object} props Bag of current property changes\n   * @param {Object} oldProps Bag of previous values for changed properties\n   * @param {Object} info Effect metadata\n   * @return {*} Returns the return value from the method invocation\n   * @private\n   */\n  function runMethodEffect(inst, property, props, oldProps, info) {\n    // Instances can optionally have a _methodHost which allows redirecting where\n    // to find methods. Currently used by `templatize`.\n    let context = inst._methodHost || inst;\n    let fn = context[info.methodName];\n    if (fn) {\n      let args = marshalArgs(inst.__data, info.args, property, props);\n      return fn.apply(context, args);\n    } else if (!info.dynamicFn) {\n      console.warn('method `' + info.methodName + '` not defined');\n    }\n  }\n\n  const emptyArray = [];\n\n  // Regular expressions used for binding\n  const IDENT  = '(?:' + '[a-zA-Z_$][\\\\w.:$\\\\-*]*' + ')';\n  const NUMBER = '(?:' + '[-+]?[0-9]*\\\\.?[0-9]+(?:[eE][-+]?[0-9]+)?' + ')';\n  const SQUOTE_STRING = '(?:' + '\\'(?:[^\\'\\\\\\\\]|\\\\\\\\.)*\\'' + ')';\n  const DQUOTE_STRING = '(?:' + '\"(?:[^\"\\\\\\\\]|\\\\\\\\.)*\"' + ')';\n  const STRING = '(?:' + SQUOTE_STRING + '|' + DQUOTE_STRING + ')';\n  const ARGUMENT = '(?:(' + IDENT + '|' + NUMBER + '|' +  STRING + ')\\\\s*' + ')';\n  const ARGUMENTS = '(?:' + ARGUMENT + '(?:,\\\\s*' + ARGUMENT + ')*' + ')';\n  const ARGUMENT_LIST = '(?:' + '\\\\(\\\\s*' +\n                                '(?:' + ARGUMENTS + '?' + ')' +\n                              '\\\\)\\\\s*' + ')';\n  const BINDING = '(' + IDENT + '\\\\s*' + ARGUMENT_LIST + '?' + ')'; // Group 3\n  const OPEN_BRACKET = '(\\\\[\\\\[|{{)' + '\\\\s*';\n  const CLOSE_BRACKET = '(?:]]|}})';\n  const NEGATE = '(?:(!)\\\\s*)?'; // Group 2\n  const EXPRESSION = OPEN_BRACKET + NEGATE + BINDING + CLOSE_BRACKET;\n  const bindingRegex = new RegExp(EXPRESSION, \"g\");\n\n  function literalFromParts(parts) {\n    let s = '';\n    for (let i=0; i<parts.length; i++) {\n      let literal = parts[i].literal;\n      s += literal || '';\n    }\n    return s;\n  }\n\n  /**\n   * Parses an expression string for a method signature, and returns a metadata\n   * describing the method in terms of `methodName`, `static` (whether all the\n   * arguments are literals), and an array of `args`\n   *\n   * @param {string} expression The expression to parse\n   * @return {?Object} The method metadata object if a method expression was\n   *   found, otherwise `undefined`\n   * @private\n   */\n  function parseMethod(expression) {\n    // tries to match valid javascript property names\n    let m = expression.match(/([^\\s]+?)\\(([\\s\\S]*)\\)/);\n    if (m) {\n      let methodName = m[1];\n      let sig = { methodName, static: true };\n      if (m[2].trim()) {\n        // replace escaped commas with comma entity, split on un-escaped commas\n        let args = m[2].replace(/\\\\,/g, '&comma;').split(',');\n        return parseArgs(args, sig);\n      } else {\n        sig.args = emptyArray;\n        return sig;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Parses an array of arguments and sets the `args` property of the supplied\n   * signature metadata object. Sets the `static` property to false if any\n   * argument is a non-literal.\n   *\n   * @param {Array<string>} argList Array of argument names\n   * @param {Object} sig Method signature metadata object\n   * @return {Object} The updated signature metadata object\n   * @private\n   */\n  function parseArgs(argList, sig) {\n    sig.args = argList.map(function(rawArg) {\n      let arg = parseArg(rawArg);\n      if (!arg.literal) {\n        sig.static = false;\n      }\n      return arg;\n    }, this);\n    return sig;\n  }\n\n  /**\n   * Parses an individual argument, and returns an argument metadata object\n   * with the following fields:\n   *\n   *   {\n   *     value: 'prop',        // property/path or literal value\n   *     literal: false,       // whether argument is a literal\n   *     structured: false,    // whether the property is a path\n   *     rootProperty: 'prop', // the root property of the path\n   *     wildcard: false       // whether the argument was a wildcard '.*' path\n   *   }\n   *\n   * @param {string} rawArg The string value of the argument\n   * @return {Object} Argument metadata object\n   * @private\n   */\n  function parseArg(rawArg) {\n    // clean up whitespace\n    let arg = rawArg.trim()\n      // replace comma entity with comma\n      .replace(/&comma;/g, ',')\n      // repair extra escape sequences; note only commas strictly need\n      // escaping, but we allow any other char to be escaped since its\n      // likely users will do this\n      .replace(/\\\\(.)/g, '\\$1')\n      ;\n    // basic argument descriptor\n    let a = {\n      name: arg\n    };\n    // detect literal value (must be String or Number)\n    let fc = arg[0];\n    if (fc === '-') {\n      fc = arg[1];\n    }\n    if (fc >= '0' && fc <= '9') {\n      fc = '#';\n    }\n    switch(fc) {\n      case \"'\":\n      case '\"':\n        a.value = arg.slice(1, -1);\n        a.literal = true;\n        break;\n      case '#':\n        a.value = Number(arg);\n        a.literal = true;\n        break;\n    }\n    // if not literal, look for structured path\n    if (!a.literal) {\n      a.rootProperty = Polymer.Path.root(arg);\n      // detect structured path (has dots)\n      a.structured = Polymer.Path.isPath(arg);\n      if (a.structured) {\n        a.wildcard = (arg.slice(-2) == '.*');\n        if (a.wildcard) {\n          a.name = arg.slice(0, -2);\n        }\n      }\n    }\n    return a;\n  }\n\n  /**\n   * Gather the argument values for a method specified in the provided array\n   * of argument metadata.\n   *\n   * The `path` and `value` arguments are used to fill in wildcard descriptor\n   * when the method is being called as a result of a path notification.\n   *\n   * @param {Object} data Instance data storage object to read properties from\n   * @param {Array<Object>} args Array of argument metadata\n   * @param {string} path Property/path name that triggered the method effect\n   * @param {Object} props Bag of current property changes\n   * @return {Array<*>} Array of argument values\n   * @private\n   */\n  function marshalArgs(data, args, path, props) {\n    let values = [];\n    for (let i=0, l=args.length; i<l; i++) {\n      let arg = args[i];\n      let name = arg.name;\n      let v;\n      if (arg.literal) {\n        v = arg.value;\n      } else {\n        if (arg.structured) {\n          v = Polymer.Path.get(data, name);\n          // when data is not stored e.g. `splices`\n          if (v === undefined) {\n            v = props[name];\n          }\n        } else {\n          v = data[name];\n        }\n      }\n      if (arg.wildcard) {\n        // Only send the actual path changed info if the change that\n        // caused the observer to run matched the wildcard\n        let baseChanged = (name.indexOf(path + '.') === 0);\n        let matches = (path.indexOf(name) === 0 && !baseChanged);\n        values[i] = {\n          path: matches ? path : name,\n          value: matches ? props[path] : v,\n          base: v\n        };\n      } else {\n        values[i] = v;\n      }\n    }\n    return values;\n  }\n\n  // data api\n\n  /**\n   * Sends array splice notifications (`.splices` and `.length`)\n   *\n   * Note: this implementation only accepts normalized paths\n   *\n   * @param {Element} inst Instance to send notifications to\n   * @param {Array} array The array the mutations occurred on\n   * @param {string} path The path to the array that was mutated\n   * @param {Array} splices Array of splice records\n   * @private\n   */\n  function notifySplices(inst, array, path, splices) {\n    let splicesPath = path + '.splices';\n    inst.notifyPath(splicesPath, { indexSplices: splices });\n    inst.notifyPath(path + '.length', array.length);\n    // Null here to allow potentially large splice records to be GC'ed.\n    inst.__data[splicesPath] = {indexSplices: null};\n  }\n\n  /**\n   * Creates a splice record and sends an array splice notification for\n   * the described mutation\n   *\n   * Note: this implementation only accepts normalized paths\n   *\n   * @param {Element} inst Instance to send notifications to\n   * @param {Array} array The array the mutations occurred on\n   * @param {string} path The path to the array that was mutated\n   * @param {number} index Index at which the array mutation occurred\n   * @param {number} addedCount Number of added items\n   * @param {Array} removed Array of removed items\n   * @private\n   */\n  function notifySplice(inst, array, path, index, addedCount, removed) {\n    notifySplices(inst, array, path, [{\n      index: index,\n      addedCount: addedCount,\n      removed: removed,\n      object: array,\n      type: 'splice'\n    }]);\n  }\n\n  /**\n   * Returns an upper-cased version of the string.\n   *\n   * @param {string} name String to uppercase\n   * @return {string} Uppercased string\n   * @private\n   */\n  function upper(name) {\n    return name[0].toUpperCase() + name.substring(1);\n  }\n\n  /**\n   * Element class mixin that provides meta-programming for Polymer's template\n   * binding and data observation (collectively, \"property effects\") system.\n   *\n   * This mixin uses provides the following key static methods for adding\n   * property effects to an element class:\n   * - `addPropertyEffect`\n   * - `createPropertyObserver`\n   * - `createMethodObserver`\n   * - `createNotifyingProperty`\n   * - `createReadOnlyProperty`\n   * - `createReflectedProperty`\n   * - `createComputedProperty`\n   * - `bindTemplate`\n   *\n   * Each method creates one or more property accessors, along with metadata\n   * used by this mixin's implementation of `_propertiesChanged` to perform\n   * the property effects.\n   *\n   * Underscored versions of the above methods also exist on the element\n   * prototype for adding property effects on instances at runtime.\n   *\n   * Note that this mixin overrides several `PropertyAccessors` methods, in\n   * many cases to maintain guarantees provided by the Polymer 1.x features;\n   * notably it changes property accessors to be synchronous by default\n   * whereas the default when using `PropertyAccessors` standalone is to be\n   * async by default.\n   *\n   * @polymerMixin\n   * @mixes Polymer.TemplateStamp\n   * @mixes Polymer.PropertyAccessors\n   * @memberof Polymer\n   * @summary Element class mixin that provides meta-programming for Polymer's\n   * template binding and data observation system.\n   */\n  Polymer.PropertyEffects = Polymer.dedupingMixin(superClass => {\n\n    /**\n     * @constructor\n     * @extends {superClass}\n     * @implements {Polymer_PropertyAccessors}\n     * @implements {Polymer_TemplateStamp}\n     */\n    const propertyEffectsBase = Polymer.TemplateStamp(Polymer.PropertyAccessors(superClass));\n\n    /**\n     * @polymerMixinClass\n     * @unrestricted\n     * @implements {Polymer_PropertyEffects}\n     */\n    class PropertyEffects extends propertyEffectsBase {\n\n      get PROPERTY_EFFECT_TYPES() {\n        return TYPES;\n      }\n\n      /**\n       * Overrides `Polymer.PropertyAccessors` implementation to initialize\n       * additional property-effect related properties.\n       *\n       * @override\n       */\n      _initializeProperties() {\n        super._initializeProperties();\n        hostStack.registerHost(this);\n        this.__dataClientsReady = false;\n        this.__dataPendingClients = null;\n        this.__dataToNotify = null;\n        this.__dataLinkedPaths = null;\n        this.__dataHasPaths = false;\n        // May be set on instance prior to upgrade\n        this.__dataCompoundStorage = this.__dataCompoundStorage || null;\n        this.__dataHost = this.__dataHost || null;\n        this.__dataTemp = {};\n      }\n\n      /**\n       * Overrides `Polymer.PropertyAccessors` implementation to provide a\n       * more efficient implementation of initializing properties from\n       * the prototype on the instance.\n       *\n       * @override\n       */\n      _initializeProtoProperties(props) {\n        this.__data = Object.create(props);\n        this.__dataPending = Object.create(props);\n        this.__dataOld = {};\n      }\n\n      /**\n       * Overrides `Polymer.PropertyAccessors` implementation to avoid setting\n       * `_setProperty`'s `shouldNotify: true`.\n       *\n       * @override\n       */\n      _initializeInstanceProperties(props) {\n        let readOnly = this.__readOnly;\n        for (let prop in props) {\n          if (!readOnly || !readOnly[prop]) {\n            this.__dataPending = this.__dataPending || {};\n            this.__dataOld = this.__dataOld || {};\n            this.__data[prop] = this.__dataPending[prop] = props[prop];\n          }\n        }\n      }\n\n      // Prototype setup ----------------------------------------\n\n      /**\n       * Equivalent to static `addPropertyEffect` API but can be called on\n       * an instance to add effects at runtime.  See that method for\n       * full API docs.\n       *\n       * @param {string} property Property that should trigger the effect\n       * @param {string} type Effect type, from this.PROPERTY_EFFECT_TYPES\n       * @param {Object=} effect Effect metadata object\n       * @protected\n       */\n      _addPropertyEffect(property, type, effect) {\n        this._createPropertyAccessor(property, type == TYPES.READ_ONLY);\n        // effects are accumulated into arrays per property based on type\n        let effects = ensureOwnEffectMap(this, type)[property];\n        if (!effects) {\n          effects = this[type][property] = [];\n        }\n        effects.push(effect);\n      }\n\n      /**\n       * Removes the given property effect.\n       *\n       * @param {string} property Property the effect was associated with\n       * @param {string} type Effect type, from this.PROPERTY_EFFECT_TYPES\n       * @param {Object=} effect Effect metadata object to remove\n       */\n      _removePropertyEffect(property, type, effect) {\n        let effects = ensureOwnEffectMap(this, type)[property];\n        let idx = effects.indexOf(effect);\n        if (idx >= 0) {\n          effects.splice(idx, 1);\n        }\n      }\n\n      /**\n       * Returns whether the current prototype/instance has a property effect\n       * of a certain type.\n       *\n       * @param {string} property Property name\n       * @param {string=} type Effect type, from this.PROPERTY_EFFECT_TYPES\n       * @return {boolean} True if the prototype/instance has an effect of this type\n       * @protected\n       */\n      _hasPropertyEffect(property, type) {\n        let effects = this[type];\n        return Boolean(effects && effects[property]);\n      }\n\n      /**\n       * Returns whether the current prototype/instance has a \"read only\"\n       * accessor for the given property.\n       *\n       * @param {string} property Property name\n       * @return {boolean} True if the prototype/instance has an effect of this type\n       * @protected\n       */\n      _hasReadOnlyEffect(property) {\n        return this._hasPropertyEffect(property, TYPES.READ_ONLY);\n      }\n\n      /**\n       * Returns whether the current prototype/instance has a \"notify\"\n       * property effect for the given property.\n       *\n       * @param {string} property Property name\n       * @return {boolean} True if the prototype/instance has an effect of this type\n       * @protected\n       */\n      _hasNotifyEffect(property) {\n        return this._hasPropertyEffect(property, TYPES.NOTIFY);\n      }\n\n      /**\n       * Returns whether the current prototype/instance has a \"reflect to attribute\"\n       * property effect for the given property.\n       *\n       * @param {string} property Property name\n       * @return {boolean} True if the prototype/instance has an effect of this type\n       * @protected\n       */\n      _hasReflectEffect(property) {\n        return this._hasPropertyEffect(property, TYPES.REFLECT);\n      }\n\n      /**\n       * Returns whether the current prototype/instance has a \"computed\"\n       * property effect for the given property.\n       *\n       * @param {string} property Property name\n       * @return {boolean} True if the prototype/instance has an effect of this type\n       * @protected\n       */\n      _hasComputedEffect(property) {\n        return this._hasPropertyEffect(property, TYPES.COMPUTE);\n      }\n\n      // Runtime ----------------------------------------\n\n      /**\n       * Sets a pending property or path.  If the root property of the path in\n       * question had no accessor, the path is set, otherwise it is enqueued\n       * via `_setPendingProperty`.\n       *\n       * This function isolates relatively expensive functionality necessary\n       * for the public API (`set`, `setProperties`, `notifyPath`, and property\n       * change listeners via {{...}} bindings), such that it is only done\n       * when paths enter the system, and not at every propagation step.  It\n       * also sets a `__dataHasPaths` flag on the instance which is used to\n       * fast-path slower path-matching code in the property effects host paths.\n       *\n       * `path` can be a path string or array of path parts as accepted by the\n       * public API.\n       *\n       * @param {string | !Array<number|string>} path Path to set\n       * @param {*} value Value to set\n       * @param {boolean=} shouldNotify Set to true if this change should\n       *  cause a property notification event dispatch\n       * @param {boolean=} isPathNotification If the path being set is a path\n       *   notification of an already changed value, as opposed to a request\n       *   to set and notify the change.  In the latter `false` case, a dirty\n       *   check is performed and then the value is set to the path before\n       *   enqueuing the pending property change.\n       * @return {boolean} Returns true if the property/path was enqueued in\n       *   the pending changes bag.\n       * @protected\n       */\n      _setPendingPropertyOrPath(path, value, shouldNotify, isPathNotification) {\n        if (isPathNotification ||\n            Polymer.Path.root(Array.isArray(path) ? path[0] : path) !== path) {\n          // Dirty check changes being set to a path against the actual object,\n          // since this is the entry point for paths into the system; from here\n          // the only dirty checks are against the `__dataTemp` cache to prevent\n          // duplicate work in the same turn only. Note, if this was a notification\n          // of a change already set to a path (isPathNotification: true),\n          // we always let the change through and skip the `set` since it was\n          // already dirty checked at the point of entry and the underlying\n          // object has already been updated\n          if (!isPathNotification) {\n            let old = Polymer.Path.get(this, path);\n            path = /** @type {string} */ (Polymer.Path.set(this, path, value));\n            // Use property-accessor's simpler dirty check\n            if (!path || !super._shouldPropertyChange(path, value, old)) {\n              return false;\n            }\n          }\n          this.__dataHasPaths = true;\n          if (this._setPendingProperty(path, value, shouldNotify)) {\n            computeLinkedPaths(this, path, value);\n            return true;\n          }\n        } else {\n          if (this.__dataHasAccessor && this.__dataHasAccessor[path]) {\n            return this._setPendingProperty(path, value, shouldNotify);\n          } else {\n            this[path] = value;\n          }\n        }\n        return false;\n      }\n\n      /**\n       * Applies a value to a non-Polymer element/node's property.\n       *\n       * The implementation makes a best-effort at binding interop:\n       * Some native element properties have side-effects when\n       * re-setting the same value (e.g. setting `<input>.value` resets the\n       * cursor position), so we do a dirty-check before setting the value.\n       * However, for better interop with non-Polymer custom elements that\n       * accept objects, we explicitly re-set object changes coming from the\n       * Polymer world (which may include deep object changes without the\n       * top reference changing), erring on the side of providing more\n       * information.\n       *\n       * Users may override this method to provide alternate approaches.\n       *\n       * @param {Node} node The node to set a property on\n       * @param {string} prop The property to set\n       * @param {*} value The value to set\n       * @protected\n       */\n      _setUnmanagedPropertyToNode(node, prop, value) {\n        // It is a judgment call that resetting primitives is\n        // \"bad\" and resettings objects is also \"good\"; alternatively we could\n        // implement a whitelist of tag & property values that should never\n        // be reset (e.g. <input>.value && <select>.value)\n        if (value !== node[prop] || typeof value == 'object') {\n          node[prop] = value;\n        }\n      }\n\n      /**\n       * Overrides the `PropertyAccessors` implementation to introduce special\n       * dirty check logic depending on the property & value being set:\n       *\n       * 1. Any value set to a path (e.g. 'obj.prop': 42 or 'obj.prop': {...})\n       *    Stored in `__dataTemp`, dirty checked against `__dataTemp`\n       * 2. Object set to simple property (e.g. 'prop': {...})\n       *    Stored in `__dataTemp` and `__data`, dirty checked against\n       *    `__dataTemp` by default implementation of `_shouldPropertyChange`\n       * 3. Primitive value set to simple property (e.g. 'prop': 42)\n       *    Stored in `__data`, dirty checked against `__data`\n       *\n       * The dirty-check is important to prevent cycles due to two-way\n       * notification, but paths and objects are only dirty checked against any\n       * previous value set during this turn via a \"temporary cache\" that is\n       * cleared when the last `_propertiesChaged` exits. This is so:\n       * a. any cached array paths (e.g. 'array.3.prop') may be invalidated\n       *    due to array mutations like shift/unshift/splice; this is fine\n       *    since path changes are dirty-checked at user entry points like `set`\n       * b. dirty-checking for objects only lasts one turn to allow the user\n       *    to mutate the object in-place and re-set it with the same identity\n       *    and have all sub-properties re-propagated in a subsequent turn.\n       *\n       * The temp cache is not necessarily sufficient to prevent invalid array\n       * paths, since a splice can happen during the same turn (with pathological\n       * user code); we could introduce a \"fixup\" for temporarily cached array\n       * paths if needed: https://github.com/Polymer/polymer/issues/4227\n       *\n       * @override\n       */\n      _setPendingProperty(property, value, shouldNotify) {\n        let isPath = this.__dataHasPaths && Polymer.Path.isPath(property);\n        let prevProps = isPath ? this.__dataTemp : this.__data;\n        if (this._shouldPropertyChange(property, value, prevProps[property])) {\n          if (!this.__dataPending) {\n            this.__dataPending = {};\n            this.__dataOld = {};\n          }\n          // Ensure old is captured from the last turn\n          if (!(property in this.__dataOld)) {\n            this.__dataOld[property] = this.__data[property];\n          }\n          // Paths are stored in temporary cache (cleared at end of turn),\n          // which is used for dirty-checking, all others stored in __data\n          if (isPath) {\n            this.__dataTemp[property] = value;\n          } else {\n            this.__data[property] = value;\n          }\n          // All changes go into pending property bag, passed to _propertiesChanged\n          this.__dataPending[property] = value;\n          // Track properties that should notify separately\n          if (isPath || (this.__notifyEffects && this.__notifyEffects[property])) {\n            this.__dataToNotify = this.__dataToNotify || {};\n            this.__dataToNotify[property] = shouldNotify;\n          }\n          return true;\n        }\n      }\n\n      /**\n       * Overrides base implementation to ensure all accessors set `shouldNotify`\n       * to true, for per-property notification tracking.\n       *\n       * @override\n       */\n      _setProperty(property, value) {\n        if (this._setPendingProperty(property, value, true)) {\n          this._invalidateProperties();\n        }\n      }\n\n      /**\n       * Overrides `PropertyAccessor`'s default async queuing of\n       * `_propertiesChanged`: if `__dataReady` is false (has not yet been\n       * manually flushed), the function no-ops; otherwise flushes\n       * `_propertiesChanged` synchronously.\n       *\n       * @override\n       */\n      _invalidateProperties() {\n        if (this.__dataReady) {\n          this._flushProperties();\n        }\n      }\n\n      /**\n       * Enqueues the given client on a list of pending clients, whose\n       * pending property changes can later be flushed via a call to\n       * `_flushClients`.\n       *\n       * @param {Object} client PropertyEffects client to enqueue\n       * @protected\n       */\n      _enqueueClient(client) {\n        this.__dataPendingClients = this.__dataPendingClients || [];\n        if (client !== this) {\n          this.__dataPendingClients.push(client);\n        }\n      }\n\n      /**\n       * Flushes any clients previously enqueued via `_enqueueClient`, causing\n       * their `_flushProperties` method to run.\n       *\n       * @protected\n       */\n      _flushClients() {\n        if (!this.__dataClientsReady) {\n          this.__dataClientsReady = true;\n          this._readyClients();\n          // Override point where accessors are turned on; importantly,\n          // this is after clients have fully readied, providing a guarantee\n          // that any property effects occur only after all clients are ready.\n          this.__dataReady = true;\n        } else {\n          this.__enableOrFlushClients();\n        }\n      }\n\n      // NOTE: We ensure clients either enable or flush as appropriate. This\n      // handles two corner cases:\n      // (1) clients flush properly when connected/enabled before the host\n      // enables; e.g.\n      //   (a) Templatize stamps with no properties and does not flush and\n      //   (b) the instance is inserted into dom and\n      //   (c) then the instance flushes.\n      // (2) clients enable properly when not connected/enabled when the host\n      // flushes; e.g.\n      //   (a) a template is runtime stamped and not yet connected/enabled\n      //   (b) a host sets a property, causing stamped dom to flush\n      //   (c) the stamped dom enables.\n      __enableOrFlushClients() {\n        let clients = this.__dataPendingClients;\n        if (clients) {\n          this.__dataPendingClients = null;\n          for (let i=0; i < clients.length; i++) {\n            let client = clients[i];\n            if (!client.__dataEnabled) {\n              client._enableProperties();\n            } else if (client.__dataPending) {\n              client._flushProperties();\n            }\n          }\n        }\n      }\n\n      /**\n       * Perform any initial setup on client dom. Called before the first\n       * `_flushProperties` call on client dom and before any element\n       * observers are called.\n       *\n       * @protected\n       */\n      _readyClients() {\n        this.__enableOrFlushClients();\n      }\n\n      /**\n       * Sets a bag of property changes to this instance, and\n       * synchronously processes all effects of the properties as a batch.\n       *\n       * Property names must be simple properties, not paths.  Batched\n       * path propagation is not supported.\n       *\n       * @param {Object} props Bag of one or more key-value pairs whose key is\n       *   a property and value is the new value to set for that property.\n       * @param {boolean=} setReadOnly When true, any private values set in\n       *   `props` will be set. By default, `setProperties` will not set\n       *   `readOnly: true` root properties.\n       * @public\n       */\n      setProperties(props, setReadOnly) {\n        for (let path in props) {\n          if (setReadOnly || !this.__readOnly || !this.__readOnly[path]) {\n            //TODO(kschaaf): explicitly disallow paths in setProperty?\n            // wildcard observers currently only pass the first changed path\n            // in the `info` object, and you could do some odd things batching\n            // paths, e.g. {'foo.bar': {...}, 'foo': null}\n            this._setPendingPropertyOrPath(path, props[path], true);\n          }\n        }\n        this._invalidateProperties();\n      }\n\n      /**\n       * Overrides `PropertyAccessors` so that property accessor\n       * side effects are not enabled until after client dom is fully ready.\n       * Also calls `_flushClients` callback to ensure client dom is enabled\n       * that was not enabled as a result of flushing properties.\n       *\n       * @override\n       */\n      ready() {\n        // It is important that `super.ready()` is not called here as it\n        // immediately turns on accessors. Instead, we wait until `readyClients`\n        // to enable accessors to provide a guarantee that clients are ready\n        // before processing any accessors side effects.\n        this._flushProperties();\n        // If no data was pending, `_flushProperties` will not `flushClients`\n        // so ensure this is done.\n        if (!this.__dataClientsReady) {\n          this._flushClients();\n        }\n        // Before ready, client notifications do not trigger _flushProperties.\n        // Therefore a flush is necessary here if data has been set.\n        if (this.__dataPending) {\n          this._flushProperties();\n        }\n      }\n\n      /**\n       * Implements `PropertyAccessors`'s properties changed callback.\n       *\n       * Runs each class of effects for the batch of changed properties in\n       * a specific order (compute, propagate, reflect, observe, notify).\n       *\n       * @override\n       */\n      _propertiesChanged(currentProps, changedProps, oldProps) {\n        // ----------------------------\n        // let c = Object.getOwnPropertyNames(changedProps || {});\n        // window.debug && console.group(this.localName + '#' + this.id + ': ' + c);\n        // if (window.debug) { debugger; }\n        // ----------------------------\n        let hasPaths = this.__dataHasPaths;\n        this.__dataHasPaths = false;\n        // Compute properties\n        runComputedEffects(this, changedProps, oldProps, hasPaths);\n        // Clear notify properties prior to possible reentry (propagate, observe),\n        // but after computing effects have a chance to add to them\n        let notifyProps = this.__dataToNotify;\n        this.__dataToNotify = null;\n        // Propagate properties to clients\n        this._propagatePropertyChanges(changedProps, oldProps, hasPaths);\n        // Flush clients\n        this._flushClients();\n        // Reflect properties\n        runEffects(this, this.__reflectEffects, changedProps, oldProps, hasPaths);\n        // Observe properties\n        runEffects(this, this.__observeEffects, changedProps, oldProps, hasPaths);\n        // Notify properties to host\n        if (notifyProps) {\n          runNotifyEffects(this, notifyProps, changedProps, oldProps, hasPaths);\n        }\n        // Clear temporary cache at end of turn\n        if (this.__dataCounter == 1) {\n          this.__dataTemp = {};\n        }\n        // ----------------------------\n        // window.debug && console.groupEnd(this.localName + '#' + this.id + ': ' + c);\n        // ----------------------------\n      }\n\n      /**\n       * Called to propagate any property changes to stamped template nodes\n       * managed by this element.\n       *\n       * @param {Object} changedProps Bag of changed properties\n       * @param {Object} oldProps Bag of previous values for changed properties\n       * @param {boolean} hasPaths True with `props` contains one or more paths\n       * @protected\n       */\n      _propagatePropertyChanges(changedProps, oldProps, hasPaths) {\n        if (this.__propagateEffects) {\n          runEffects(this, this.__propagateEffects, changedProps, oldProps, hasPaths);\n        }\n        let templateInfo = this.__templateInfo;\n        while (templateInfo) {\n          runEffects(this, templateInfo.propertyEffects, changedProps, oldProps,\n            hasPaths, templateInfo.nodeList);\n          templateInfo = templateInfo.nextTemplateInfo;\n        }\n      }\n\n      /**\n       * Aliases one data path as another, such that path notifications from one\n       * are routed to the other.\n       *\n       * @param {string | !Array<string|number>} to Target path to link.\n       * @param {string | !Array<string|number>} from Source path to link.\n       * @public\n       */\n      linkPaths(to, from) {\n        to = Polymer.Path.normalize(to);\n        from = Polymer.Path.normalize(from);\n        this.__dataLinkedPaths = this.__dataLinkedPaths || {};\n        this.__dataLinkedPaths[to] = from;\n      }\n\n      /**\n       * Removes a data path alias previously established with `_linkPaths`.\n       *\n       * Note, the path to unlink should be the target (`to`) used when\n       * linking the paths.\n       *\n       * @param {string | !Array<string|number>} path Target path to unlink.\n       * @public\n       */\n      unlinkPaths(path) {\n        path = Polymer.Path.normalize(path);\n        if (this.__dataLinkedPaths) {\n          delete this.__dataLinkedPaths[path];\n        }\n      }\n\n      /**\n       * Notify that an array has changed.\n       *\n       * Example:\n       *\n       *     this.items = [ {name: 'Jim'}, {name: 'Todd'}, {name: 'Bill'} ];\n       *     ...\n       *     this.items.splice(1, 1, {name: 'Sam'});\n       *     this.items.push({name: 'Bob'});\n       *     this.notifySplices('items', [\n       *       { index: 1, removed: [{name: 'Todd'}], addedCount: 1, obect: this.items, type: 'splice' },\n       *       { index: 3, removed: [], addedCount: 1, object: this.items, type: 'splice'}\n       *     ]);\n       *\n       * @param {string} path Path that should be notified.\n       * @param {Array} splices Array of splice records indicating ordered\n       *   changes that occurred to the array. Each record should have the\n       *   following fields:\n       *    * index: index at which the change occurred\n       *    * removed: array of items that were removed from this index\n       *    * addedCount: number of new items added at this index\n       *    * object: a reference to the array in question\n       *    * type: the string literal 'splice'\n       *\n       *   Note that splice records _must_ be normalized such that they are\n       *   reported in index order (raw results from `Object.observe` are not\n       *   ordered and must be normalized/merged before notifying).\n       * @public\n      */\n      notifySplices(path, splices) {\n        let info = {};\n        let array = /** @type {Array} */(Polymer.Path.get(this, path, info));\n        notifySplices(this, array, info.path, splices);\n      }\n\n      /**\n       * Convenience method for reading a value from a path.\n       *\n       * Note, if any part in the path is undefined, this method returns\n       * `undefined` (this method does not throw when dereferencing undefined\n       * paths).\n       *\n       * @param {(string|!Array<(string|number)>)} path Path to the value\n       *   to read.  The path may be specified as a string (e.g. `foo.bar.baz`)\n       *   or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n       *   bracketed expressions are not supported; string-based path parts\n       *   *must* be separated by dots.  Note that when dereferencing array\n       *   indices, the index may be used as a dotted part directly\n       *   (e.g. `users.12.name` or `['users', 12, 'name']`).\n       * @param {Object=} root Root object from which the path is evaluated.\n       * @return {*} Value at the path, or `undefined` if any part of the path\n       *   is undefined.\n       * @public\n       */\n      get(path, root) {\n        return Polymer.Path.get(root || this, path);\n      }\n\n      /**\n       * Convenience method for setting a value to a path and notifying any\n       * elements bound to the same path.\n       *\n       * Note, if any part in the path except for the last is undefined,\n       * this method does nothing (this method does not throw when\n       * dereferencing undefined paths).\n       *\n       * @param {(string|!Array<(string|number)>)} path Path to the value\n       *   to write.  The path may be specified as a string (e.g. `'foo.bar.baz'`)\n       *   or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n       *   bracketed expressions are not supported; string-based path parts\n       *   *must* be separated by dots.  Note that when dereferencing array\n       *   indices, the index may be used as a dotted part directly\n       *   (e.g. `'users.12.name'` or `['users', 12, 'name']`).\n       * @param {*} value Value to set at the specified path.\n       * @param {Object=} root Root object from which the path is evaluated.\n       *   When specified, no notification will occur.\n       * @public\n      */\n      set(path, value, root) {\n        if (root) {\n          Polymer.Path.set(root, path, value);\n        } else {\n          if (!this.__readOnly || !this.__readOnly[/** @type {string} */(path)]) {\n            if (this._setPendingPropertyOrPath(path, value, true)) {\n              this._invalidateProperties();\n            }\n          }\n        }\n      }\n\n      /**\n       * Adds items onto the end of the array at the path specified.\n       *\n       * The arguments after `path` and return value match that of\n       * `Array.prototype.push`.\n       *\n       * This method notifies other paths to the same array that a\n       * splice occurred to the array.\n       *\n       * @param {string} path Path to array.\n       * @param {...*} items Items to push onto array\n       * @return {number} New length of the array.\n       * @public\n       */\n      push(path, ...items) {\n        let info = {};\n        let array = /** @type {Array}*/(Polymer.Path.get(this, path, info));\n        let len = array.length;\n        let ret = array.push(...items);\n        if (items.length) {\n          notifySplice(this, array, info.path, len, items.length, []);\n        }\n        return ret;\n      }\n\n      /**\n       * Removes an item from the end of array at the path specified.\n       *\n       * The arguments after `path` and return value match that of\n       * `Array.prototype.pop`.\n       *\n       * This method notifies other paths to the same array that a\n       * splice occurred to the array.\n       *\n       * @param {string} path Path to array.\n       * @return {*} Item that was removed.\n       * @public\n       */\n      pop(path) {\n        let info = {};\n        let array = /** @type {Array} */(Polymer.Path.get(this, path, info));\n        let hadLength = Boolean(array.length);\n        let ret = array.pop();\n        if (hadLength) {\n          notifySplice(this, array, info.path, array.length, 0, [ret]);\n        }\n        return ret;\n      }\n\n      /**\n       * Starting from the start index specified, removes 0 or more items\n       * from the array and inserts 0 or more new items in their place.\n       *\n       * The arguments after `path` and return value match that of\n       * `Array.prototype.splice`.\n       *\n       * This method notifies other paths to the same array that a\n       * splice occurred to the array.\n       *\n       * @param {string} path Path to array.\n       * @param {number} start Index from which to start removing/inserting.\n       * @param {number} deleteCount Number of items to remove.\n       * @param {...*} items Items to insert into array.\n       * @return {Array} Array of removed items.\n       * @public\n       */\n      splice(path, start, deleteCount, ...items) {\n        let info = {};\n        let array = /** @type {Array} */(Polymer.Path.get(this, path, info));\n        // Normalize fancy native splice handling of crazy start values\n        if (start < 0) {\n          start = array.length - Math.floor(-start);\n        } else {\n          start = Math.floor(start);\n        }\n        if (!start) {\n          start = 0;\n        }\n        let ret = array.splice(start, deleteCount, ...items);\n        if (items.length || ret.length) {\n          notifySplice(this, array, info.path, start, items.length, ret);\n        }\n        return ret;\n      }\n\n      /**\n       * Removes an item from the beginning of array at the path specified.\n       *\n       * The arguments after `path` and return value match that of\n       * `Array.prototype.pop`.\n       *\n       * This method notifies other paths to the same array that a\n       * splice occurred to the array.\n       *\n       * @param {string} path Path to array.\n       * @return {*} Item that was removed.\n       * @public\n       */\n      shift(path) {\n        let info = {};\n        let array = /** @type {Array} */(Polymer.Path.get(this, path, info));\n        let hadLength = Boolean(array.length);\n        let ret = array.shift();\n        if (hadLength) {\n          notifySplice(this, array, info.path, 0, 0, [ret]);\n        }\n        return ret;\n      }\n\n      /**\n       * Adds items onto the beginning of the array at the path specified.\n       *\n       * The arguments after `path` and return value match that of\n       * `Array.prototype.push`.\n       *\n       * This method notifies other paths to the same array that a\n       * splice occurred to the array.\n       *\n       * @param {string} path Path to array.\n       * @param {...*} items Items to insert info array\n       * @return {number} New length of the array.\n       * @public\n       */\n      unshift(path, ...items) {\n        let info = {};\n        let array = /** @type {Array} */(Polymer.Path.get(this, path, info));\n        let ret = array.unshift(...items);\n        if (items.length) {\n          notifySplice(this, array, info.path, 0, items.length, []);\n        }\n        return ret;\n      }\n\n      /**\n       * Notify that a path has changed.\n       *\n       * Example:\n       *\n       *     this.item.user.name = 'Bob';\n       *     this.notifyPath('item.user.name');\n       *\n       * @param {string} path Path that should be notified.\n       * @param {*=} value Value at the path (optional).\n       * @public\n      */\n      notifyPath(path, value) {\n        /** @type {string} */\n        let propPath;\n        if (arguments.length == 1) {\n          // Get value if not supplied\n          let info = {};\n          value = Polymer.Path.get(this, path, info);\n          propPath = info.path;\n        } else if (Array.isArray(path)) {\n          // Normalize path if needed\n          propPath = Polymer.Path.normalize(path);\n        } else {\n          propPath = /** @type{string} */(path);\n        }\n        if (this._setPendingPropertyOrPath(propPath, value, true, true)) {\n          this._invalidateProperties();\n        }\n      }\n\n      /**\n       * Equivalent to static `createReadOnlyProperty` API but can be called on\n       * an instance to add effects at runtime.  See that method for\n       * full API docs.\n       *\n       * @param {string} property Property name\n       * @param {boolean=} protectedSetter Creates a custom protected setter\n       *   when `true`.\n       * @protected\n       */\n      _createReadOnlyProperty(property, protectedSetter) {\n        this._addPropertyEffect(property, TYPES.READ_ONLY);\n        if (protectedSetter) {\n          this['_set' + upper(property)] = function(value) {\n            this._setProperty(property, value);\n          }\n        }\n      }\n\n      /**\n       * Equivalent to static `createPropertyObserver` API but can be called on\n       * an instance to add effects at runtime.  See that method for\n       * full API docs.\n       *\n       * @param {string} property Property name\n       * @param {string} methodName Name of observer method to call\n       * @param {boolean=} dynamicFn Whether the method name should be included as\n       *   a dependency to the effect.\n       * @protected\n       */\n      _createPropertyObserver(property, methodName, dynamicFn) {\n        let info = { property, methodName, dynamicFn };\n        this._addPropertyEffect(property, TYPES.OBSERVE, {\n          fn: runObserverEffect, info, trigger: {name: property}\n        });\n        if (dynamicFn) {\n          this._addPropertyEffect(methodName, TYPES.OBSERVE, {\n            fn: runObserverEffect, info, trigger: {name: methodName}\n          });\n        }\n      }\n\n      /**\n       * Equivalent to static `createMethodObserver` API but can be called on\n       * an instance to add effects at runtime.  See that method for\n       * full API docs.\n       *\n       * @param {string} expression Method expression\n       * @param {boolean|Object=} dynamicFn Boolean or object map indicating\n       *   whether method names should be included as a dependency to the effect.\n       * @protected\n       */\n      _createMethodObserver(expression, dynamicFn) {\n        let sig = parseMethod(expression);\n        if (!sig) {\n          throw new Error(\"Malformed observer expression '\" + expression + \"'\");\n        }\n        createMethodEffect(this, sig, TYPES.OBSERVE, runMethodEffect, null, dynamicFn);\n      }\n\n      /**\n       * Equivalent to static `createNotifyingProperty` API but can be called on\n       * an instance to add effects at runtime.  See that method for\n       * full API docs.\n       *\n       * @param {string} property Property name\n       * @protected\n       */\n      _createNotifyingProperty(property) {\n        this._addPropertyEffect(property, TYPES.NOTIFY, {\n          fn: runNotifyEffect,\n          info: {\n            eventName: CaseMap.camelToDashCase(property) + '-changed',\n            property: property\n          }\n        });\n      }\n\n      /**\n       * Equivalent to static `createReflectedProperty` API but can be called on\n       * an instance to add effects at runtime.  See that method for\n       * full API docs.\n       *\n       * @param {string} property Property name\n       * @protected\n       */\n      _createReflectedProperty(property) {\n        let attr = CaseMap.camelToDashCase(property);\n        if (attr[0] === '-') {\n          console.warn('Property ' + property + ' cannot be reflected to attribute ' +\n            attr + ' because \"-\" is not a valid starting attribute name. Use a lowercase first letter for the property thisead.');\n        } else {\n          this._addPropertyEffect(property, TYPES.REFLECT, {\n            fn: runReflectEffect,\n            info: {\n              attrName: attr\n            }\n          });\n        }\n      }\n\n      /**\n       * Equivalent to static `createComputedProperty` API but can be called on\n       * an instance to add effects at runtime.  See that method for\n       * full API docs.\n       *\n       * @param {string} property Name of computed property to set\n       * @param {string} expression Method expression\n       * @param {boolean|Object=} dynamicFn Boolean or object map indicating\n       *   whether method names should be included as a dependency to the effect.\n       * @protected\n       */\n      _createComputedProperty(property, expression, dynamicFn) {\n        let sig = parseMethod(expression);\n        if (!sig) {\n          throw new Error(\"Malformed computed expression '\" + expression + \"'\");\n        }\n        createMethodEffect(this, sig, TYPES.COMPUTE, runComputedEffect, property, dynamicFn);\n      }\n\n      // -- static class methods ------------\n\n      /**\n       * Ensures an accessor exists for the specified property, and adds\n       * to a list of \"property effects\" that will run when the accessor for\n       * the specified property is set.  Effects are grouped by \"type\", which\n       * roughly corresponds to a phase in effect processing.  The effect\n       * metadata should be in the following form:\n       *\n       *   {\n       *     fn: effectFunction, // Reference to function to call to perform effect\n       *     info: { ... }       // Effect metadata passed to function\n       *     trigger: {          // Optional triggering metadata; if not provided\n       *       name: string      // the property is treated as a wildcard\n       *       structured: boolean\n       *       wildcard: boolean\n       *     }\n       *   }\n       *\n       * Effects are called from `_propertiesChanged` in the following order by\n       * type:\n       *\n       * 1. COMPUTE\n       * 2. PROPAGATE\n       * 3. REFLECT\n       * 4. OBSERVE\n       * 5. NOTIFY\n       *\n       * Effect functions are called with the following signature:\n       *\n       *   effectFunction(inst, path, props, oldProps, info, hasPaths)\n       *\n       * @param {string} property Property that should trigger the effect\n       * @param {string} type Effect type, from this.PROPERTY_EFFECT_TYPES\n       * @param {Object=} effect Effect metadata object\n       * @protected\n       */\n      static addPropertyEffect(property, type, effect) {\n        this.prototype._addPropertyEffect(property, type, effect);\n      }\n\n      /**\n       * Creates a single-property observer for the given property.\n       *\n       * @param {string} property Property name\n       * @param {string} methodName Name of observer method to call\n       * @param {boolean=} dynamicFn Whether the method name should be included as\n       *   a dependency to the effect.\n       * @protected\n       */\n      static createPropertyObserver(property, methodName, dynamicFn) {\n        this.prototype._createPropertyObserver(property, methodName, dynamicFn);\n      }\n\n      /**\n       * Creates a multi-property \"method observer\" based on the provided\n       * expression, which should be a string in the form of a normal Javascript\n       * function signature: `'methodName(arg1, [..., argn])'`.  Each argument\n       * should correspond to a property or path in the context of this\n       * prototype (or instance), or may be a literal string or number.\n       *\n       * @param {string} expression Method expression\n       * @param {boolean|Object=} dynamicFn Boolean or object map indicating\n       *   whether method names should be included as a dependency to the effect.\n       * @protected\n       */\n      static createMethodObserver(expression, dynamicFn) {\n        this.prototype._createMethodObserver(expression, dynamicFn);\n      }\n\n      /**\n       * Causes the setter for the given property to dispatch `<property>-changed`\n       * events to notify of changes to the property.\n       *\n       * @param {string} property Property name\n       * @protected\n       */\n      static createNotifyingProperty(property) {\n        this.prototype._createNotifyingProperty(property);\n      }\n\n      /**\n       * Creates a read-only accessor for the given property.\n       *\n       * To set the property, use the protected `_setProperty` API.\n       * To create a custom protected setter (e.g. `_setMyProp()` for\n       * property `myProp`), pass `true` for `protectedSetter`.\n       *\n       * Note, if the property will have other property effects, this method\n       * should be called first, before adding other effects.\n       *\n       * @param {string} property Property name\n       * @param {boolean=} protectedSetter Creates a custom protected setter\n       *   when `true`.\n       * @protected\n       */\n      static createReadOnlyProperty(property, protectedSetter) {\n        this.prototype._createReadOnlyProperty(property, protectedSetter);\n      }\n\n      /**\n       * Causes the setter for the given property to reflect the property value\n       * to a (dash-cased) attribute of the same name.\n       *\n       * @param {string} property Property name\n       * @protected\n       */\n      static createReflectedProperty(property) {\n        this.prototype._createReflectedProperty(property);\n      }\n\n      /**\n       * Creates a computed property whose value is set to the result of the\n       * method described by the given `expression` each time one or more\n       * arguments to the method changes.  The expression should be a string\n       * in the form of a normal Javascript function signature:\n       * `'methodName(arg1, [..., argn])'`\n       *\n       * @param {string} property Name of computed property to set\n       * @param {string} expression Method expression\n       * @param {boolean|Object=} dynamicFn Boolean or object map indicating whether\n       *   method names should be included as a dependency to the effect.\n       * @protected\n       */\n      static createComputedProperty(property, expression, dynamicFn) {\n        this.prototype._createComputedProperty(property, expression, dynamicFn);\n      }\n\n      /**\n       * Parses the provided template to ensure binding effects are created\n       * for them, and then ensures property accessors are created for any\n       * dependent properties in the template.  Binding effects for bound\n       * templates are stored in a linked list on the instance so that\n       * templates can be efficiently stamped and unstamped.\n       *\n       * @param {HTMLTemplateElement} template Template containing binding\n       *   bindings\n       * @return {Object} Template metadata object\n       * @protected\n       */\n      static bindTemplate(template) {\n        return this.prototype._bindTemplate(template);\n      }\n\n      // -- binding ----------------------------------------------\n\n      /**\n       * Equivalent to static `bindTemplate` API but can be called on\n       * an instance to add effects at runtime.  See that method for\n       * full API docs.\n       *\n       * This method may be called on the prototype (for prototypical template\n       * binding, to avoid creating accessors every instance) once per prototype,\n       * and will be called with `runtimeBinding: true` by `_stampTemplate` to\n       * create and link an instance of the template metadata associated with a\n       * particular stamping.\n       *\n       * @param {HTMLTemplateElement} template Template containing binding\n       *   bindings\n       * @param {boolean=} instanceBinding When false (default), performs\n       *   \"prototypical\" binding of the template and overwrites any previously\n       *   bound template for the class. When true (as passed from\n       *   `_stampTemplate`), the template info is instanced and linked into\n       *   the list of bound templates.\n       * @return {Object} Template metadata object; for `runtimeBinding`,\n       *   this is an instance of the prototypical template info\n       * @protected\n       */\n      _bindTemplate(template, instanceBinding) {\n        let templateInfo = this.constructor._parseTemplate(template);\n        let wasPreBound = this.__templateInfo == templateInfo;\n        // Optimization: since this is called twice for proto-bound templates,\n        // don't attempt to recreate accessors if this template was pre-bound\n        if (!wasPreBound) {\n          for (let prop in templateInfo.propertyEffects) {\n            this._createPropertyAccessor(prop);\n          }\n        }\n        if (instanceBinding) {\n          // For instance-time binding, create instance of template metadata\n          // and link into list of templates if necessary\n          templateInfo = Object.create(templateInfo);\n          templateInfo.wasPreBound = wasPreBound;\n          if (!wasPreBound && this.__templateInfo) {\n            let last = this.__templateInfoLast || this.__templateInfo;\n            this.__templateInfoLast = last.nextTemplateInfo = templateInfo;\n            templateInfo.previousTemplateInfo = last;\n            return templateInfo;\n          }\n        }\n        return this.__templateInfo = templateInfo;\n      }\n\n      /**\n       * Adds a property effect to the given template metadata, which is run\n       * at the \"propagate\" stage of `_propertiesChanged` when the template\n       * has been bound to the element via `_bindTemplate`.\n       *\n       * The `effect` object should match the format in `_addPropertyEffect`.\n       *\n       * @param {Object} templateInfo Template metadata to add effect to\n       * @param {string} prop Property that should trigger the effect\n       * @param {Object=} effect Effect metadata object\n       * @protected\n       */\n      static _addTemplatePropertyEffect(templateInfo, prop, effect) {\n        let hostProps = templateInfo.hostProps = templateInfo.hostProps || {};\n        hostProps[prop] = true;\n        let effects = templateInfo.propertyEffects = templateInfo.propertyEffects || {};\n        let propEffects = effects[prop] = effects[prop] || [];\n        propEffects.push(effect);\n      }\n\n      /**\n       * Stamps the provided template and performs instance-time setup for\n       * Polymer template features, including data bindings, declarative event\n       * listeners, and the `this.$` map of `id`'s to nodes.  A document fragment\n       * is returned containing the stamped DOM, ready for insertion into the\n       * DOM.\n       *\n       * This method may be called more than once; however note that due to\n       * `shadycss` polyfill limitations, only styles from templates prepared\n       * using `ShadyCSS.prepareTemplate` will be correctly polyfilled (scoped\n       * to the shadow root and support CSS custom properties), and note that\n       * `ShadyCSS.prepareTemplate` may only be called once per element. As such,\n       * any styles required by in runtime-stamped templates must be included\n       * in the main element template.\n       *\n       * @param {HTMLTemplateElement} template Template to stamp\n       * @return {DocumentFragment} Cloned template content\n       * @protected\n       */\n      _stampTemplate(template) {\n        // Ensures that created dom is `_enqueueClient`'d to this element so\n        // that it can be flushed on next call to `_flushProperties`\n        hostStack.beginHosting(this);\n        let dom = super._stampTemplate(template);\n        hostStack.endHosting(this);\n        let templateInfo = this._bindTemplate(template, true);\n        // Add template-instance-specific data to instanced templateInfo\n        templateInfo.nodeList = dom.nodeList;\n        // Capture child nodes to allow unstamping of non-prototypical templates\n        if (!templateInfo.wasPreBound) {\n          let nodes = templateInfo.childNodes = [];\n          for (let n=dom.firstChild; n; n=n.nextSibling) {\n            nodes.push(n);\n          }\n        }\n        dom.templateInfo = templateInfo;\n        // Setup compound storage, 2-way listeners, and dataHost for bindings\n        setupBindings(this, templateInfo);\n        // Flush properties into template nodes if already booted\n        if (this.__dataReady) {\n          runEffects(this, templateInfo.propertyEffects, this.__data, null,\n            false, templateInfo.nodeList);\n        }\n        return dom;\n      }\n\n      /**\n       * Removes and unbinds the nodes previously contained in the provided\n       * DocumentFragment returned from `_stampTemplate`.\n       *\n       * @param {DocumentFragment} dom DocumentFragment previously returned\n       *   from `_stampTemplate` associated with the nodes to be removed\n       * @protected\n       */\n      _removeBoundDom(dom) {\n        // Unlink template info\n        let templateInfo = dom.templateInfo;\n        if (templateInfo.previousTemplateInfo) {\n          templateInfo.previousTemplateInfo.nextTemplateInfo =\n            templateInfo.nextTemplateInfo;\n        }\n        if (templateInfo.nextTemplateInfo) {\n          templateInfo.nextTemplateInfo.previousTemplateInfo =\n            templateInfo.previousTemplateInfo;\n        }\n        if (this.__templateInfoLast == templateInfo) {\n          this.__templateInfoLast = templateInfo.previousTemplateInfo;\n        }\n        templateInfo.previousTemplateInfo = templateInfo.nextTemplateInfo = null;\n        // Remove stamped nodes\n        let nodes = templateInfo.childNodes;\n        for (let i=0; i<nodes.length; i++) {\n          let node = nodes[i];\n          node.parentNode.removeChild(node);\n        }\n      }\n\n      /**\n       * Overrides default `TemplateStamp` implementation to add support for\n       * parsing bindings from `TextNode`'s' `textContent`.  A `bindings`\n       * array is added to `nodeInfo` and populated with binding metadata\n       * with information capturing the binding target, and a `parts` array\n       * with one or more metadata objects capturing the source(s) of the\n       * binding.\n       *\n       * @override\n       * @param {Node} node Node to parse\n       * @param {Object} templateInfo Template metadata for current template\n       * @param {Object} nodeInfo Node metadata for current template node\n       * @return {boolean} `true` if the visited node added node-specific\n       *   metadata to `nodeInfo`\n       * @protected\n       */\n      static _parseTemplateNode(node, templateInfo, nodeInfo) {\n        let noted = super._parseTemplateNode(node, templateInfo, nodeInfo);\n        if (node.nodeType === Node.TEXT_NODE) {\n          let parts = this._parseBindings(node.textContent, templateInfo);\n          if (parts) {\n            // Initialize the textContent with any literal parts\n            // NOTE: default to a space here so the textNode remains; some browsers\n            // (IE) evacipate an empty textNode following cloneNode/importNode.\n            node.textContent = literalFromParts(parts) || ' ';\n            addBinding(this, templateInfo, nodeInfo, 'text', 'textContent', parts);\n            noted = true;\n          }\n        }\n        return noted;\n      }\n\n      /**\n       * Overrides default `TemplateStamp` implementation to add support for\n       * parsing bindings from attributes.  A `bindings`\n       * array is added to `nodeInfo` and populated with binding metadata\n       * with information capturing the binding target, and a `parts` array\n       * with one or more metadata objects capturing the source(s) of the\n       * binding.\n       *\n       * @override\n       * @param {Node} node Node to parse\n       * @param {Object} templateInfo Template metadata for current template\n       * @param {Object} nodeInfo Node metadata for current template node\n       * @return {boolean} `true` if the visited node added node-specific\n       *   metadata to `nodeInfo`\n       * @protected\n       */\n      static _parseTemplateNodeAttribute(node, templateInfo, nodeInfo, name, value) {\n        let parts = this._parseBindings(value, templateInfo);\n        if (parts) {\n          // Attribute or property\n          let origName = name;\n          let kind = 'property';\n          if (name[name.length-1] == '$') {\n            name = name.slice(0, -1);\n            kind = 'attribute';\n          }\n          // Initialize attribute bindings with any literal parts\n          let literal = literalFromParts(parts);\n          if (literal && kind == 'attribute') {\n            node.setAttribute(name, literal);\n          }\n          // Clear attribute before removing, since IE won't allow removing\n          // `value` attribute if it previously had a value (can't\n          // unconditionally set '' before removing since attributes with `$`\n          // can't be set using setAttribute)\n          if (node.localName === 'input' && origName === 'value') {\n            node.setAttribute(origName, '');\n          }\n          // Remove annotation\n          node.removeAttribute(origName);\n          // Case hackery: attributes are lower-case, but bind targets\n          // (properties) are case sensitive. Gambit is to map dash-case to\n          // camel-case: `foo-bar` becomes `fooBar`.\n          // Attribute bindings are excepted.\n          if (kind === 'property') {\n            name = Polymer.CaseMap.dashToCamelCase(name);\n          }\n          addBinding(this, templateInfo, nodeInfo, kind, name, parts, literal);\n          return true;\n        } else {\n          return super._parseTemplateNodeAttribute(node, templateInfo, nodeInfo, name, value);\n        }\n      }\n\n      /**\n       * Overrides default `TemplateStamp` implementation to add support for\n       * binding the properties that a nested template depends on to the template\n       * as `_host_<property>`.\n       *\n       * @override\n       * @param {Node} node Node to parse\n       * @param {Object} templateInfo Template metadata for current template\n       * @param {Object} nodeInfo Node metadata for current template node\n       * @return {boolean} `true` if the visited node added node-specific\n       *   metadata to `nodeInfo`\n       * @protected\n       */\n      static _parseTemplateNestedTemplate(node, templateInfo, nodeInfo) {\n        let noted = super._parseTemplateNestedTemplate(node, templateInfo, nodeInfo);\n        // Merge host props into outer template and add bindings\n        let hostProps = nodeInfo.templateInfo.hostProps;\n        let mode = '{';\n        for (let source in hostProps) {\n          let parts = [{ mode, source, dependencies: [source] }];\n          addBinding(this, templateInfo, nodeInfo, 'property', '_host_' + source, parts);\n        }\n        return noted;\n      }\n\n      /**\n       * Called to parse text in a template (either attribute values or\n       * textContent) into binding metadata.\n       *\n       * Any overrides of this method should return an array of binding part\n       * metadata  representing one or more bindings found in the provided text\n       * and any \"literal\" text in between.  Any non-literal parts will be passed\n       * to `_evaluateBinding` when any dependencies change.  The only required\n       * fields of each \"part\" in the returned array are as follows:\n       *\n       * - `dependencies` - Array containing trigger metadata for each property\n       *   that should trigger the binding to update\n       * - `literal` - String containing text if the part represents a literal;\n       *   in this case no `dependencies` are needed\n       *\n       * Additional metadata for use by `_evaluateBinding` may be provided in\n       * each part object as needed.\n       *\n       * The default implementation handles the following types of bindings\n       * (one or more may be intermixed with literal strings):\n       * - Property binding: `[[prop]]`\n       * - Path binding: `[[object.prop]]`\n       * - Negated property or path bindings: `[[!prop]]` or `[[!object.prop]]`\n       * - Two-way property or path bindings (supports negation):\n       *   `{{prop}}`, `{{object.prop}}`, `{{!prop}}` or `{{!object.prop}}`\n       * - Inline computed method (supports negation):\n       *   `[[compute(a, 'literal', b)]]`, `[[!compute(a, 'literal', b)]]`\n       *\n       * @param {string} text Text to parse from attribute or textContent\n       * @param {Object} templateInfo Current template metadata\n       * @return {Array<Object>} Array of binding part metadata\n       * @protected\n       */\n      static _parseBindings(text, templateInfo) {\n        let parts = [];\n        let lastIndex = 0;\n        let m;\n        // Example: \"literal1{{prop}}literal2[[!compute(foo,bar)]]final\"\n        // Regex matches:\n        //        Iteration 1:  Iteration 2:\n        // m[1]: '{{'          '[['\n        // m[2]: ''            '!'\n        // m[3]: 'prop'        'compute(foo,bar)'\n        while ((m = bindingRegex.exec(text)) !== null) {\n          // Add literal part\n          if (m.index > lastIndex) {\n            parts.push({literal: text.slice(lastIndex, m.index)});\n          }\n          // Add binding part\n          let mode = m[1][0];\n          let negate = Boolean(m[2]);\n          let source = m[3].trim();\n          let customEvent, notifyEvent, colon;\n          if (mode == '{' && (colon = source.indexOf('::')) > 0) {\n            notifyEvent = source.substring(colon + 2);\n            source = source.substring(0, colon);\n            customEvent = true;\n          }\n          let signature = parseMethod(source);\n          let dependencies = [];\n          if (signature) {\n            // Inline computed function\n            let {args, methodName} = signature;\n            for (let i=0; i<args.length; i++) {\n              let arg = args[i];\n              if (!arg.literal) {\n                dependencies.push(arg);\n              }\n            }\n            let dynamicFns = templateInfo.dynamicFns;\n            if (dynamicFns && dynamicFns[methodName] || signature.static) {\n              dependencies.push(methodName);\n              signature.dynamicFn = true;\n            }\n          } else {\n            // Property or path\n            dependencies.push(source);\n          }\n          parts.push({\n            source, mode, negate, customEvent, signature, dependencies,\n            event: notifyEvent\n          });\n          lastIndex = bindingRegex.lastIndex;\n        }\n        // Add a final literal part\n        if (lastIndex && lastIndex < text.length) {\n          let literal = text.substring(lastIndex);\n          if (literal) {\n            parts.push({\n              literal: literal\n            });\n          }\n        }\n        if (parts.length) {\n          return parts;\n        }\n      }\n\n      /**\n       * Called to evaluate a previously parsed binding part based on a set of\n       * one or more changed dependencies.\n       *\n       * @param {HTMLElement} inst Element that should be used as scope for\n       *   binding dependencies\n       * @param {Object} part Binding part metadata\n       * @param {string} path Property/path that triggered this effect\n       * @param {Object} props Bag of current property changes\n       * @param {Object} oldProps Bag of previous values for changed properties\n       * @param {boolean} hasPaths True with `props` contains one or more paths\n       * @return {*} Value the binding part evaluated to\n       * @protected\n       */\n      static _evaluateBinding(inst, part, path, props, oldProps, hasPaths) {\n        let value;\n        if (part.signature) {\n          value = runMethodEffect(inst, path, props, oldProps, part.signature);\n        } else if (path != part.source) {\n          value = Polymer.Path.get(inst, part.source);\n        } else {\n          if (hasPaths && Polymer.Path.isPath(path)) {\n            value = Polymer.Path.get(inst, path);\n          } else {\n            value = inst.__data[path];\n          }\n        }\n        if (part.negate) {\n          value = !value;\n        }\n        return value;\n      }\n\n    }\n\n    return PropertyEffects;\n  });\n\n  /**\n   * Helper api for enqueing client dom created by a host element.\n   *\n   * By default elements are flushed via `_flushProperties` when\n   * `connectedCallback` is called. Elements attach their client dom to\n   * themselves at `ready` time which results from this first flush.\n   * This provides an ordering guarantee that the client dom an element\n   * creates is flushed before the element itself (i.e. client `ready`\n   * fires before host `ready`).\n   *\n   * However, if `_flushProperties` is called *before* an element is connected,\n   * as for example `Templatize` does, this ordering guarantee cannot be\n   * satisfied because no elements are connected. (Note: Bound elements that\n   * receive data do become enqueued clients and are properly ordered but\n   * unbound elements are not.)\n   *\n   * To maintain the desired \"client before host\" ordering guarantee for this\n   * case we rely on the \"host stack. Client nodes registers themselves with\n   * the creating host element when created. This ensures that all client dom\n   * is readied in the proper order, maintaining the desired guarantee.\n   *\n   * @private\n   */\n  let hostStack = {\n\n    stack: [],\n\n    registerHost(inst) {\n      if (this.stack.length) {\n        let host = this.stack[this.stack.length-1];\n        host._enqueueClient(inst);\n      }\n    },\n\n    beginHosting(inst) {\n      this.stack.push(inst);\n    },\n\n    endHosting(inst) {\n      let stackLen = this.stack.length;\n      if (stackLen && this.stack[stackLen-1] == inst) {\n        this.stack.pop();\n      }\n    }\n\n  }\n\n})();\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/mixins/property-effects.html\n// module id = 5\n// module chunks = 0","/*__wc__loader*/\nrequire('./boot.html');\n\n\n(function() {\n  'use strict';\n\n  const caseMap = {};\n  const DASH_TO_CAMEL = /-[a-z]/g;\n  const CAMEL_TO_DASH = /([A-Z])/g;\n\n  /**\n   * Module with utilities for converting between \"dash-case\" and \"camelCase\"\n   * identifiers.\n   *\n   * @namespace\n   * @memberof Polymer\n   * @summary Module that provides utilities for converting between \"dash-case\"\n   *   and \"camelCase\".\n   */\n  const CaseMap = {\n\n    /**\n     * Converts \"dash-case\" identifier (e.g. `foo-bar-baz`) to \"camelCase\"\n     * (e.g. `fooBarBaz`).\n     *\n     * @memberof Polymer.CaseMap\n     * @param {string} dash Dash-case identifier\n     * @return {string} Camel-case representation of the identifier\n     */\n    dashToCamelCase(dash) {\n      return caseMap[dash] || (\n        caseMap[dash] = dash.indexOf('-') < 0 ? dash : dash.replace(DASH_TO_CAMEL,\n          (m) => m[1].toUpperCase()\n        )\n      );\n    },\n\n    /**\n     * Converts \"camelCase\" identifier (e.g. `fooBarBaz`) to \"dash-case\"\n     * (e.g. `foo-bar-baz`).\n     *\n     * @memberof Polymer.CaseMap\n     * @param {string} camel Camel-case identifier\n     * @return {string} Dash-case representation of the identifier\n     */\n    camelToDashCase(camel) {\n      return caseMap[camel] || (\n        caseMap[camel] = camel.replace(CAMEL_TO_DASH, '-$1').toLowerCase()\n      );\n    }\n\n  };\n\n  Polymer.CaseMap = CaseMap;\n})();\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/utils/case-map.html\n// module id = 6\n// module chunks = 0","/*__wc__loader*/\nrequire('./boot.html');\n\nrequire('./mixin.html');\n\nrequire('./async.html');\n\n\n(function() {\n  'use strict';\n\n  /** @typedef {{run: function(function(), number=):number, cancel: function(number)}} */\n  let AsyncModule; // eslint-disable-line no-unused-vars\n\n  class Debouncer {\n    constructor() {\n      this._asyncModule = null;\n      this._callback = null;\n      this._timer = null;\n    }\n    /**\n     * Sets the scheduler; that is, a module with the Async interface,\n     * a callback and optional arguments to be passed to the run function\n     * from the async module.\n     *\n     * @param {!AsyncModule} asyncModule Object with Async interface.\n     * @param {function()} callback Callback to run.\n     */\n    setConfig(asyncModule, callback) {\n      this._asyncModule = asyncModule;\n      this._callback = callback;\n      this._timer = this._asyncModule.run(() => {\n        this._timer = null;\n        this._callback()\n      });\n    }\n    /**\n     * Cancels an active debouncer and returns a reference to itself.\n     */\n    cancel() {\n      if (this.isActive()) {\n        this._asyncModule.cancel(this._timer);\n        this._timer = null;\n      }\n    }\n    /**\n     * Flushes an active debouncer and returns a reference to itself.\n     */\n    flush() {\n      if (this.isActive()) {\n        this.cancel();\n        this._callback();\n      }\n    }\n    /**\n     * Returns true if the debouncer is active.\n     *\n     * @return {boolean} True if active.\n     */\n    isActive() {\n      return this._timer != null;\n    }\n  /**\n   * Creates a debouncer if no debouncer is passed as a parameter\n   * or it cancels an active debouncer otherwise. The following\n   * example shows how a debouncer can be called multiple times within a\n   * microtask and \"debounced\" such that the provided callback function is\n   * called once. Add this method to a custom element:\n   *\n   * _debounceWork() {\n   *   this._debounceJob = Polymer.Debouncer.debounce(this._debounceJob,\n   *       Polymer.Async.microTask, () => {\n   *     this._doWork();\n   *   });\n   * }\n   *\n   * If the `_debounceWork` method is called multiple times within the same\n   * microtask, the `_doWork` function will be called only once at the next\n   * microtask checkpoint.\n   *\n   * Note: In testing it is often convenient to avoid asynchrony. To accomplish\n   * this with a debouncer, you can use `Polymer.enqueueDebouncer` and\n   * `Polymer.flush`. For example, extend the above example by adding\n   * `Polymer.enqueueDebouncer(this._debounceJob)` at the end of the\n   * `_debounceWork` method. Then in a test, call `Polymer.flush` to ensure\n   * the debouncer has completed.\n   *\n   * @param {Polymer.Debouncer?} debouncer Debouncer object.\n   * @param {!AsyncModule} asyncModule Object with Async interface\n   * @param {function()} callback Callback to run.\n   * @return {!Debouncer} Returns a debouncer object.\n   */\n    static debounce(debouncer, asyncModule, callback) {\n      if (debouncer instanceof Debouncer) {\n        debouncer.cancel();\n      } else {\n        debouncer = new Debouncer();\n      }\n      debouncer.setConfig(asyncModule, callback);\n      return debouncer;\n    }\n  }\n\n  /**\n   * @memberof Polymer\n   */\n  Polymer.Debouncer = Debouncer;\n})();\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/utils/debounce.html\n// module id = 7\n// module chunks = 0","/*__wc__loader*/\nrequire('./boot.html');\n\n\n(function() {\n  'use strict';\n\n  let debouncerQueue = [];\n\n  /**\n   * Adds a `Polymer.Debouncer` to a list of globally flushable tasks.\n   *\n   * @memberof Polymer\n   * @param {Polymer.Debouncer} debouncer Debouncer to enqueue\n   */\n  Polymer.enqueueDebouncer = function(debouncer) {\n    debouncerQueue.push(debouncer);\n  }\n\n  function flushDebouncers() {\n    const didFlush = Boolean(debouncerQueue.length);\n    while (debouncerQueue.length) {\n      try {\n        debouncerQueue.shift().flush();\n      } catch(e) {\n        setTimeout(() => {\n          throw e;\n        });\n      }\n    }\n    return didFlush;\n  }\n\n  /**\n   * Forces several classes of asynchronously queued tasks to flush:\n   * - Debouncers added via `enqueueDebouncer`\n   * - ShadyDOM distribution\n   *\n   * @memberof Polymer\n   */\n  Polymer.flush = function() {\n    let shadyDOM, debouncers;\n    do {\n      shadyDOM = window.ShadyDOM && ShadyDOM.flush();\n      if (window.ShadyCSS && window.ShadyCSS.ScopingShim) {\n        window.ShadyCSS.ScopingShim.flush();\n      }\n      debouncers = flushDebouncers();\n    } while (shadyDOM || debouncers);\n  }\n\n})();\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/utils/flush.html\n// module id = 8\n// module chunks = 0","/*__wc__loader*/\nrequire('./boot.html');\n\nrequire('../mixins/property-effects.html');\n\nrequire('../mixins/mutable-data.html');\n\n\n  (function() {\n    'use strict';\n\n    // Base class for HTMLTemplateElement extension that has property effects\n    // machinery for propagating host properties to children. This is an ES5\n    // class only because Babel (incorrectly) requires super() in the class\n    // constructor even though no `this` is used and it returns an instance.\n    let newInstance = null;\n    function HTMLTemplateElementExtension() { return newInstance; }\n    HTMLTemplateElementExtension.prototype = Object.create(HTMLTemplateElement.prototype, {\n      constructor: {\n        value: HTMLTemplateElementExtension,\n        writable: true\n      }\n    });\n    const DataTemplate = Polymer.PropertyEffects(HTMLTemplateElementExtension);\n    const MutableDataTemplate = Polymer.MutableData(DataTemplate);\n\n    // Applies a DataTemplate subclass to a <template> instance\n    function upgradeTemplate(template, constructor) {\n      newInstance = template;\n      Object.setPrototypeOf(template, constructor.prototype);\n      new constructor();\n      newInstance = null;\n    }\n\n    // Base class for TemplateInstance's\n    /**\n     * @constructor\n     * @implements {Polymer_PropertyEffects}\n     */\n    const base = Polymer.PropertyEffects(class {});\n    class TemplateInstanceBase extends base {\n      constructor(props) {\n        super();\n        this._configureProperties(props);\n        this.root = this._stampTemplate(this.__dataHost);\n        // Save list of stamped children\n        let children = this.children = [];\n        for (let n = this.root.firstChild; n; n=n.nextSibling) {\n          children.push(n);\n          n.__templatizeInstance = this;\n        }\n        if (this.__templatizeOwner.__hideTemplateChildren__) {\n          this._showHideChildren(true);\n        }\n        // Flush props only when props are passed if instance props exist\n        // or when there isn't instance props.\n        let options = this.__templatizeOptions;\n        if ((props && options.instanceProps) || !options.instanceProps) {\n          this._enableProperties();\n        }\n      }\n      /**\n       * Configure the given `props` by calling `_setPendingProperty`. Also\n       * sets any properties stored in `__hostProps`.\n       * @private\n       * @param {Object} props Object of property name-value pairs to set.\n       */\n      _configureProperties(props) {\n        let options = this.__templatizeOptions;\n        if (props) {\n          for (let iprop in options.instanceProps) {\n            if (iprop in props) {\n              this._setPendingProperty(iprop, props[iprop]);\n            }\n          }\n        }\n        for (let hprop in this.__hostProps) {\n          this._setPendingProperty(hprop, this.__dataHost['_host_' + hprop]);\n        }\n      }\n      /**\n       * Forwards a host property to this instance.  This method should be\n       * called on instances from the `options.forwardHostProp` callback\n       * to propagate changes of host properties to each instance.\n       *\n       * Note this method enqueues the change, which are flushed as a batch.\n       *\n       * @param {string} prop Property or path name\n       * @param {*} value Value of the property to forward\n       */\n      forwardHostProp(prop, value) {\n        if (this._setPendingPropertyOrPath(prop, value, false, true)) {\n          this.__dataHost._enqueueClient(this);\n        }\n      }\n      /**\n       * @override\n       */\n      _addEventListenerToNode(node, eventName, handler) {\n        if (this._methodHost && this.__templatizeOptions.parentModel) {\n          // If this instance should be considered a parent model, decorate\n          // events this template instance as `model`\n          this._methodHost._addEventListenerToNode(node, eventName, (e) => {\n            e.model = this;\n            handler(e);\n          });\n        } else {\n          // Otherwise delegate to the template's host (which could be)\n          // another template instance\n          let templateHost = this.__dataHost.__dataHost;\n          if (templateHost) {\n            templateHost._addEventListenerToNode(node, eventName, handler);\n          }\n        }\n      }\n      /**\n       * Shows or hides the template instance top level child elements. For\n       * text nodes, `textContent` is removed while \"hidden\" and replaced when\n       * \"shown.\"\n       * @param {boolean} hide Set to true to hide the children;\n       * set to false to show them.\n       * @protected\n       */\n      _showHideChildren(hide) {\n        let c = this.children;\n        for (let i=0; i<c.length; i++) {\n          let n = c[i];\n          // Ignore non-changes\n          if (Boolean(hide) != Boolean(n.__hideTemplateChildren__)) {\n            if (n.nodeType === Node.TEXT_NODE) {\n              if (hide) {\n                n.__polymerTextContent__ = n.textContent;\n                n.textContent = '';\n              } else {\n                n.textContent = n.__polymerTextContent__;\n              }\n            } else if (n.style) {\n              if (hide) {\n                n.__polymerDisplay__ = n.style.display;\n                n.style.display = 'none';\n              } else {\n                n.style.display = n.__polymerDisplay__;\n              }\n            }\n          }\n          n.__hideTemplateChildren__ = hide;\n          if (n._showHideChildren) {\n            n._showHideChildren(hide);\n          }\n        }\n      }\n      /**\n       * Overrides default property-effects implementation to intercept\n       * textContent bindings while children are \"hidden\" and cache in\n       * private storage for later retrieval.\n       *\n       * @override\n       */\n      _setUnmanagedPropertyToNode(node, prop, value) {\n        if (node.__hideTemplateChildren__ &&\n            node.nodeType == Node.TEXT_NODE && prop == 'textContent') {\n          node.__polymerTextContent__ = value;\n        } else {\n          super._setUnmanagedPropertyToNode(node, prop, value);\n        }\n      }\n      /**\n       * Find the parent model of this template instance.  The parent model\n       * is either another templatize instance that had option `parentModel: true`,\n       * or else the host element.\n       *\n       * @return {Polymer.PropertyEffectsInterface} The parent model of this instance\n       */\n      get parentModel() {\n        let model = this.__parentModel;\n        if (!model) {\n          let options;\n          model = this\n          do {\n            // A template instance's `__dataHost` is a <template>\n            // `model.__dataHost.__dataHost` is the template's host\n            model = model.__dataHost.__dataHost;\n          } while ((options = model.__templatizeOptions) && !options.parentModel)\n          this.__parentModel = model;\n        }\n        return model;\n      }\n    }\n\n    const MutableTemplateInstanceBase = Polymer.MutableData(TemplateInstanceBase);\n\n    function findMethodHost(template) {\n      // Technically this should be the owner of the outermost template.\n      // In shadow dom, this is always getRootNode().host, but we can\n      // approximate this via cooperation with our dataHost always setting\n      // `_methodHost` as long as there were bindings (or id's) on this\n      // instance causing it to get a dataHost.\n      let templateHost = template.__dataHost;\n      return templateHost && templateHost._methodHost || templateHost;\n    }\n\n    function createTemplatizerClass(template, templateInfo, options) {\n      // Anonymous class created by the templatize\n      /**\n       * @unrestricted\n       */\n      let base = options.mutableData ?\n        MutableTemplateInstanceBase : TemplateInstanceBase;\n      let klass = class extends base { }\n      klass.prototype.__templatizeOptions = options;\n      klass.prototype._bindTemplate(template);\n      addNotifyEffects(klass, template, templateInfo, options);\n      return klass;\n    }\n\n    function addPropagateEffects(template, templateInfo, options) {\n      let userForwardHostProp = options.forwardHostProp;\n      if (userForwardHostProp) {\n        // Provide data API and property effects on memoized template class\n        let klass = templateInfo.templatizeTemplateClass;\n        if (!klass) {\n          let base = options.mutableData ? MutableDataTemplate : DataTemplate;\n          klass = templateInfo.templatizeTemplateClass =\n            class TemplatizedTemplate extends base {}\n          // Add template - >instances effects\n          // and host <- template effects\n          let hostProps = templateInfo.hostProps;\n          for (let prop in hostProps) {\n            klass.prototype._addPropertyEffect('_host_' + prop,\n              klass.prototype.PROPERTY_EFFECT_TYPES.PROPAGATE,\n              {fn: createForwardHostPropEffect(prop, userForwardHostProp)});\n            klass.prototype._createNotifyingProperty('_host_' + prop);\n          }\n        }\n        upgradeTemplate(template, klass);\n        // Mix any pre-bound data into __data; no need to flush this to\n        // instances since they pull from the template at instance-time\n        if (template.__dataProto) {\n          // Note, generally `__dataProto` could be chained, but it's guaranteed\n          // to not be since this is a vanilla template we just added effects to\n          Object.assign(template.__data, template.__dataProto);\n        }\n        // Clear any pending data for performance\n        template.__dataTemp = {};\n        template.__dataPending = null;\n        template.__dataOld = null;\n        template._enableProperties();\n      }\n    }\n\n    function createForwardHostPropEffect(hostProp, userForwardHostProp) {\n      return function forwardHostProp(template, prop, props) {\n        userForwardHostProp.call(template.__templatizeOwner,\n          prop.substring('_host_'.length), props[prop]);\n      }\n    }\n\n    function addNotifyEffects(klass, template, templateInfo, options) {\n      let hostProps = templateInfo.hostProps || {};\n      for (let iprop in options.instanceProps) {\n        delete hostProps[iprop];\n        let userNotifyInstanceProp = options.notifyInstanceProp;\n        if (userNotifyInstanceProp) {\n          klass.prototype._addPropertyEffect(iprop,\n            klass.prototype.PROPERTY_EFFECT_TYPES.NOTIFY,\n            {fn: createNotifyInstancePropEffect(iprop, userNotifyInstanceProp)});\n        }\n      }\n      if (options.forwardHostProp && template.__dataHost) {\n        for (let hprop in hostProps) {\n          klass.prototype._addPropertyEffect(hprop,\n            klass.prototype.PROPERTY_EFFECT_TYPES.NOTIFY,\n            {fn: createNotifyHostPropEffect()})\n        }\n      }\n    }\n\n    function createNotifyInstancePropEffect(instProp, userNotifyInstanceProp) {\n      return function notifyInstanceProp(inst, prop, props) {\n        userNotifyInstanceProp.call(inst.__templatizeOwner,\n          inst, prop, props[prop]);\n      }\n    }\n\n    function createNotifyHostPropEffect() {\n      return function notifyHostProp(inst, prop, props) {\n        inst.__dataHost._setPendingPropertyOrPath('_host_' + prop, props[prop], true, true);\n      }\n    }\n\n    /**\n     * Module for preparing and stamping instances of templates that utilize\n     * Polymer's data-binding and declarative event listener features.\n     *\n     * Example:\n     *\n     *     // Get a template from somewhere, e.g. light DOM\n     *     let template = this.querySelector('template');\n     *     // Prepare the template\n     *     let TemplateClass = Polymer.Templatize.templatize(template);\n     *     // Instance the template with an initial data model\n     *     let instance = new TemplateClass({myProp: 'initial'});\n     *     // Insert the instance's DOM somewhere, e.g. element's shadow DOM\n     *     this.shadowRoot.appendChild(instance.root);\n     *     // Changing a property on the instance will propagate to bindings\n     *     // in the template\n     *     instance.myProp = 'new value';\n     *\n     * The `options` dictionary passed to `templatize` allows for customizing\n     * features of the generated template class, including how outer-scope host\n     * properties should be forwarded into template instances, how any instance\n     * properties added into the template's scope should be notified out to\n     * the host, and whether the instance should be decorated as a \"parent model\"\n     * of any event handlers.\n     *\n     *     // Customze property forwarding and event model decoration\n     *     let TemplateClass = Polymer.Tempaltize.templatize(template, this, {\n     *       parentModel: true,\n     *       instanceProps: {...},\n     *       forwardHostProp(property, value) {...},\n     *       notifyInstanceProp(instance, property, value) {...},\n     *     });\n     *\n     *\n     * @namespace\n     * @memberof Polymer\n     * @summary Module for preparing and stamping instances of templates\n     *   utilizing Polymer templating features.\n     */\n    const Templatize = {\n\n      /**\n       * Returns an anonymous `Polymer.PropertyEffects` class bound to the\n       * `<template>` provided.  Instancing the class will result in the\n       * template being stamped into document fragment stored as the instance's\n       * `root` property, after which it can be appended to the DOM.\n       *\n       * Templates may utilize all Polymer data-binding features as well as\n       * declarative event listeners.  Event listeners and inline computing\n       * functions in the template will be called on the host of the template.\n       *\n       * The constructor returned takes a single argument dictionary of initial\n       * property values to propagate into template bindings.  Additionally\n       * host properties can be forwarded in, and instance properties can be\n       * notified out by providing optional callbacks in the `options` dictionary.\n       *\n       * Valid configuration in `options` are as follows:\n       *\n       * - `forwardHostProp(property, value)`: Called when a property referenced\n       *   in the template changed on the template's host. As this library does\n       *   not retain references to templates instanced by the user, it is the\n       *   templatize owner's responsibility to forward host property changes into\n       *   user-stamped instances.  The `instance.forwardHostProp(property, value)`\n       *    method on the generated class should be called to forward host\n       *   properties into the template to prevent unnecessary property-changed\n       *   notifications. Any properties referenced in the template that are not\n       *   defined in `instanceProps` will be notified up to the template's host\n       *   automatically.\n       * - `instanceProps`: Dictionary of property names that will be added\n       *   to the instance by the templatize owner.  These properties shadow any\n       *   host properties, and changes within the template to these properties\n       *   will result in `notifyInstanceProp` being called.\n       * - `mutableData`: When `true`, the generated class will skip strict\n       *   dirty-checking for objects and arrays (always consider them to be\n       *   \"dirty\").\n       * - `notifyInstanceProp(instance, property, value)`: Called when\n       *   an instance property changes.  Users may choose to call `notifyPath`\n       *   on e.g. the owner to notify the change.\n       * - `parentModel`: When `true`, events handled by declarative event listeners\n       *   (`on-event=\"handler\"`) will be decorated with a `model` property pointing\n       *   to the template instance that stamped it.  It will also be returned\n       *   from `instance.parentModel` in cases where template instance nesting\n       *   causes an inner model to shadow an outer model.\n       *\n       * Note that the class returned from `templatize` is generated only once\n       * for a given `<template>` using `options` from the first call for that\n       * template, and the cached class is returned for all subsequent calls to\n       * `templatize` for that template.  As such, `options` callbacks should not\n       * close over owner-specific properties since only the first `options` is\n       * used; rather, callbacks are called bound to the `owner`, and so context\n       * needed from the callbacks (such as references to `instances` stamped)\n       * should be stored on the `owner` such that they can be retrieved via `this`.\n       *\n       * @memberof Polymer.Templatize\n       * @param {HTMLTemplateElement} template Template to templatize\n       * @param {*} owner Owner of the template instances; any optional callbacks\n       *   will be bound to this owner.\n       * @param {*=} options Options dictionary (see summary for details)\n       * @return {TemplateInstanceBase} Generated class bound to the template\n       *   provided\n       */\n      templatize(template, owner, options) {\n        options = options || {};\n        if (template.__templatizeOwner) {\n          throw new Error('A <template> can only be templatized once');\n        }\n        template.__templatizeOwner = owner;\n        let templateInfo = owner.constructor._parseTemplate(template);\n        // Get memoized base class for the prototypical template, which\n        // includes property effects for binding template & forwarding\n        let baseClass = templateInfo.templatizeInstanceClass;\n        if (!baseClass) {\n          baseClass = createTemplatizerClass(template, templateInfo, options);\n          templateInfo.templatizeInstanceClass = baseClass;\n        }\n        // Host property forwarding must be installed onto template instance\n        addPropagateEffects(template, templateInfo, options);\n        // Subclass base class and add reference for this specific template\n        let klass = class TemplateInstance extends baseClass {};\n        klass.prototype._methodHost = findMethodHost(template);\n        klass.prototype.__dataHost = template;\n        klass.prototype.__templatizeOwner = owner;\n        klass.prototype.__hostProps = templateInfo.hostProps;\n        return klass;\n      },\n\n      /**\n       * Returns the template \"model\" associated with a given element, which\n       * serves as the binding scope for the template instance the element is\n       * contained in. A template model is an instance of\n       * `TemplateInstanceBase`, and should be used to manipulate data\n       * associated with this template instance.\n       *\n       * Example:\n       *\n       *   let model = modelForElement(el);\n       *   if (model.index < 10) {\n       *     model.set('item.checked', true);\n       *   }\n       *\n       * @memberof Polymer.Templatize\n       * @param {HTMLTemplateElement} template The model will be returned for\n       *   elements stamped from this template\n       * @param {HTMLElement} el Element for which to return a template model.\n       * @return {TemplateInstanceBase} Template instance representing the\n       *   binding scope for the element\n       */\n      modelForElement(template, el) {\n        let model;\n        while (el) {\n          // An element with a __templatizeInstance marks the top boundary\n          // of a scope; walk up until we find one, and then ensure that\n          // its __dataHost matches `this`, meaning this dom-repeat stamped it\n          if ((model = el.__templatizeInstance)) {\n            // Found an element stamped by another template; keep walking up\n            // from its __dataHost\n            if (model.__dataHost != template) {\n              el = model.__dataHost;\n            } else {\n              return model;\n            }\n          } else {\n            // Still in a template scope, keep going up until\n            // a __templatizeInstance is found\n            el = el.parentNode;\n          }\n        }\n        return null;\n      }\n    }\n\n    Polymer.Templatize = Templatize;\n\n  })();\n\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/utils/templatize.html\n// module id = 9\n// module chunks = 0","/*__wc__loader*/\nrequire('./lib/mixins/element-mixin.html');\n\n\n(function() {\n  'use strict';\n\n  /**\n   * Base class that provides the core API for Polymer's meta-programming\n   * features including template stamping, data-binding, attribute deserialization,\n   * and property change observation.\n   *\n   * @polymerElement\n   * @memberof Polymer\n   * @constructor\n   * @implements {Polymer_ElementMixin}\n   * @extends HTMLElement\n   * @mixes Polymer.ElementMixin\n   * @summary Custom element base class that provides the core API for Polymer's\n   *   key meta-programming features including template stamping, data-binding,\n   *   attribute deserialization, and property change observation\n   */\n  const Element = Polymer.ElementMixin(HTMLElement);\n  Polymer.Element = Element;\n})();\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./polymer-element.html\n// module id = 10\n// module chunks = 0","/*__wc__loader*/\nrequire('../../node_modules/@webcomponents/shadycss/apply-shim.html');\n\nrequire('../mixins/element-mixin.html');\n\nrequire('../mixins/gesture-event-listeners.html');\n\nrequire('../utils/mixin.html');\n\nrequire('../utils/import-href.html');\n\nrequire('../utils/render-status.html');\n\nrequire('../utils/unresolved.html');\n\nrequire('./polymer.dom.html');\n\n\n(function() {\n\n  'use strict';\n\n  let styleInterface = window.ShadyCSS;\n\n  /**\n   * Element class mixin that provides Polymer's \"legacy\" API intended to be\n   * backward-compatible to the greatest extent possible with the API\n   * found on the Polymer 1.x `Polymer.Base` prototype applied to all elements\n   * defined using the `Polymer({...})` function.\n   *\n   * @polymerMixin\n   * @mixes Polymer.ElementMixin\n   * @mixes Polymer.GestureEventListeners\n   * @property isAttached {boolean} Set to `true` in this element's\n   *   `connectedCallback` and `false` in `disconnectedCallback`\n   * @memberof Polymer\n   * @summary Element class mixin that provides Polymer's \"legacy\" API\n   */\n  Polymer.LegacyElementMixin = Polymer.dedupingMixin(base => {\n\n    /**\n     * @constructor\n     * @extends {base}\n     * @implements {Polymer_ElementMixin}\n     * @implements {Polymer_GestureEventListeners}\n     */\n    const legacyElementBase = Polymer.GestureEventListeners(Polymer.ElementMixin(base));\n\n    /**\n     * Map of simple names to touch action names\n     * @dict\n     */\n    const DIRECTION_MAP = {\n      'x': 'pan-x',\n      'y': 'pan-y',\n      'none': 'none',\n      'all': 'auto'\n    };\n\n    /**\n     * @polymerMixinClass\n     * @implements {Polymer_LegacyElement}\n     */\n    class LegacyElement extends legacyElementBase {\n\n      constructor() {\n        super();\n        this.root = this;\n        this.created();\n      }\n\n      /**\n       * Legacy callback called during the `constructor`, for overriding\n       * by the user.\n       */\n      created() {}\n\n      connectedCallback() {\n        super.connectedCallback();\n        this.isAttached = true;\n        this.attached();\n      }\n\n      /**\n       * Legacy callback called during `connectedCallback`, for overriding\n       * by the user.\n       */\n      attached() {}\n\n      disconnectedCallback() {\n        super.disconnectedCallback();\n        this.isAttached = false;\n        this.detached();\n      }\n\n      /**\n       * Legacy callback called during `disconnectedCallback`, for overriding\n       * by the user.\n       */\n      detached() {}\n\n      attributeChangedCallback(name, old, value) {\n        if (old !== value) {\n          super.attributeChangedCallback(name, old, value);\n          this.attributeChanged(name, old, value);\n        }\n      }\n\n      /**\n       * Legacy callback called during `attributeChangedChallback`, for overriding\n       * by the user.\n       */\n      attributeChanged() {}\n\n      /**\n       * Overrides the default `Polymer.PropertyEffects` implementation to\n       * add support for class initialization via the `_registered` callback.\n       * This is called only when the first instance of the element is created.\n       *\n       * @override\n       */\n      _initializeProperties() {\n        let proto = Object.getPrototypeOf(this);\n        if (!proto.hasOwnProperty('__hasRegisterFinished')) {\n          proto.__hasRegisterFinished = true;\n          this._registered();\n        }\n        super._initializeProperties();\n      }\n\n      /**\n       * Called automatically when an element is initializing.\n       * Users may override this method to perform class registration time\n       * work. The implementation should ensure the work is performed\n       * only once for the class.\n       * @protected\n       */\n      _registered() {}\n\n      /**\n       * Overrides the default `Polymer.PropertyEffects` implementation to\n       * add support for installing `hostAttributes` and `listeners`.\n       *\n       * @override\n       */\n      ready() {\n        this._ensureAttributes();\n        this._applyListeners();\n        super.ready();\n      }\n\n      /**\n       * Ensures an element has required attributes. Called when the element\n       * is being readied via `ready`. Users should override to set the\n       * element's required attributes. The implementation should be sure\n       * to check and not override existing attributes added by\n       * the user of the element. Typically, setting attributes should be left\n       * to the element user and not done here; reasonable exceptions include\n       * setting aria roles and focusability.\n       * @protected\n       */\n      _ensureAttributes() {}\n\n      /**\n       * Adds element event listeners. Called when the element\n       * is being readied via `ready`. Users should override to\n       * add any required element event listeners.\n       * In performance critical elements, the work done here should be kept\n       * to a minimum since it is done before the element is rendered. In\n       * these elements, consider adding listeners asychronously so as not to\n       * block render.\n       * @protected\n       */\n      _applyListeners() {}\n\n      /**\n       * Converts a typed JavaScript value to a string.\n       *\n       * Note this method is provided as backward-compatible legacy API\n       * only.  It is not directly called by any Polymer features. To customize\n       * how properties are serialized to attributes for attribute bindings and\n       * `reflectToAttribute: true` properties as well as this method, override\n       * the `_serializeValue` method provided by `Polymer.PropertyAccessors`.\n       *\n       * @param {*} value Value to deserialize\n       * @return {string} Serialized value\n       */\n      serialize(value) {\n        return this._serializeValue(value);\n      }\n\n      /**\n       * Converts a string to a typed JavaScript value.\n       *\n       * Note this method is provided as backward-compatible legacy API\n       * only.  It is not directly called by any Polymer features.  To customize\n       * how attributes are deserialized to properties for in\n       * `attributeChangedCallback`, override `_deserializeValue` method\n       * provided by `Polymer.PropertyAccessors`.\n       *\n       * @param {string} value String to deserialize\n       * @param {*} type Type to deserialize the string to\n       * @return {*} Returns the deserialized value in the `type` given.\n       */\n      deserialize(value, type) {\n        return this._deserializeValue(value, type);\n      }\n\n      /**\n       * Serializes a property to its associated attribute.\n       *\n       * Note this method is provided as backward-compatible legacy API\n       * only.  It is not directly called by any Polymer features.\n       *\n       * @param {string} property Property name to reflect.\n       * @param {string=} attribute Attribute name to reflect.\n       * @param {*=} value Property value to refect.\n       */\n      reflectPropertyToAttribute(property, attribute, value) {\n        this._propertyToAttribute(property, attribute, value);\n      }\n\n      /**\n       * Sets a typed value to an HTML attribute on a node.\n       *\n       * Note this method is provided as backward-compatible legacy API\n       * only.  It is not directly called by any Polymer features.\n       *\n       * @param {*} value Value to serialize.\n       * @param {string} attribute Attribute name to serialize to.\n       * @param {Element} node Element to set attribute to.\n       */\n      serializeValueToAttribute(value, attribute, node) {\n        this._valueToNodeAttribute(node || this, value, attribute);\n      }\n\n      /**\n       * Copies own properties (including accessor descriptors) from a source\n       * object to a target object.\n       *\n       * @param {Object} prototype Target object to copy properties to.\n       * @param {Object} api Source object to copy properties from.\n       * @return {Object} prototype object that was passed as first argument.\n       */\n      extend(prototype, api) {\n        if (!(prototype && api)) {\n          return prototype || api;\n        }\n        let n$ = Object.getOwnPropertyNames(api);\n        for (let i=0, n; (i<n$.length) && (n=n$[i]); i++) {\n          let pd = Object.getOwnPropertyDescriptor(api, n);\n          if (pd) {\n            Object.defineProperty(prototype, n, pd);\n          }\n        }\n        return prototype;\n      }\n\n      /**\n       * Copies props from a source object to a target object.\n       *\n       * Note, this method uses a simple `for...in` strategy for enumerating\n       * properties.  To ensure only `ownProperties` are copied from source\n       * to target and that accessor implementations are copied, use `extend`.\n       *\n       * @param {Object} target Target object to copy properties to.\n       * @param {Object} source Source object to copy properties from.\n       * @return {Object} Target object that was passed as first argument.\n       */\n      mixin(target, source) {\n        for (let i in source) {\n          target[i] = source[i];\n        }\n        return target;\n      }\n\n      /**\n       * Sets the prototype of an object.\n       *\n       * Note this method is provided as backward-compatible legacy API\n       * only.  It is not directly called by any Polymer features.\n       * @param {Object} object The object on which to set the prototype.\n       * @param {Object} prototype The prototype that will be set on the given\n       * `object`.\n       * @return {Object} Returns the given `object` with its prototype set\n       * to the given `prototype` object.\n       */\n      chainObject(object, prototype) {\n        if (object && prototype && object !== prototype) {\n          object.__proto__ = prototype;\n        }\n        return object;\n      }\n\n      /* **** Begin Template **** */\n\n      /**\n       * Calls `importNode` on the `content` of the `template` specified and\n       * returns a document fragment containing the imported content.\n       *\n       * @param {HTMLTemplateElement} template HTML template element to instance.\n       * @return {DocumentFragment} Document fragment containing the imported\n       *   template content.\n      */\n      instanceTemplate(template) {\n        let content = this.constructor._contentForTemplate(template);\n        let dom = /** @type {DocumentFragment} */\n          (document.importNode(content, true));\n        return dom;\n      }\n\n      /* **** Begin Events **** */\n\n      /**\n       * Dispatches a custom event with an optional detail value.\n       *\n       * @param {string} type Name of event type.\n       * @param {*=} detail Detail value containing event-specific\n       *   payload.\n       * @param {Object=} options Object specifying options.  These may include:\n       *  `bubbles` (boolean, defaults to `true`),\n       *  `cancelable` (boolean, defaults to false), and\n       *  `node` on which to fire the event (HTMLElement, defaults to `this`).\n       * @return {Event} The new event that was fired.\n       */\n      fire(type, detail, options) {\n        options = options || {};\n        detail = (detail === null || detail === undefined) ? {} : detail;\n        let event = new Event(type, {\n          bubbles: options.bubbles === undefined ? true : options.bubbles,\n          cancelable: Boolean(options.cancelable),\n          composed: options.composed === undefined ? true: options.composed\n        });\n        event.detail = detail;\n        let node = options.node || this;\n        node.dispatchEvent(event)\n        return event;\n      }\n\n      /**\n       * Convenience method to add an event listener on a given element,\n       * late bound to a named method on this element.\n       *\n       * @param {Element} node Element to add event listener to.\n       * @param {string} eventName Name of event to listen for.\n       * @param {string} methodName Name of handler method on `this` to call.\n       */\n      listen(node, eventName, methodName) {\n        node = node || this;\n        let hbl = this.__boundListeners ||\n          (this.__boundListeners = new WeakMap());\n        let bl = hbl.get(node);\n        if (!bl) {\n          bl = {};\n          hbl.set(node, bl);\n        }\n        let key = eventName + methodName;\n        if (!bl[key]) {\n          bl[key] = this._addMethodEventListenerToNode(\n            node, eventName, methodName, this);\n        }\n      }\n\n      /**\n       * Convenience method to remove an event listener from a given element,\n       * late bound to a named method on this element.\n       *\n       * @param {Element} node Element to remove event listener from.\n       * @param {string} eventName Name of event to stop listening to.\n       * @param {string} methodName Name of handler method on `this` to not call\n       anymore.\n       */\n      unlisten(node, eventName, methodName) {\n        node = node || this;\n        let bl = this.__boundListeners && this.__boundListeners.get(node);\n        let key = eventName + methodName;\n        let handler = bl && bl[key];\n        if (handler) {\n          this._removeEventListenerFromNode(node, eventName, handler);\n          bl[key] = null;\n        }\n      }\n\n      /**\n       * Override scrolling behavior to all direction, one direction, or none.\n       *\n       * Valid scroll directions:\n       *   - 'all': scroll in any direction\n       *   - 'x': scroll only in the 'x' direction\n       *   - 'y': scroll only in the 'y' direction\n       *   - 'none': disable scrolling for this node\n       *\n       * @param {string=} direction Direction to allow scrolling\n       * Defaults to `all`.\n       * @param {HTMLElement=} node Element to apply scroll direction setting.\n       * Defaults to `this`.\n       */\n      setScrollDirection(direction, node) {\n        Polymer.Gestures.setTouchAction(node || this, DIRECTION_MAP[direction] || 'auto');\n      }\n      /* **** End Events **** */\n\n      /**\n       * Convenience method to run `querySelector` on this local DOM scope.\n       *\n       * This function calls `Polymer.dom(this.root).querySelector(slctr)`.\n       *\n       * @param {string} slctr Selector to run on this local DOM scope\n       * @return {Element} Element found by the selector, or null if not found.\n       */\n      $$(slctr) {\n        return this.root.querySelector(slctr);\n      }\n\n      /**\n       * Return the element whose local dom within which this element\n       * is contained. This is a shorthand for\n       * `this.getRootNode().host`.\n       */\n      get domHost() {\n        let root = this.getRootNode();\n        return (root instanceof DocumentFragment) ? root.host : root;\n      }\n\n      /**\n       * Force this element to distribute its children to its local dom.\n       * This is necessary only when ShadyDOM is used and only in cases that\n       * are not automatically handled. For example,\n       * a user should call `distributeContent` if distribution has been\n       * invalidated due to an element being added or removed from the shadowRoot\n       * that contains an insertion point (`<slot>`) inside its subtree.\n       */\n      distributeContent() {\n        if (window.ShadyDOM && this.shadowRoot) {\n          this.shadowRoot.forceRender();\n        }\n      }\n\n      /**\n       * Returns a list of nodes that are the effective childNodes. The effective\n       * childNodes list is the same as the element's childNodes except that\n       * any `<content>` elements are replaced with the list of nodes distributed\n       * to the `<content>`, the result of its `getDistributedNodes` method.\n       *\n       * @return {Array<Node>} List of effctive child nodes.\n       */\n      getEffectiveChildNodes() {\n        return Polymer.dom(this).getEffectiveChildNodes();\n      }\n\n      /**\n       * Returns a list of nodes distributed within this element that match\n       * `selector`. These can be dom children or elements distributed to\n       * children that are insertion points.\n       * @param {string} selector Selector to run.\n       * @return {Array<Node>} List of distributed elements that match selector.\n       */\n      queryDistributedElements(selector) {\n        return Polymer.dom(this).queryDistributedElements(selector);\n      }\n\n      /**\n       * Returns a list of elements that are the effective children. The effective\n       * children list is the same as the element's children except that\n       * any `<content>` elements are replaced with the list of elements\n       * distributed to the `<content>`.\n       *\n       * @return {Array<Node>} List of effctive children.\n       */\n      getEffectiveChildren() {\n        let list = this.getEffectiveChildNodes();\n        return list.filter(function(n) {\n          return (n.nodeType === Node.ELEMENT_NODE);\n        });\n      }\n\n      /**\n       * Returns a string of text content that is the concatenation of the\n       * text content's of the element's effective childNodes (the elements\n       * returned by <a href=\"#getEffectiveChildNodes>getEffectiveChildNodes</a>.\n       *\n       * @return {string} List of effctive children.\n       */\n      getEffectiveTextContent() {\n        let cn = this.getEffectiveChildNodes();\n        let tc = [];\n        for (let i=0, c; (c = cn[i]); i++) {\n          if (c.nodeType !== Node.COMMENT_NODE) {\n            tc.push(c.textContent);\n          }\n        }\n        return tc.join('');\n      }\n\n      /**\n       * Returns the first effective childNode within this element that\n       * match `selector`. These can be dom child nodes or elements distributed\n       * to children that are insertion points.\n       * @param {string} selector Selector to run.\n       * @return {Object<Node>} First effective child node that matches selector.\n       */\n      queryEffectiveChildren(selector) {\n        let e$ = this.queryDistributedElements(selector);\n        return e$ && e$[0];\n      }\n\n      /**\n       * Returns a list of effective childNodes within this element that\n       * match `selector`. These can be dom child nodes or elements distributed\n       * to children that are insertion points.\n       * @param {string} selector Selector to run.\n       * @return {Array<Node>} List of effective child nodes that match selector.\n       */\n      queryAllEffectiveChildren(selector) {\n        return this.queryDistributedElements(selector);\n      }\n\n      /**\n       * Returns a list of nodes distributed to this element's `<slot>`.\n       *\n       * If this element contains more than one `<slot>` in its local DOM,\n       * an optional selector may be passed to choose the desired content.\n       *\n       * @param {string=} slctr CSS selector to choose the desired\n       *   `<slot>`.  Defaults to `content`.\n       * @return {Array<Node>} List of distributed nodes for the `<slot>`.\n       */\n      getContentChildNodes(slctr) {\n        let content = this.root.querySelector(slctr || 'slot');\n        return content ? Polymer.dom(content).getDistributedNodes() : [];\n      }\n\n      /**\n       * Returns a list of element children distributed to this element's\n       * `<slot>`.\n       *\n       * If this element contains more than one `<slot>` in its\n       * local DOM, an optional selector may be passed to choose the desired\n       * content.  This method differs from `getContentChildNodes` in that only\n       * elements are returned.\n       *\n       * @param {string=} slctr CSS selector to choose the desired\n       *   `<content>`.  Defaults to `content`.\n       * @return {Array<HTMLElement>} List of distributed nodes for the\n       *   `<slot>`.\n       */\n      getContentChildren(slctr) {\n        return this.getContentChildNodes(slctr).filter(function(n) {\n          return (n.nodeType === Node.ELEMENT_NODE);\n        });\n      }\n\n      /**\n       * Checks whether an element is in this element's light DOM tree.\n       *\n       * @param {?Node} node The element to be checked.\n       * @return {boolean} true if node is in this element's light DOM tree.\n       */\n      isLightDescendant(node) {\n        return this !== node && this.contains(node) &&\n            this.getRootNode() === node.getRootNode();\n      }\n\n      /**\n       * Checks whether an element is in this element's local DOM tree.\n       *\n       * @param {HTMLElement=} node The element to be checked.\n       * @return {boolean} true if node is in this element's local DOM tree.\n       */\n      isLocalDescendant(node) {\n        return this.root === node.getRootNode();\n      }\n\n      // NOTE: should now be handled by ShadyCss library.\n      scopeSubtree(container, shouldObserve) { // eslint-disable-line no-unused-vars\n      }\n\n      /**\n       * Returns the computed style value for the given property.\n       * @param {string} property The css property name.\n       * @return {string} Returns the computed css property value for the given\n       * `property`.\n       */\n      getComputedStyleValue(property) {\n        return styleInterface.getComputedStyleValue(this, property);\n      }\n\n      // debounce\n\n      /**\n       * Call `debounce` to collapse multiple requests for a named task into\n       * one invocation which is made after the wait time has elapsed with\n       * no new request.  If no wait time is given, the callback will be called\n       * at microtask timing (guaranteed before paint).\n       *\n       *     debouncedClickAction(e) {\n       *       // will not call `processClick` more than once per 100ms\n       *       this.debounce('click', function() {\n       *        this.processClick();\n       *       } 100);\n       *     }\n       *\n       * @param {string} jobName String to indentify the debounce job.\n       * @param {function()} callback Function that is called (with `this`\n       *   context) when the wait time elapses.\n       * @param {number} wait Optional wait time in milliseconds (ms) after the\n       *   last signal that must elapse before invoking `callback`\n       * @return {Object} Returns a debouncer object on which exists the\n       * following methods: `isActive()` returns true if the debouncer is\n       * active; `cancel()` cancels the debouncer if it is active;\n       * `flush()` immediately invokes the debounced callback if the debouncer\n       * is active.\n       */\n      debounce(jobName, callback, wait) {\n        this._debouncers = this._debouncers || {};\n        return this._debouncers[jobName] = Polymer.Debouncer.debounce(\n              this._debouncers[jobName]\n            , wait > 0 ? Polymer.Async.timeOut.after(wait) : Polymer.Async.microTask\n            , callback.bind(this));\n      }\n\n      /**\n       * Returns whether a named debouncer is active.\n       *\n       * @param {string} jobName The name of the debouncer started with `debounce`\n       * @return {boolean} Whether the debouncer is active (has not yet fired).\n       */\n      isDebouncerActive(jobName) {\n        this._debouncers = this._debouncers || {};\n        let debouncer = this._debouncers[jobName];\n        return !!(debouncer && debouncer.isActive());\n      }\n\n      /**\n       * Immediately calls the debouncer `callback` and inactivates it.\n       *\n       * @param {string} jobName The name of the debouncer started with `debounce`\n       */\n      flushDebouncer(jobName) {\n        this._debouncers = this._debouncers || {};\n        let debouncer = this._debouncers[jobName];\n        if (debouncer) {\n          debouncer.flush();\n        }\n      }\n\n      /**\n       * Cancels an active debouncer.  The `callback` will not be called.\n       *\n       * @param {string} jobName The name of the debouncer started with `debounce`\n       */\n      cancelDebouncer(jobName) {\n        this._debouncers = this._debouncers || {}\n        let debouncer = this._debouncers[jobName];\n        if (debouncer) {\n          debouncer.cancel();\n        }\n      }\n\n      /**\n       * Runs a callback function asyncronously.\n       *\n       * By default (if no waitTime is specified), async callbacks are run at\n       * microtask timing, which will occur before paint.\n       *\n       * @param {Function} callback The callback function to run, bound to `this`.\n       * @param {number=} waitTime Time to wait before calling the\n       *   `callback`.  If unspecified or 0, the callback will be run at microtask\n       *   timing (before paint).\n       * @return {number} Handle that may be used to cancel the async job.\n       */\n      async(callback, waitTime) {\n        return waitTime > 0 ? Polymer.Async.timeOut.run(callback.bind(this), waitTime) :\n            ~Polymer.Async.microTask.run(callback.bind(this));\n      }\n\n      /**\n       * Cancels an async operation started with `async`.\n       *\n       * @param {number} handle Handle returned from original `async` call to\n       *   cancel.\n       */\n      cancelAsync(handle) {\n        handle < 0 ? Polymer.Async.microTask.cancel(~handle) :\n            Polymer.Async.timeOut.cancel(handle);\n      }\n\n      // other\n\n      /**\n       * Convenience method for creating an element and configuring it.\n       *\n       * @param {string} tag HTML element tag to create.\n       * @param {Object} props Object of properties to configure on the\n       *    instance.\n       * @return {Element} Newly created and configured element.\n       */\n      create(tag, props) {\n        let elt = document.createElement(tag);\n        if (props) {\n          if (elt.setProperties) {\n            elt.setProperties(props);\n          } else {\n            for (let n in props) {\n              elt[n] = props[n];\n            }\n          }\n        }\n        return elt;\n      }\n\n      /**\n       * Convenience method for importing an HTML document imperatively.\n       *\n       * This method creates a new `<link rel=\"import\">` element with\n       * the provided URL and appends it to the document to start loading.\n       * In the `onload` callback, the `import` property of the `link`\n       * element will contain the imported document contents.\n       *\n       * @param {string} href URL to document to load.\n       * @param {Function} onload Callback to notify when an import successfully\n       *   loaded.\n       * @param {Function} onerror Callback to notify when an import\n       *   unsuccessfully loaded.\n       * @param {boolean} optAsync True if the import should be loaded `async`.\n       *   Defaults to `false`.\n       * @return {HTMLLinkElement} The link element for the URL to be loaded.\n       */\n      importHref(href, onload, onerror, optAsync) { // eslint-disable-line no-unused-vars\n        let loadFn = onload ? onload.bind(this) : null;\n        let errorFn = onerror ? onerror.bind(this) : null;\n        return Polymer.importHref(href, loadFn, errorFn, optAsync);\n      }\n\n      /**\n       * Polyfill for Element.prototype.matches, which is sometimes still\n       * prefixed.\n       *\n       * @param {string} selector Selector to test.\n       * @param {Element=} node Element to test the selector against.\n       * @return {boolean} Whether the element matches the selector.\n       */\n      elementMatches(selector, node) {\n        return Polymer.dom.matchesSelector(node || this, selector);\n      }\n\n      /**\n       * Toggles an HTML attribute on or off.\n       *\n       * @param {string} name HTML attribute name\n       * @param {boolean=} bool Boolean to force the attribute on or off.\n       *    When unspecified, the state of the attribute will be reversed.\n       * @param {HTMLElement=} node Node to target.  Defaults to `this`.\n       */\n      toggleAttribute(name, bool, node) {\n        node = node || this;\n        if (arguments.length == 1) {\n          bool = !node.hasAttribute(name);\n        }\n        if (bool) {\n          node.setAttribute(name, '');\n        } else {\n          node.removeAttribute(name);\n        }\n      }\n\n\n      /**\n       * Toggles a CSS class on or off.\n       *\n       * @param {string} name CSS class name\n       * @param {boolean=} bool Boolean to force the class on or off.\n       *    When unspecified, the state of the class will be reversed.\n       * @param {HTMLElement=} node Node to target.  Defaults to `this`.\n       */\n      toggleClass(name, bool, node) {\n        node = node || this;\n        if (arguments.length == 1) {\n          bool = !node.classList.contains(name);\n        }\n        if (bool) {\n          node.classList.add(name);\n        } else {\n          node.classList.remove(name);\n        }\n      }\n\n      /**\n       * Cross-platform helper for setting an element's CSS `transform` property.\n       *\n       * @param {string} transformText Transform setting.\n       * @param {HTMLElement=} node Element to apply the transform to.\n       * Defaults to `this`\n       */\n      transform(transformText, node) {\n        node = node || this;\n        node.style.webkitTransform = transformText;\n        node.style.transform = transformText;\n      }\n\n      /**\n       * Cross-platform helper for setting an element's CSS `translate3d`\n       * property.\n       *\n       * @param {number} x X offset.\n       * @param {number} y Y offset.\n       * @param {number} z Z offset.\n       * @param {HTMLElement=} node Element to apply the transform to.\n       * Defaults to `this`.\n       */\n      translate3d(x, y, z, node) {\n        node = node || this;\n        this.transform('translate3d(' + x + ',' + y + ',' + z + ')', node);\n      }\n\n      /**\n       * Removes an item from an array, if it exists.\n       *\n       * If the array is specified by path, a change notification is\n       * generated, so that observers, data bindings and computed\n       * properties watching that path can update.\n       *\n       * If the array is passed directly, **no change\n       * notification is generated**.\n       *\n       * @param {string | !Array<number|string>} arrayOrPath Path to array from which to remove the item\n       *   (or the array itself).\n       * @param {*} item Item to remove.\n       * @return {Array} Array containing item removed.\n       */\n      arrayDelete(arrayOrPath, item) {\n        let index;\n        if (Array.isArray(arrayOrPath)) {\n          index = arrayOrPath.indexOf(item);\n          if (index >= 0) {\n            return arrayOrPath.splice(index, 1);\n          }\n        } else {\n          let arr = Polymer.Path.get(this, arrayOrPath);\n          index = arr.indexOf(item);\n          if (index >= 0) {\n            return this.splice(arrayOrPath, index, 1);\n          }\n        }\n        return null;\n      }\n\n      // logging\n\n      /**\n       * Facades `console.log`/`warn`/`error` as override point.\n       *\n       * @param {string} level One of 'log', 'warn', 'error'\n       * @param {Array} args Array of strings or objects to log\n       */\n      _logger(level, args) {\n        // accept ['foo', 'bar'] and [['foo', 'bar']]\n        if (Array.isArray(args) && args.length === 1) {\n          args = args[0];\n        }\n        switch(level) {\n          case 'log':\n          case 'warn':\n          case 'error':\n            console[level](...args);\n        }\n      }\n\n      /**\n       * Facades `console.log` as an override point.\n       *\n       * @param {...*} var_args Array of strings or objects to log\n       */\n      _log(...args) {\n        this._logger('log', args);\n      }\n\n      /**\n       * Facades `console.warn` as an override point.\n       *\n       * @param {...*} var_args Array of strings or objects to log\n       */\n      _warn(...args) {\n        this._logger('warn', args);\n      }\n\n      /**\n       * Facades `console.error` as an override point.\n       *\n       * @param {...*} var_args Array of strings or objects to log\n       */\n      _error(...args) {\n        this._logger('error', args)\n      }\n\n      /**\n       * Formats a message using the element type an a method name.\n       *\n       * @param {string} methodName Method name to associate with message\n       * @param {...*} var_args Array of strings or objects to log\n       * @return {string} String with formatting information for `console`\n       *   logging.\n       */\n      _logf(...args) {\n        return ['[%s::%s]', this.is, ...args];\n      }\n\n    }\n\n    return LegacyElement;\n\n  });\n\n})();\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/legacy/legacy-element-mixin.html\n// module id = 11\n// module chunks = 0","/*__wc__loader*/\nrequire('../utils/boot.html');\n\nrequire('../utils/settings.html');\n\nrequire('../utils/mixin.html');\n\nrequire('../utils/case-map.html');\n\nrequire('../utils/style-gather.html');\n\nrequire('../utils/resolve-url.html');\n\nrequire('../elements/dom-module.html');\n\nrequire('./property-effects.html');\n\n\n(function() {\n  'use strict';\n  /**\n   * @typedef Object<string, {\n   *   value: *,\n   *   type: (Function | undefined),\n   *   readOnly: (boolean | undefined),\n   *   computed: (string | undefined),\n   *   reflectToAttribute: (boolean | undefined),\n   *   notify: (boolean | undefined),\n   *   observer: (string | undefined)\n   * }>)\n   */\n  let PolymerElementProperties; // eslint-disable-line no-unused-vars\n\n  /** @record */\n  let PolymerElementConstructor = function(){}; // eslint-disable-line no-unused-vars\n  /** @type {(string | undefined)} */\n  PolymerElementConstructor.is;\n  /** @type {(string | undefined)} */\n  PolymerElementConstructor.extends;\n  /** @type {(!PolymerElementProperties | undefined)} */\n  PolymerElementConstructor.properties;\n  /** @type {(!Array<string> | undefined)} */\n  PolymerElementConstructor.observers;\n  /** @type {(!HTMLTemplateElement | string | undefined)} */\n  PolymerElementConstructor.template;\n\n  /**\n   * Element class mixin that provides the core API for Polymer's meta-programming\n   * features including template stamping, data-binding, attribute deserialization,\n   * and property change observation.\n   *\n   * Subclassers may provide the following static getters to return metadata\n   * used to configure Polymer's features for the class:\n   *\n   * - `static get is()`: When the template is provided via a `dom-module`,\n   *   users should return the `dom-module` id from a static `is` getter.  If\n   *   no template is needed or the template is provided directly via the\n   *   `template` getter, there is no need to define `is` for the element.\n   *\n   * - `static get template()`: Users may provide the template directly (as\n   *   opposed to via `dom-module`) by implementing a static `template` getter.\n   *   The getter may return an `HTMLTemplateElement` or a string, which will\n   *   automatically be parsed into a template.\n   *\n   * - `static get properties()`: Should return an object describing\n   *   property-related metadata used by Polymer features (key: property name\n   *   value: object containing property metadata). Valid keys in per-property\n   *   metadata include:\n   *   - `type` (String|Number|Object|Array|...): Used by\n   *     `attributeChangedCallback` to determine how string-based attributes\n   *     are deserialized to JavaScript property values.\n   *   - `notify` (boolean): Causes a change in the property to fire a\n   *     non-bubbling event called `<property>-changed`. Elements that have\n   *     enabled two-way binding to the property use this event to observe changes.\n   *   - `readOnly` (boolean): Creates a getter for the property, but no setter.\n   *     To set a read-only property, use the private setter method\n   *     `_setProperty(property, value)`.\n   *   - `observer` (string): Observer method name that will be called when\n   *     the property changes. The arguments of the method are\n   *     `(value, previousValue)`.\n   *   - `computed` (string): String describing method and dependent properties\n   *     for computing the value of this property (e.g. `'computeFoo(bar, zot)'`).\n   *     Computed properties are read-only by default and can only be changed\n   *     via the return value of the computing method.\n   *\n   * - `static get observers()`: Array of strings describing multi-property\n   *   observer methods and their dependent properties (e.g.\n   *   `'observeABC(a, b, c)'`).\n   *\n   * The base class provides default implementations for the following standard\n   * custom element lifecycle callbacks; users may override these, but should\n   * call the super method to ensure\n   * - `constructor`: Run when the element is created or upgraded\n   * - `connectedCallback`: Run each time the element is connected to the\n   *   document\n   * - `disconnectedCallback`: Run each time the element is disconnected from\n   *   the document\n   * - `attributeChangedCallback`: Run each time an attribute in\n   *   `observedAttributes` is set or removed (note: this element's default\n   *   `observedAttributes` implementation will automatically return an array\n   *   of dash-cased attributes based on `properties`)\n   *\n   * @polymerMixin\n   * @mixes Polymer.PropertyEffects\n   * @memberof Polymer\n   * @property rootPath {string} Set to the value of `Polymer.rootPath`,\n   *   which defaults to the main document path\n   * @property importPath {string} Set to the value of the class's static\n   *   `importPath` property, which defaults to the path of this element's\n   *   `dom-module` (when `is` is used), but can be overridden for other\n   *   import strategies.\n   * @summary Element class mixin that provides the core API for Polymer's\n   * meta-programming features.\n   */\n  Polymer.ElementMixin = Polymer.dedupingMixin(base => {\n\n    /**\n     * @constructor\n     * @extends {base}\n     * @implements {Polymer_PropertyEffects}\n     */\n    const polymerElementBase = Polymer.PropertyEffects(base);\n\n    let caseMap = Polymer.CaseMap;\n\n    /**\n     * Returns the `properties` object specifically on `klass`. Use for:\n     * (1) super chain mixes togther to make `propertiesForClass` which is\n     * then used to make `observedAttributes`.\n     * (2) properties effects and observers are created from it at `finalize` time.\n     *\n     * @param {HTMLElement} klass Element class\n     * @return {Object} Object containing own properties for this class\n     * @private\n     */\n    function ownPropertiesForClass(klass) {\n      if (!klass.hasOwnProperty(\n        JSCompiler_renameProperty('__ownProperties', klass))) {\n        klass.__ownProperties =\n          klass.hasOwnProperty(JSCompiler_renameProperty('properties', klass)) ?\n          klass.properties : {};\n      }\n      return klass.__ownProperties;\n    }\n\n    /**\n     * Returns the `observers` array specifically on `klass`. Use for\n     * setting up observers.\n     *\n     * @param {HTMLElement} klass Element class\n     * @return {Array} Array containing own observers for this class\n     * @private\n     */\n    function ownObserversForClass(klass) {\n      if (!klass.hasOwnProperty(\n        JSCompiler_renameProperty('__ownObservers', klass))) {\n        klass.__ownObservers =\n          klass.hasOwnProperty(JSCompiler_renameProperty('observers', klass)) ?\n          klass.observers : [];\n      }\n      return klass.__ownObservers;\n    }\n\n    /**\n     * Mixes `props` into `flattenedProps` but upgrades shorthand type\n     * syntax to { type: Type}.\n     *\n     * @param {Object} flattenedProps Bag to collect flattened properties into\n     * @param {Object} props Bag of properties to add to `flattenedProps`\n     * @return {Objecg} The input `flattenedProps` bag\n     * @private\n     */\n    function flattenProperties(flattenedProps, props) {\n      for (let p in props) {\n        let o = props[p];\n        if (typeof o == 'function') {\n          o = { type: o };\n        }\n        flattenedProps[p] = o;\n      }\n      return flattenedProps;\n    }\n\n    /**\n     * Returns a flattened list of properties mixed together from the chain of all\n     * constructor's `config.properties`. This list is used to create\n     * (1) observedAttributes,\n     * (2) class property default values\n     *\n     * @param {HTMLElement} klass Element class\n     * @return {PolymerElementProperties} Flattened properties for this class\n     * @private\n     */\n    function propertiesForClass(klass) {\n      if (!klass.hasOwnProperty(\n        JSCompiler_renameProperty('__classProperties', klass))) {\n        klass.__classProperties =\n        flattenProperties({}, ownPropertiesForClass(klass));\n        let superCtor = Object.getPrototypeOf(klass.prototype).constructor;\n        if (superCtor.prototype instanceof PolymerElement) {\n          klass.__classProperties = Object.assign(\n            Object.create(propertiesForClass(superCtor)),\n            klass.__classProperties);\n        }\n      }\n      return klass.__classProperties;\n    }\n\n    /**\n     * Returns a list of properties with default values.\n     * This list is created as an optimization since it is a subset of\n     * the list returned from `propertiesForClass`.\n     * This list is used in `_initializeProperties` to set property defaults.\n     *\n     * @param {HTMLElement} klass Element class\n     * @return {PolymerElementProperties} Flattened properties for this class\n     *   that have default values\n     * @private\n     */\n    function propertyDefaultsForClass(klass) {\n      if (!klass.hasOwnProperty(\n        JSCompiler_renameProperty('__classPropertyDefaults', klass))) {\n        klass.__classPropertyDefaults = null;\n        let props = propertiesForClass(klass);\n        for (let p in props) {\n          let info = props[p];\n          if ('value' in info) {\n            klass.__classPropertyDefaults = klass.__classPropertyDefaults || {};\n            klass.__classPropertyDefaults[p] = info;\n          }\n        }\n      }\n      return klass.__classPropertyDefaults;\n    }\n\n    /**\n     * Returns true if a `klass` has finalized. Called in `ElementClass.finalize()`\n     * @param {HTMLElement} klass Element class\n     * @return {boolean} True if all metaprogramming for this class has been\n     *   completed\n     * @private\n     */\n    function hasClassFinalized(klass) {\n      return klass.hasOwnProperty(JSCompiler_renameProperty('__finalized', klass));\n    }\n\n    /**\n     * Called by `ElementClass.finalize()`. Ensures this `klass` and\n     * *all superclasses* are finalized by traversing the prototype chain\n     * and calling `klass.finalize()`.\n     *\n     * @param {HTMLElement} klass Element class\n     * @private\n     */\n    function finalizeClassAndSuper(klass) {\n      let proto = klass.prototype;\n      let superCtor = Object.getPrototypeOf(proto).constructor;\n      if (superCtor.prototype instanceof PolymerElement) {\n        superCtor.finalize();\n      }\n      finalizeClass(klass);\n    }\n\n    /**\n     * Configures a `klass` based on a staic `klass.config` object and\n     * a `template`. This includes creating accessors and effects\n     * for properties in `config` and the `template` as well as preparing the\n     * `template` for stamping.\n     *\n     * @param {HTMLElement} klass Element class\n     * @private\n     */\n    function finalizeClass(klass) {\n      klass.__finalized = true;\n      let proto = klass.prototype;\n      if (klass.hasOwnProperty(\n        JSCompiler_renameProperty('is', klass)) && klass.is) {\n        Polymer.telemetry.register(proto);\n      }\n      let props = ownPropertiesForClass(klass);\n      if (props) {\n        finalizeProperties(proto, props);\n      }\n      let observers = ownObserversForClass(klass);\n      if (observers) {\n        finalizeObservers(proto, observers, props);\n      }\n      // note: create \"working\" template that is finalized at instance time\n      let template = klass.template;\n      if (template) {\n        if (typeof template === 'string') {\n          let t = document.createElement('template');\n          t.innerHTML = template;\n          template = t;\n        } else {\n          template = template.cloneNode(true);\n        }\n        proto._template = template;\n      }\n    }\n\n    /**\n     * Configures a `proto` based on a `properties` object.\n     * Leverages `PropertyEffects` to create property accessors and effects\n     * supporting, observers, reflecting to attributes, change notification,\n     * computed properties, and read only properties.\n     * @param {HTMLElement} proto Element class prototype to add accessors\n     *    and effects to\n     * @param {Object} properties Flattened bag of property descriptors for\n     *    this class\n     * @private\n     */\n    function finalizeProperties(proto, properties) {\n      for (let p in properties) {\n        createPropertyFromConfig(proto, p, properties[p], properties);\n      }\n    }\n\n    /**\n     * Configures a `proto` based on a `observers` array.\n     * Leverages `PropertyEffects` to create observers.\n     * @param {HTMLElement} proto Element class prototype to add accessors\n     *   and effects to\n     * @param {Object} observers Flattened array of observer descriptors for\n     *   this class\n     * @param {Object} dynamicFns Object containing keys for any properties\n     *   that are functions and should trigger the effect when the function\n     *   reference is changed\n     * @private\n     */\n    function finalizeObservers(proto, observers, dynamicFns) {\n      for (let i=0; i < observers.length; i++) {\n        proto._createMethodObserver(observers[i], dynamicFns);\n      }\n    }\n\n    /**\n     * Creates effects for a property.\n     *\n     * Note, once a property has been set to\n     * `readOnly`, `computed`, `reflectToAttribute`, or `notify`\n     * these values may not be changed. For example, a subclass cannot\n     * alter these settings. However, additional `observers` may be added\n     * by subclasses.\n     *\n     * The info object should may contain property metadata as follows:\n     *\n     * * `type`: {function} type to which an attribute matching the property\n     * is deserialized. Note the property is camel-cased from a dash-cased\n     * attribute. For example, 'foo-bar' attribute is dersialized to a\n     * property named 'fooBar'.\n     *\n     * * `readOnly`: {boolean} creates a readOnly property and\n     * makes a private setter for the private of the form '_setFoo' for a\n     * property 'foo',\n     *\n     * * `computed`: {string} creates a computed property. A computed property\n     * also automatically is set to `readOnly: true`. The value is calculated\n     * by running a method and arguments parsed from the given string. For\n     * example 'compute(foo)' will compute a given property when the\n     * 'foo' property changes by executing the 'compute' method. This method\n     * must return the computed value.\n     *\n     * * `reflectToAttriute`: {boolean} If true, the property value is reflected\n     * to an attribute of the same name. Note, the attribute is dash-cased\n     * so a property named 'fooBar' is reflected as 'foo-bar'.\n     *\n     * * `notify`: {boolean} sends a non-bubbling notification event when\n     * the property changes. For example, a property named 'foo' sends an\n     * event named 'foo-changed' with `event.detail` set to the value of\n     * the property.\n     *\n     * * observer: {string} name of a method that runs when the property\n     * changes. The arguments of the method are (value, previousValue).\n     *\n     * Note: Users may want control over modifying property\n     * effects via subclassing. For example, a user might want to make a\n     * reflectToAttribute property not do so in a subclass. We've chosen to\n     * disable this because it leads to additional complication.\n     * For example, a readOnly effect generates a special setter. If a subclass\n     * disables the effect, the setter would fail unexpectedly.\n     * Based on feedback, we may want to try to make effects more malleable\n     * and/or provide an advanced api for manipulating them.\n     * Also consider adding warnings when an effect cannot be changed.\n     *\n     * @param {HTMLElement} proto Element class prototype to add accessors\n     *   and effects to\n     * @param {string} name Name of the property.\n     * @param {Object} info Info object from which to create property effects.\n     * Supported keys:\n     * @param {Object} allProps Flattened map of all properties defined in this\n     *   element (including inherited properties)\n     * @private\n     */\n    function createPropertyFromConfig(proto, name, info, allProps) {\n      // computed forces readOnly...\n      if (info.computed) {\n        info.readOnly = true;\n      }\n      // Note, since all computed properties are readOnly, this prevents\n      // adding additional computed property effects (which leads to a confusing\n      // setup where multiple triggers for setting a property)\n      // While we do have `hasComputedEffect` this is set on the property's\n      // dependencies rather than itself.\n      if (info.computed  && !proto._hasReadOnlyEffect(name)) {\n        proto._createComputedProperty(name, info.computed, allProps);\n      }\n      if (info.readOnly && !proto._hasReadOnlyEffect(name)) {\n        proto._createReadOnlyProperty(name, !info.computed);\n      }\n      if (info.reflectToAttribute && !proto._hasReflectEffect(name)) {\n        proto._createReflectedProperty(name);\n      }\n      if (info.notify && !proto._hasNotifyEffect(name)) {\n        proto._createNotifyingProperty(name);\n      }\n      // always add observer\n      if (info.observer) {\n        proto._createPropertyObserver(name, info.observer, allProps[info.observer]);\n      }\n    }\n\n    /**\n     * Configures an element `proto` to function with a given `template`.\n     * The element name `is` and extends `ext` must be specified for ShadyCSS\n     * style scoping.\n     *\n     * @param {HTMLElement} proto Element class prototype to add accessors\n     *   and effects to\n     * @param {HTMLTemplateElement} template Template to process and bind\n     * @param {string} baseURI URL against which to resolve urls in\n     *   style element cssText\n     * @param {string} is Tag name (or type extension name) for this element\n     * @param {string=} ext For type extensions, the tag name that was extended\n     * @private\n     */\n    function finalizeTemplate(proto, template, baseURI, is, ext) {\n      // support `include=\"module-name\"`\n      let cssText =\n        Polymer.StyleGather.cssFromTemplate(template, baseURI) +\n        Polymer.StyleGather.cssFromModuleImports(is);\n      if (cssText) {\n        let style = document.createElement('style');\n        style.textContent = cssText;\n        template.content.insertBefore(style, template.content.firstChild);\n      }\n      if (window.ShadyCSS) {\n        window.ShadyCSS.prepareTemplate(template, is, ext);\n      }\n      proto._bindTemplate(template);\n    }\n\n    /**\n     * @polymerMixinClass\n     * @unrestricted\n     * @implements {Polymer_ElementMixin}\n     */\n    class PolymerElement extends polymerElementBase {\n\n      /**\n       * Standard Custom Elements V1 API.  The default implementation returns\n       * a list of dash-cased attributes based on a flattening of all properties\n       * declared in `static get properties()` for this element and any\n       * superclasses.\n       *\n       * @return {Array} Observed attribute list\n       */\n      static get observedAttributes() {\n        if (!this.hasOwnProperty(JSCompiler_renameProperty('__observedAttributes', this))) {\n          let list = [];\n          let properties = propertiesForClass(this);\n          for (let prop in properties) {\n            list.push(Polymer.CaseMap.camelToDashCase(prop));\n          }\n          this.__observedAttributes = list;\n        }\n        return this.__observedAttributes;\n      }\n\n      /**\n       * Called automatically when the first element instance is created to\n       * ensure that class finalization work has been completed.\n       * May be called by users to eagerly perform class finalization work\n       * prior to the creation of the first element instance.\n       *\n       * Class finalization work generally includes meta-programming such as\n       * creating property accessors and any property effect metadata needed for\n       * the features used.\n       *\n       * @public\n       */\n      static finalize() {\n        if (!hasClassFinalized(this)) {\n          finalizeClassAndSuper(this);\n        }\n      }\n\n      /**\n       * Returns the template that will be stamped into this element's shadow root.\n       *\n       * If a `static get is()` getter is defined, the default implementation\n       * will return the first `<template>` in a `dom-module` whose `id`\n       * matches this element's `is`.\n       *\n       * Users may override this getter to return an arbitrary template\n       * (in which case the `is` getter is unnecessary). The template returned\n       * may be either an `HTMLTemplateElement` or a string that will be\n       * automatically parsed into a template.\n       *\n       * Note that when subclassing, if the super class overrode the default\n       * implementation and the subclass would like to provide an alternate\n       * template via a `dom-module`, it should override this getter and\n       * return `Polymer.DomModule.import(this.is, 'template')`.\n       *\n       * If a subclass would like to modify the super class template, it should\n       * clone it rather than modify it in place.  If the getter does expensive\n       * work such as cloning/modifying a template, it should memoize the\n       * template for maximum performance:\n       *\n       *   let memoizedTemplate;\n       *   class MySubClass extends MySuperClass {\n       *     static get template() {\n       *       if (!memoizedTemplate) {\n       *         memoizedTemplate = super.template.cloneNode(true);\n       *         let subContent = document.createElement('div');\n       *         subContent.textContent = 'This came from MySubClass';\n       *         memoizedTemplate.content.appendChild(subContent);\n       *       }\n       *       return memoizedTemplate;\n       *     }\n       *   }\n       *\n       * @return {HTMLTemplateElement|string} Template to be stamped\n       */\n      static get template() {\n        if (!this.hasOwnProperty(JSCompiler_renameProperty('_template', this))) {\n          this._template = Polymer.DomModule.import(this.is, 'template') ||\n            // note: implemented so a subclass can retrieve the super\n            // template; call the super impl this way so that `this` points\n            // to the superclass.\n            Object.getPrototypeOf(this.prototype).constructor.template;\n        }\n        return this._template;\n      }\n\n      /**\n       * Path matching the url from which the element was imported.\n       * This path is used to resolve url's in template style cssText.\n       * The `importPath` property is also set on element instances and can be\n       * used to create bindings relative to the import path.\n       * Defaults to the path matching the url containing a `dom-module` element\n       * matching this element's static `is` property.\n       * Note, this path should contain a trailing `/`.\n       *\n       * @return {string} The import path for this element class\n       */\n      static get importPath() {\n        if (!this.hasOwnProperty(JSCompiler_renameProperty('_importPath', this))) {\n            const module = Polymer.DomModule.import(this.is);\n            this._importPath = module ? module.assetpath : '' ||\n            Object.getPrototypeOf(this.prototype).constructor.importPath;\n        }\n        return this._importPath;\n      }\n\n      /**\n       * Overrides the default `Polymer.PropertyAccessors` to ensure class\n       * metaprogramming related to property accessors and effects has\n       * completed (calls `finalize`).\n       *\n       * It also initializes any property defaults provided via `value` in\n       * `properties` metadata.\n       *\n       * @override\n       */\n      _initializeProperties() {\n        Polymer.telemetry.instanceCount++;\n        this.constructor.finalize();\n        const importPath = this.constructor.importPath;\n        // note: finalize template when we have access to `localName` to\n        // avoid dependence on `is` for polyfilling styling.\n        if (this._template && !this._template.__polymerFinalized) {\n          this._template.__polymerFinalized = true;\n          const baseURI =\n            importPath ? Polymer.ResolveUrl.resolveUrl(importPath) : '';\n          finalizeTemplate(this.__proto__, this._template, baseURI,\n            this.localName);\n        }\n        super._initializeProperties();\n        // set path defaults\n        this.rootPath = Polymer.rootPath;\n        this.importPath = importPath;\n        // apply property defaults...\n        let p$ = propertyDefaultsForClass(this.constructor);\n        if (!p$) {\n          return;\n        }\n        for (let p in p$) {\n          let info = p$[p];\n          // Don't set default value if there is already an own property, which\n          // happens when a `properties` property with default but no effects had\n          // a property set (e.g. bound) by its host before upgrade\n          if (!this.hasOwnProperty(p)) {\n            let value = typeof info.value == 'function' ?\n              info.value.call(this) :\n              info.value;\n            // Set via `_setProperty` if there is an accessor, to enable\n            // initializing readOnly property defaults\n            if (this._hasAccessor(p)) {\n              this._setPendingProperty(p, value, true);\n            } else {\n              this[p] = value;\n            }\n          }\n        }\n      }\n\n      /**\n       * Provides a default implementation of the standard Custom Elements\n       * `connectedCallback`.\n       *\n       * The default implementation enables the property effects system and\n       * flushes any pending properties, and updates shimmed CSS properties\n       * when using the ShadyCSS scoping/custom properties polyfill.\n       *\n       * @override\n       */\n      connectedCallback() {\n        if (window.ShadyCSS && this._template) {\n          window.ShadyCSS.styleElement(this);\n        }\n        this._enableProperties();\n      }\n\n      /**\n       * Provides a default implementation of the standard Custom Elements\n       * `disconnectedCallback`.\n       *\n       * @override\n       */\n      disconnectedCallback() {}\n\n      /**\n       * Stamps the element template.\n       *\n       * @override\n       */\n      ready() {\n        if (this._template) {\n          this.root = this._stampTemplate(this._template);\n          this.$ = this.root.$;\n        }\n        super.ready();\n      }\n\n      /**\n       * Implements `PropertyEffects`'s `_readyClients` call. Attaches\n       * element dom by calling `_attachDom` with the dom stamped from the\n       * element's template via `_stampTemplate`. Note that this allows\n       * client dom to be attached to the element prior to any observers\n       * running.\n       *\n       * @override\n       */\n      _readyClients() {\n        if (this._template) {\n          this.root = this._attachDom(this.root);\n        }\n        // The super._readyClients here sets the clients initialized flag.\n        // We must wait to do this until after client dom is created/attached\n        // so that this flag can be checked to prevent notifications fired\n        // during this process from being handled before clients are ready.\n        super._readyClients();\n      }\n\n\n      /**\n       * Attaches an element's stamped dom to itself. By default,\n       * this method creates a `shadowRoot` and adds the dom to it.\n       * However, this method may be overridden to allow an element\n       * to put its dom in another location.\n       *\n       * @throws {Error}\n       * @suppress {missingReturn}\n       * @param {NodeList} dom to attach to the element.\n       * @return {Node} node to which the dom has been attached.\n       */\n      _attachDom(dom) {\n        if (this.attachShadow) {\n          if (dom) {\n            if (!this.shadowRoot) {\n              this.attachShadow({mode: 'open'});\n            }\n            this.shadowRoot.appendChild(dom);\n            return this.shadowRoot;\n          }\n        } else {\n          throw new Error('ShadowDOM not available. ' +\n            // TODO(sorvell): move to compile-time conditional when supported\n          'Polymer.Element can create dom as children instead of in ' +\n          'ShadowDOM by setting `this.root = this;\\` before \\`ready\\`.');\n        }\n      }\n\n      /**\n       * Provides a default implementation of the standard Custom Elements\n       * `attributeChangedCallback`.\n       *\n       * By default, attributes declared in `properties` metadata are\n       * deserialized using their `type` information to properties of the\n       * same name.  \"Dash-cased\" attributes are deserialzed to \"camelCase\"\n       * properties.\n       *\n       * @override\n       */\n      attributeChangedCallback(name, old, value) {\n        if (old !== value) {\n          let property = caseMap.dashToCamelCase(name);\n          let type = propertiesForClass(this.constructor)[property].type;\n          if (!this._hasReadOnlyEffect(property)) {\n            this._attributeToProperty(name, value, type);\n          }\n        }\n      }\n\n      /**\n       * When using the ShadyCSS scoping and custom property shim, causes all\n       * shimmed styles in this element (and its subtree) to be updated\n       * based on current custom property values.\n       *\n       * The optional parameter overrides inline custom property styles with an\n       * object of properties where the keys are CSS properties, and the values\n       * are strings.\n       *\n       * Example: `this.updateStyles({'--color': 'blue'})`\n       *\n       * These properties are retained unless a value of `null` is set.\n       *\n       * @param {Object=} properties Bag of custom property key/values to\n       *   apply to this element.\n       */\n      updateStyles(properties) {\n        if (window.ShadyCSS) {\n          window.ShadyCSS.styleSubtree(this, properties);\n        }\n      }\n\n      /**\n       * Rewrites a given URL relative to a base URL. The base URL defaults to\n       * the original location of the document containing the `dom-module` for\n       * this element. This method will return the same URL before and after\n       * bundling.\n       *\n       * @param {string} url URL to resolve.\n       * @param {string=} base Optional base URL to resolve against, defaults\n       * to the element's `importPath`\n       * @return {string} Rewritten URL relative to base\n       */\n      resolveUrl(url, base) {\n        if (!base && this.importPath) {\n          base = Polymer.ResolveUrl.resolveUrl(this.importPath);\n        }\n        return Polymer.ResolveUrl.resolveUrl(url, base);\n      }\n\n      /**\n       * Overrides `PropertyAccessors` to add map of dynamic functions on\n       * template info, for consumption by `PropertyEffects` template binding\n       * code. This map determines which method templates should have accessors\n       * created for them.\n       *\n       * @override\n       */\n      static _parseTemplateContent(template, templateInfo, nodeInfo) {\n        templateInfo.dynamicFns = templateInfo.dynamicFns || propertiesForClass(this);\n        return super._parseTemplateContent(template, templateInfo, nodeInfo);\n      }\n\n    }\n\n    return PolymerElement;\n  });\n\n  /**\n   * Provides basic tracking of element definitions (registrations) and\n   * instance counts.\n   *\n   * @namespace\n   * @summary Provides basic tracking of element definitions (registrations) and\n   * instance counts.\n   */\n  Polymer.telemetry = {\n    /**\n     * Total number of Polymer element instances created.\n     * @type {number}\n     */\n    instanceCount: 0,\n    /**\n     * Array of Polymer element classes that have been finalized.\n     * @type {Array<Polymer.Element>}\n     */\n    registrations: [],\n    /**\n     * @param {HTMLElement} prototype Element prototype to log\n     * @private\n     */\n    _regLog: function(prototype) {\n      console.log('[' + prototype.is + ']: registered')\n    },\n    /**\n     * Registers a class prototype for telemetry purposes.\n     * @param {HTMLElement} prototype Element prototype to register\n     * @protected\n     */\n    register: function(prototype) {\n      this.registrations.push(prototype);\n      Polymer.log && this._regLog(prototype);\n    },\n    /**\n     * Logs all elements registered with an `is` to the console.\n     * @public\n     */\n    dumpRegistrations: function() {\n      this.registrations.forEach(this._regLog);\n    }\n  };\n\n  /**\n   * When using the ShadyCSS scoping and custom property shim, causes all\n   * shimmed `styles` (via `custom-style`) in the document (and its subtree)\n   * to be updated based on current custom property values.\n   *\n   * The optional parameter overrides inline custom property styles with an\n   * object of properties where the keys are CSS properties, and the values\n   * are strings.\n   *\n   * Example: `Polymer.updateStyles({'--color': 'blue'})`\n   *\n   * These properties are retained unless a value of `null` is set.\n   *\n   * @param {Object=} props Bag of custom property key/values to\n   *   apply to the document.\n   */\n  Polymer.updateStyles = function(props) {\n    if (window.ShadyCSS) {\n      window.ShadyCSS.styleDocument(props);\n    }\n  };\n\n})();\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/mixins/element-mixin.html\n// module id = 12\n// module chunks = 0","/*__wc__loader*/\nrequire('../utils/boot.html');\n\nrequire('../utils/gestures.html');\n\n\n(function() {\n\n  'use strict';\n\n  const gestures = Polymer.Gestures;\n\n  /**\n   * Element class mixin that provides API for adding Polymer's cross-platform\n   * gesture events to nodes.\n   *\n   * The API is designed to be compatible with override points implemented\n   * in `Polymer.TemplateStamp` such that declarative event listeners in\n   * templates will support gesture events when this mixin is applied along with\n   * `Polymer.TemplateStamp`.\n   *\n   * @polymerMixin\n   * @memberof Polymer\n   * @summary Element class mixin that provides API for adding Polymer's cross-platform\n   * gesture events to nodes\n   */\n  Polymer.GestureEventListeners = Polymer.dedupingMixin(superClass => {\n\n    /**\n     * @polymerMixinClass\n     * @implements {Polymer_GestureEventListeners}\n     */\n    class GestureEventListeners extends superClass {\n\n      _addEventListenerToNode(node, eventName, handler) {\n        if (!gestures.addListener(node, eventName, handler)) {\n          super._addEventListenerToNode(node, eventName, handler);\n        }\n      }\n\n      _removeEventListenerFromNode(node, eventName, handler) {\n        if (!gestures.removeListener(node, eventName, handler)) {\n          super._removeEventListenerFromNode(node, eventName, handler);\n        }\n      }\n\n    }\n\n    return GestureEventListeners;\n\n  });\n\n})();\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/mixins/gesture-event-listeners.html\n// module id = 13\n// module chunks = 0","/*__wc__loader*/\nrequire('./boot.html');\n\n\n(function() {\n\n  'use strict';\n\n  function newSplice(index, removed, addedCount) {\n    return {\n      index: index,\n      removed: removed,\n      addedCount: addedCount\n    };\n  }\n\n  const EDIT_LEAVE = 0;\n  const EDIT_UPDATE = 1;\n  const EDIT_ADD = 2;\n  const EDIT_DELETE = 3;\n\n  const ArraySplice = {\n\n    // Note: This function is *based* on the computation of the Levenshtein\n    // \"edit\" distance. The one change is that \"updates\" are treated as two\n    // edits - not one. With Array splices, an update is really a delete\n    // followed by an add. By retaining this, we optimize for \"keeping\" the\n    // maximum array items in the original array. For example:\n    //\n    //   'xxxx123' -> '123yyyy'\n    //\n    // With 1-edit updates, the shortest path would be just to update all seven\n    // characters. With 2-edit updates, we delete 4, leave 3, and add 4. This\n    // leaves the substring '123' intact.\n    calcEditDistances(current, currentStart, currentEnd,\n                                old, oldStart, oldEnd) {\n      // \"Deletion\" columns\n      let rowCount = oldEnd - oldStart + 1;\n      let columnCount = currentEnd - currentStart + 1;\n      let distances = new Array(rowCount);\n\n      // \"Addition\" rows. Initialize null column.\n      for (let i = 0; i < rowCount; i++) {\n        distances[i] = new Array(columnCount);\n        distances[i][0] = i;\n      }\n\n      // Initialize null row\n      for (let j = 0; j < columnCount; j++)\n        distances[0][j] = j;\n\n      for (let i = 1; i < rowCount; i++) {\n        for (let j = 1; j < columnCount; j++) {\n          if (this.equals(current[currentStart + j - 1], old[oldStart + i - 1]))\n            distances[i][j] = distances[i - 1][j - 1];\n          else {\n            let north = distances[i - 1][j] + 1;\n            let west = distances[i][j - 1] + 1;\n            distances[i][j] = north < west ? north : west;\n          }\n        }\n      }\n\n      return distances;\n    },\n\n    // This starts at the final weight, and walks \"backward\" by finding\n    // the minimum previous weight recursively until the origin of the weight\n    // matrix.\n    spliceOperationsFromEditDistances(distances) {\n      let i = distances.length - 1;\n      let j = distances[0].length - 1;\n      let current = distances[i][j];\n      let edits = [];\n      while (i > 0 || j > 0) {\n        if (i == 0) {\n          edits.push(EDIT_ADD);\n          j--;\n          continue;\n        }\n        if (j == 0) {\n          edits.push(EDIT_DELETE);\n          i--;\n          continue;\n        }\n        let northWest = distances[i - 1][j - 1];\n        let west = distances[i - 1][j];\n        let north = distances[i][j - 1];\n\n        let min;\n        if (west < north)\n          min = west < northWest ? west : northWest;\n        else\n          min = north < northWest ? north : northWest;\n\n        if (min == northWest) {\n          if (northWest == current) {\n            edits.push(EDIT_LEAVE);\n          } else {\n            edits.push(EDIT_UPDATE);\n            current = northWest;\n          }\n          i--;\n          j--;\n        } else if (min == west) {\n          edits.push(EDIT_DELETE);\n          i--;\n          current = west;\n        } else {\n          edits.push(EDIT_ADD);\n          j--;\n          current = north;\n        }\n      }\n\n      edits.reverse();\n      return edits;\n    },\n\n    /**\n     * Splice Projection functions:\n     *\n     * A splice map is a representation of how a previous array of items\n     * was transformed into a new array of items. Conceptually it is a list of\n     * tuples of\n     *\n     *   <index, removed, addedCount>\n     *\n     * which are kept in ascending index order of. The tuple represents that at\n     * the |index|, |removed| sequence of items were removed, and counting forward\n     * from |index|, |addedCount| items were added.\n     */\n\n    /**\n     * Lacking individual splice mutation information, the minimal set of\n     * splices can be synthesized given the previous state and final state of an\n     * array. The basic approach is to calculate the edit distance matrix and\n     * choose the shortest path through it.\n     *\n     * Complexity: O(l * p)\n     *   l: The length of the current array\n     *   p: The length of the old array\n     *\n     * @param {Array} current The current \"changed\" array for which to\n     * calculate splices.\n     * @param {number} currentStart Starting index in the `current` array for\n     * which splices are calculated.\n     * @param {number} currentEnd Ending index in the `current` array for\n     * which splices are calculated.\n     * @param {Array} old The original \"unchanged\" array to compare `current`\n     * against to determine splices.\n     * @param {number} oldStart Starting index in the `old` array for\n     * which splices are calculated.\n     * @param {number} oldEnd Ending index in the `old` array for\n     * which splices are calculated.\n     * @return {Array} Returns an array of splice record objects. Each of these\n     * contains: `index` the location where the splice occurred; `removed`\n     * the array of removed items from this location; `addedCount` the number\n     * of items added at this location.\n     */\n    calcSplices(current, currentStart, currentEnd,\n                          old, oldStart, oldEnd) {\n      let prefixCount = 0;\n      let suffixCount = 0;\n      let splice;\n\n      let minLength = Math.min(currentEnd - currentStart, oldEnd - oldStart);\n      if (currentStart == 0 && oldStart == 0)\n        prefixCount = this.sharedPrefix(current, old, minLength);\n\n      if (currentEnd == current.length && oldEnd == old.length)\n        suffixCount = this.sharedSuffix(current, old, minLength - prefixCount);\n\n      currentStart += prefixCount;\n      oldStart += prefixCount;\n      currentEnd -= suffixCount;\n      oldEnd -= suffixCount;\n\n      if (currentEnd - currentStart == 0 && oldEnd - oldStart == 0)\n        return [];\n\n      if (currentStart == currentEnd) {\n        splice = newSplice(currentStart, [], 0);\n        while (oldStart < oldEnd)\n          splice.removed.push(old[oldStart++]);\n\n        return [ splice ];\n      } else if (oldStart == oldEnd)\n        return [ newSplice(currentStart, [], currentEnd - currentStart) ];\n\n      let ops = this.spliceOperationsFromEditDistances(\n          this.calcEditDistances(current, currentStart, currentEnd,\n                                 old, oldStart, oldEnd));\n\n      splice = undefined;\n      let splices = [];\n      let index = currentStart;\n      let oldIndex = oldStart;\n      for (let i = 0; i < ops.length; i++) {\n        switch(ops[i]) {\n          case EDIT_LEAVE:\n            if (splice) {\n              splices.push(splice);\n              splice = undefined;\n            }\n\n            index++;\n            oldIndex++;\n            break;\n          case EDIT_UPDATE:\n            if (!splice)\n              splice = newSplice(index, [], 0);\n\n            splice.addedCount++;\n            index++;\n\n            splice.removed.push(old[oldIndex]);\n            oldIndex++;\n            break;\n          case EDIT_ADD:\n            if (!splice)\n              splice = newSplice(index, [], 0);\n\n            splice.addedCount++;\n            index++;\n            break;\n          case EDIT_DELETE:\n            if (!splice)\n              splice = newSplice(index, [], 0);\n\n            splice.removed.push(old[oldIndex]);\n            oldIndex++;\n            break;\n        }\n      }\n\n      if (splice) {\n        splices.push(splice);\n      }\n      return splices;\n    },\n\n    sharedPrefix(current, old, searchLength) {\n      for (let i = 0; i < searchLength; i++)\n        if (!this.equals(current[i], old[i]))\n          return i;\n      return searchLength;\n    },\n\n    sharedSuffix(current, old, searchLength) {\n      let index1 = current.length;\n      let index2 = old.length;\n      let count = 0;\n      while (count < searchLength && this.equals(current[--index1], old[--index2]))\n        count++;\n\n      return count;\n    },\n\n    calculateSplices(current, previous) {\n      return this.calcSplices(current, 0, current.length, previous, 0,\n                              previous.length);\n    },\n\n    equals(currentValue, previousValue) {\n      return currentValue === previousValue;\n    }\n\n  };\n\n  /**\n   * @namespace\n   * @memberof Polymer\n   * @summary Module that provides utilities for diffing arrays.\n   */\n  Polymer.ArraySplice = {\n    /**\n     * Returns an array of splice records indicating the minimum edits required\n     * to transform the `previous` array into the `current` array.\n     *\n     * Splice records are ordered by index and contain the following fields:\n     * - `index`: index where edit started\n     * - `removed`: array of removed items from this index\n     * - `addedCount`: number of items added at this index\n     *\n     * This function is based on the Levenshtein \"minimum edit distance\"\n     * algorithm. Note that updates are treated as removal followed by addition.\n     *\n     * The worst-case time complexity of this algorithm is `O(l * p)`\n     *   l: The length of the current array\n     *   p: The length of the previous array\n     *\n     * However, the worst-case complexity is reduced by an `O(n)` optimization\n     * to detect any shared prefix & suffix between the two arrays and only\n     * perform the more expensive minimum edit distance calculation over the\n     * non-shared portions of the arrays.\n     *\n     * @memberof Polymer.ArraySplice\n     * @param {Array} current The \"changed\" array for which splices will be\n     * calculated.\n     * @param {Array} previous The \"unchanged\" original array to compare\n     * `current` against to determine the splices.\n     * @return {Array} Returns an array of splice record objects. Each of these\n     * contains: `index` the location where the splice occurred; `removed`\n     * the array of removed items from this location; `addedCount` the number\n     * of items added at this location.\n     */\n    calculateSplices(current, previous) {\n      return ArraySplice.calculateSplices(current, previous);\n    }\n  }\n\n})();\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/utils/array-splice.html\n// module id = 14\n// module chunks = 0","/*__wc__loader*/\nrequire('../utils/boot.html');\n\nrequire('../utils/resolve-url.html');\n\n\n(function() {\n  'use strict';\n\n  /**\n   * Legacy settings.\n   * @namespace\n   * @memberof Polymer\n   */\n  const settings = Polymer.Settings || {};\n  settings.useShadow = !(window.ShadyDOM);\n  settings.useNativeCSSProperties =\n    Boolean(!window.ShadyCSS || window.ShadyCSS.nativeCss);\n  settings.useNativeCustomElements =\n    !(window.customElements.polyfillWrapFlushCallback);\n\n  /**\n   * Sets the global, legacy settings.\n   *\n   * @deprecated\n   * @memberof Polymer\n   */\n  Polymer.Settings = settings;\n\n  /**\n   * Globally settable property that is automatically assigned to\n   * `Polymer.ElementMixin` instances, useful for binding in templates to\n   * make URL's relative to an application's root.  Defaults to the main\n   * document URL, but can be overridden by users.  It may be useful to set\n   * `Polymer.rootPath` to provide a stable application mount path when\n   * using client side routing.\n   *\n   * @memberof Polymer\n   */\n  let rootPath = Polymer.rootPath ||\n    Polymer.ResolveUrl.pathFromUrl(document.baseURI || window.location.href);\n\n  Polymer.rootPath = rootPath;\n\n  /**\n   * Sets the global rootPath property used by `Polymer.ElementMixin` and\n   * available via `Polymer.rootPath`.\n   * \n   * @memberof Polymer\n   * @param {string} path The new root path\n   */\n  Polymer.setRootPath = function(path) {\n    Polymer.rootPath = path;\n  }\n})();\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/utils/settings.html\n// module id = 15\n// module chunks = 0","/*__wc__loader*/\nrequire('./resolve-url.html');\n\n\n(function() {\n  'use strict';\n\n  const MODULE_STYLE_LINK_SELECTOR = 'link[rel=import][type~=css]';\n  const INCLUDE_ATTR = 'include';\n\n  function importModule(moduleId) {\n    if (!Polymer.DomModule) {\n      return null;\n    }\n    return Polymer.DomModule.import(moduleId);\n  }\n\n  /**\n   * Module with utilities for collection CSS text from `<templates>`, external\n   * stylesheets, and `dom-module`s.\n   *\n   * @namespace\n   * @memberof Polymer\n   * @summary Module with utilities for collection CSS text from various sources.\n   */\n  const StyleGather = {\n\n    /**\n     * Returns CSS text of styles in a space-separated list of `dom-module`s.\n     *\n     * @memberof Polymer.StyleGather\n     * @param {string} moduleIds List of dom-module id's within which to\n     * search for css.\n     * @return {string} Concatenated CSS content from specified `dom-module`s\n     */\n    cssFromModules(moduleIds) {\n      let modules = moduleIds.trim().split(' ');\n      let cssText = '';\n      for (let i=0; i < modules.length; i++) {\n        cssText += this.cssFromModule(modules[i]);\n      }\n      return cssText;\n    },\n\n    /**\n     * Returns CSS text of styles in a given `dom-module`.  CSS in a `dom-module`\n     * can come either from `<style>`s within the first `<template>`, or else\n     * from one or more `<link rel=\"import\" type=\"css\">` links outside the\n     * template.\n     *\n     * Any `<styles>` processed are removed from their original location.\n     *\n     * @memberof Polymer.StyleGather\n     * @param {string} moduleId dom-module id to gather styles from\n     * @return {string} Concatenated CSS content from specified `dom-module`\n     */\n    cssFromModule(moduleId) {\n      let m = importModule(moduleId);\n      if (m && m._cssText === undefined) {\n        let cssText = '';\n        // include css from the first template in the module\n        let t = m.querySelector('template');\n        if (t) {\n          cssText += this.cssFromTemplate(t, m.assetpath);\n        }\n        // module imports: <link rel=\"import\" type=\"css\">\n        cssText += this.cssFromModuleImports(moduleId);\n        m._cssText = cssText || null;\n      }\n      if (!m) {\n        console.warn('Could not find style data in module named', moduleId);\n      }\n      return m && m._cssText || '';\n    },\n\n    /**\n     * Returns CSS text of `<styles>` within a given template.\n     *\n     * Any `<styles>` processed are removed from their original location.\n     *\n     * @memberof Polymer.StyleGather\n     * @param {HTMLTemplateElement} template Template to gather styles from\n     * @param {string} baseURI Base URI to resolve the URL against\n     * @return {string} Concatenated CSS content from specified template\n     */\n    cssFromTemplate(template, baseURI) {\n      let cssText = '';\n      // if element is a template, get content from its .content\n      let e$ = template.content.querySelectorAll('style');\n      for (let i=0; i < e$.length; i++) {\n        let e = e$[i];\n        // support style sharing by allowing styles to \"include\"\n        // other dom-modules that contain styling\n        let include = e.getAttribute(INCLUDE_ATTR);\n        if (include) {\n          cssText += this.cssFromModules(include);\n        }\n        e.parentNode.removeChild(e);\n        cssText += baseURI ?\n          Polymer.ResolveUrl.resolveCss(e.textContent, baseURI) : e.textContent;\n      }\n      return cssText;\n    },\n\n    /**\n     * Returns CSS text from stylsheets loaded via `<link rel=\"import\" type=\"css\">`\n     * links within the specified `dom-module`.\n     *\n     * @memberof Polymer.StyleGather\n     * @param {string} moduleId Id of `dom-module` to gather CSS from\n     * @return {string} Concatenated CSS content from links in specified `dom-module`\n     */\n    cssFromModuleImports(moduleId) {\n      let cssText = '';\n      let m = importModule(moduleId);\n      if (!m) {\n        return cssText;\n      }\n      let p$ = m.querySelectorAll(MODULE_STYLE_LINK_SELECTOR);\n      for (let i=0; i < p$.length; i++) {\n        let p = p$[i];\n        if (p.import) {\n          let importDoc = p.import;\n          // NOTE: polyfill affordance.\n          // under the HTMLImports polyfill, there will be no 'body',\n          // but the import pseudo-doc can be used directly.\n          let container = importDoc.body ? importDoc.body : importDoc;\n          cssText +=\n            Polymer.ResolveUrl.resolveCss(container.textContent,\n              importDoc.baseURI);\n        }\n      }\n      return cssText;\n    }\n  };\n\n  Polymer.StyleGather = StyleGather;\n})();\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/utils/style-gather.html\n// module id = 16\n// module chunks = 0","/*__wc__loader*/\nrequire('./lib/legacy/legacy-element-mixin.html');\n\nrequire('./lib/legacy/polymer-fn.html');\n\nrequire('./lib/legacy/templatizer-behavior.html');\n\nrequire('./lib/elements/dom-bind.html');\n\nrequire('./lib/elements/dom-repeat.html');\n\nrequire('./lib/elements/dom-if.html');\n\nrequire('./lib/elements/array-selector.html');\n\nrequire('./lib/elements/custom-style.html');\n\nrequire('./lib/legacy/mutable-data-behavior.html');\n\n\n  // bc\n  Polymer.Base = Polymer.LegacyElementMixin(HTMLElement).prototype;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./polymer.html\n// module id = 17\n// module chunks = 0","(function(){/*\n\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n'use strict';var k={};function n(){this.end=this.start=0;this.rules=this.parent=this.previous=null;this.cssText=this.parsedCssText=\"\";this.atRule=!1;this.type=0;this.parsedSelector=this.selector=this.keyframesName=\"\"}\nfunction p(a){a=a.replace(aa,\"\").replace(ba,\"\");var b=q,c=a,d=new n;d.start=0;d.end=c.length;for(var e=d,f=0,h=c.length;f<h;f++)if(\"{\"===c[f]){e.rules||(e.rules=[]);var g=e,m=g.rules[g.rules.length-1]||null,e=new n;e.start=f+1;e.parent=g;e.previous=m;g.rules.push(e)}else\"}\"===c[f]&&(e.end=f+1,e=e.parent||d);return b(d,a)}\nfunction q(a,b){var c=b.substring(a.start,a.end-1);a.parsedCssText=a.cssText=c.trim();a.parent&&((c=b.substring(a.previous?a.previous.end:a.parent.start,a.start-1),c=ca(c),c=c.replace(r,\" \"),c=c.substring(c.lastIndexOf(\";\")+1),c=a.parsedSelector=a.selector=c.trim(),a.atRule=!c.indexOf(\"@\"),a.atRule)?c.indexOf(\"@media\")?c.match(da)&&(a.type=u,a.keyframesName=a.selector.split(r).pop()):a.type=t:a.type=c.indexOf(\"--\")?v:x);if(c=a.rules)for(var d=0,e=c.length,f;d<e&&(f=c[d]);d++)q(f,b);return a}\nfunction ca(a){return a.replace(/\\\\([0-9a-f]{1,6})\\s/gi,function(a,c){a=c;for(c=6-a.length;c--;)a=\"0\"+a;return\"\\\\\"+a})}\nfunction y(a,b,c){c=void 0===c?\"\":c;var d=\"\";if(a.cssText||a.rules){var e=a.rules,f;if(f=e)f=e[0],f=!(f&&f.selector&&0===f.selector.indexOf(\"--\"));if(f){f=0;for(var h=e.length,g;f<h&&(g=e[f]);f++)d=y(g,b,d)}else b?b=a.cssText:(b=a.cssText,b=b.replace(ea,\"\").replace(fa,\"\"),b=b.replace(ga,\"\").replace(ha,\"\")),(d=b.trim())&&(d=\"  \"+d+\"\\n\")}d&&(a.selector&&(c+=a.selector+\" {\\n\"),c+=d,a.selector&&(c+=\"}\\n\\n\"));return c}\nvar v=1,u=7,t=4,x=1E3,aa=/\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//gim,ba=/@import[^;]*;/gim,ea=/(?:^[^;\\-\\s}]+)?--[^;{}]*?:[^{};]*?(?:[;\\n]|$)/gim,fa=/(?:^[^;\\-\\s}]+)?--[^;{}]*?:[^{};]*?{[^}]*?}(?:[;\\n]|$)?/gim,ga=/@apply\\s*\\(?[^);]*\\)?\\s*(?:[;\\n]|$)?/gim,ha=/[^;:]*?:[^;]*?var\\([^;]*\\)(?:[;\\n]|$)?/gim,da=/^@[^\\s]*keyframes/,r=/\\s+/g;var ia=Promise.resolve();function ja(a){if(a=k[a])a._applyShimCurrentVersion=a._applyShimCurrentVersion||0,a._applyShimValidatingVersion=a._applyShimValidatingVersion||0,a._applyShimNextVersion=(a._applyShimNextVersion||0)+1}function z(a){return a._applyShimCurrentVersion===a._applyShimNextVersion}function ka(a){a._applyShimValidatingVersion=a._applyShimNextVersion;a.a||(a.a=!0,ia.then(function(){a._applyShimCurrentVersion=a._applyShimNextVersion;a.a=!1}))};var A=/(?:^|[;\\s{]\\s*)(--[\\w-]*?)\\s*:\\s*(?:((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^\\)]*?\\)|[^};{])+)|\\{([^\\}]*)\\}(?:(?=[;\\s}])|$))/gi,B=/(?:^|\\W+)@apply\\s*\\(?([^);\\n]*)\\)?/gi,la=/@media[^(]*(\\([^)]*\\))/;var C=!(window.ShadyDOM&&window.ShadyDOM.inUse),E;function F(a){E=a&&a.shimcssproperties?!1:C||!(navigator.userAgent.match(\"AppleWebKit/601\")||!window.CSS||!CSS.supports||!CSS.supports(\"box-shadow\",\"0 0 0 var(--foo)\"))}window.ShadyCSS&&void 0!==window.ShadyCSS.nativeCss?E=window.ShadyCSS.nativeCss:window.ShadyCSS?(F(window.ShadyCSS),window.ShadyCSS=void 0):F(window.WebComponents&&window.WebComponents.flags);var G=E;function H(a){if(!a)return\"\";\"string\"===typeof a&&(a=p(a));return y(a,G)}function I(a){!a.__cssRules&&a.textContent&&(a.__cssRules=p(a.textContent));return a.__cssRules||null}function J(a,b,c,d){if(a){var e=!1,f=a.type;if(d&&f===t){var h=a.selector.match(la);h&&(window.matchMedia(h[1]).matches||(e=!0))}f===v?b(a):c&&f===u?c(a):f===x&&(e=!0);if((a=a.rules)&&!e)for(var e=0,f=a.length,g;e<f&&(g=a[e]);e++)J(g,b,c,d)}}\nfunction K(a,b){var c=a.indexOf(\"var(\");if(-1===c)return b(a,\"\",\"\",\"\");a:{var d=0;var e=c+3;for(var f=a.length;e<f;e++)if(\"(\"===a[e])d++;else if(\")\"===a[e]&&!--d)break a;e=-1}d=a.substring(c+4,e);c=a.substring(0,c);a=K(a.substring(e+1),b);e=d.indexOf(\",\");return-1===e?b(c,d.trim(),\"\",a):b(c,d.substring(0,e).trim(),d.substring(e+1).trim(),a)};var ma=/;\\s*/m,na=/^\\s*(initial)|(inherit)\\s*$/;function L(){this.a={}}L.prototype.set=function(a,b){a=a.trim();this.a[a]={h:b,i:{}}};L.prototype.get=function(a){a=a.trim();return this.a[a]||null};var M=null;function N(){this.b=this.c=null;this.a=new L}N.prototype.o=function(a){a=B.test(a)||A.test(a);B.lastIndex=0;A.lastIndex=0;return a};N.prototype.m=function(a,b){a=a.content.querySelector(\"style\");var c=null;a&&(c=this.j(a,b));return c};\nN.prototype.j=function(a,b){b=void 0===b?\"\":b;var c=I(a);this.l(c,b);a.textContent=H(c);return c};N.prototype.f=function(a){var b=this,c=I(a);J(c,function(a){\":root\"===a.selector&&(a.selector=\"html\");b.g(a)});a.textContent=H(c);return c};N.prototype.l=function(a,b){var c=this;this.c=b;J(a,function(a){c.g(a)});this.c=null};N.prototype.g=function(a){a.cssText=oa(this,a.parsedCssText);\":root\"===a.selector&&(a.selector=\":host > *\")};\nfunction oa(a,b){b=b.replace(A,function(b,d,e,f){return pa(a,b,d,e,f)});return O(a,b)}function O(a,b){for(var c;c=B.exec(b);){var d=c[0],e=c[1];c=c.index;var f=b.slice(0,c+d.indexOf(\"@apply\"));b=b.slice(c+d.length);var h=P(a,f),d=void 0;var g=a;var e=e.replace(ma,\"\"),m=[];var l=g.a.get(e);l||(g.a.set(e,{}),l=g.a.get(e));if(l)for(d in g.c&&(l.i[g.c]=!0),l.h)g=h&&h[d],l=[d,\": var(\",e,\"_-_\",d],g&&l.push(\",\",g),l.push(\")\"),m.push(l.join(\"\"));d=m.join(\"; \");b=\"\"+f+d+b;B.lastIndex=c+d.length}return b}\nfunction P(a,b){b=b.split(\";\");for(var c,d,e={},f=0,h;f<b.length;f++)if(c=b[f])if(h=c.split(\":\"),1<h.length){c=h[0].trim();var g=a;d=c;h=h.slice(1).join(\":\");var m=na.exec(h);m&&(m[1]?(g.b||(g.b=document.createElement(\"meta\"),g.b.setAttribute(\"apply-shim-measure\",\"\"),g.b.style.all=\"initial\",document.head.appendChild(g.b)),d=window.getComputedStyle(g.b).getPropertyValue(d)):d=\"apply-shim-inherit\",h=d);d=h;e[c]=d}return e}function qa(a,b){if(M)for(var c in b.i)c!==a.c&&M(c)}\nfunction pa(a,b,c,d,e){d&&K(d,function(b,c){c&&a.a.get(c)&&(e=\"@apply \"+c+\";\")});if(!e)return b;var f=O(a,e),h=b.slice(0,b.indexOf(\"--\")),g=f=P(a,f),m=a.a.get(c),l=m&&m.h;l?g=Object.assign(Object.create(l),f):a.a.set(c,g);var X=[],w,Y=!1;for(w in g){var D=f[w];void 0===D&&(D=\"initial\");!l||w in l||(Y=!0);X.push(\"\"+c+\"_-_\"+w+\": \"+D)}Y&&qa(a,m);m&&(m.h=g);d&&(h=b+\";\"+h);return\"\"+h+X.join(\"; \")+\";\"}N.prototype.detectMixin=N.prototype.o;N.prototype.transformStyle=N.prototype.j;\nN.prototype.transformCustomStyle=N.prototype.f;N.prototype.transformRules=N.prototype.l;N.prototype.transformRule=N.prototype.g;N.prototype.transformTemplate=N.prototype.m;N.prototype._separator=\"_-_\";Object.defineProperty(N.prototype,\"invalidCallback\",{get:function(){return M},set:function(a){M=a}});var Q=null,R=window.HTMLImports&&window.HTMLImports.whenReady||null,S;function ra(a){requestAnimationFrame(function(){R?R(a):(Q||(Q=new Promise(function(a){S=a}),\"complete\"===document.readyState?S():document.addEventListener(\"readystatechange\",function(){\"complete\"===document.readyState&&S()})),Q.then(function(){a&&a()}))})};var T=new N;function U(){var a=this;this.a=null;ra(function(){V(a)});T.invalidCallback=ja}function V(a){a.a||(a.a=window.ShadyCSS.CustomStyleInterface,a.a&&(a.a.transformCallback=function(a){T.f(a)},a.a.validateCallback=function(){requestAnimationFrame(function(){a.a.enqueued&&W(a)})}))}U.prototype.prepareTemplate=function(a,b){V(this);k[b]=a;b=T.m(a,b);a._styleAst=b};\nfunction W(a){V(a);if(a.a){var b=a.a.processStyles();if(a.a.enqueued){for(var c=0;c<b.length;c++){var d=a.a.getStyleForCustomStyle(b[c]);d&&T.f(d)}a.a.enqueued=!1}}}U.prototype.styleSubtree=function(a,b){V(this);if(b)for(var c in b)null===c?a.style.removeProperty(c):a.style.setProperty(c,b[c]);if(a.shadowRoot)for(this.styleElement(a),a=a.shadowRoot.children||a.shadowRoot.childNodes,b=0;b<a.length;b++)this.styleSubtree(a[b]);else for(a=a.children||a.childNodes,b=0;b<a.length;b++)this.styleSubtree(a[b])};\nU.prototype.styleElement=function(a){V(this);var b=a.localName,c;b?-1<b.indexOf(\"-\")?c=b:c=a.getAttribute&&a.getAttribute(\"is\")||\"\":c=a.is;if((b=k[c])&&!z(b)){if(z(b)||b._applyShimValidatingVersion!==b._applyShimNextVersion)this.prepareTemplate(b,c),ka(b);if(a=a.shadowRoot)if(a=a.querySelector(\"style\"))a.__cssRules=b._styleAst,a.textContent=H(b._styleAst)}};U.prototype.styleDocument=function(a){V(this);this.styleSubtree(document.body,a)};\nif(!window.ShadyCSS||!window.ShadyCSS.ScopingShim){var Z=new U,sa=window.ShadyCSS&&window.ShadyCSS.CustomStyleInterface;window.ShadyCSS={prepareTemplate:function(a,b){W(Z);Z.prepareTemplate(a,b)},styleSubtree:function(a,b){W(Z);Z.styleSubtree(a,b)},styleElement:function(a){W(Z);Z.styleElement(a)},styleDocument:function(a){W(Z);Z.styleDocument(a)},getComputedStyleValue:function(a,b){return(a=window.getComputedStyle(a).getPropertyValue(b))?a.trim():\"\"},nativeCss:G,nativeShadow:C};sa&&(window.ShadyCSS.CustomStyleInterface=\nsa)}window.ShadyCSS.ApplyShim=T;}).call(this);\n\n//# sourceMappingURL=apply-shim.min.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/@webcomponents/shadycss/apply-shim.min.js\n// module id = 18\n// module chunks = 0","(function(){/*\n\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n'use strict';var c=!(window.ShadyDOM&&window.ShadyDOM.inUse),f;function g(a){f=a&&a.shimcssproperties?!1:c||!(navigator.userAgent.match(\"AppleWebKit/601\")||!window.CSS||!CSS.supports||!CSS.supports(\"box-shadow\",\"0 0 0 var(--foo)\"))}window.ShadyCSS&&void 0!==window.ShadyCSS.nativeCss?f=window.ShadyCSS.nativeCss:window.ShadyCSS?(g(window.ShadyCSS),window.ShadyCSS=void 0):g(window.WebComponents&&window.WebComponents.flags);var h=f;function k(a,b){for(var d in b)null===d?a.style.removeProperty(d):a.style.setProperty(d,b[d])};var l=null,m=window.HTMLImports&&window.HTMLImports.whenReady||null,q;function r(){var a=t;requestAnimationFrame(function(){m?m(a):(l||(l=new Promise(function(a){q=a}),\"complete\"===document.readyState?q():document.addEventListener(\"readystatechange\",function(){\"complete\"===document.readyState&&q()})),l.then(function(){a&&a()}))})};var u=null,t=null;function v(){this.customStyles=[];this.enqueued=!1}function x(a){!a.enqueued&&t&&(a.enqueued=!0,r())}v.prototype.c=function(a){a.__seenByShadyCSS||(a.__seenByShadyCSS=!0,this.customStyles.push(a),x(this))};v.prototype.b=function(a){if(a.__shadyCSSCachedStyle)return a.__shadyCSSCachedStyle;var b;a.getStyle?b=a.getStyle():b=a;return b};\nv.prototype.a=function(){for(var a=this.customStyles,b=0;b<a.length;b++){var d=a[b];if(!d.__shadyCSSCachedStyle){var e=this.b(d);if(e){var n=e.__appliedElement;if(n)for(var p=0;p<e.attributes.length;p++){var w=e.attributes[p];n.setAttribute(w.name,w.value)}e=n||e;u&&u(e);d.__shadyCSSCachedStyle=e}}}return a};v.prototype.addCustomStyle=v.prototype.c;v.prototype.getStyleForCustomStyle=v.prototype.b;v.prototype.processStyles=v.prototype.a;\nObject.defineProperties(v.prototype,{transformCallback:{get:function(){return u},set:function(a){u=a}},validateCallback:{get:function(){return t},set:function(a){var b=!1;t||(b=!0);t=a;b&&x(this)}}});var y=new v;window.ShadyCSS||(window.ShadyCSS={prepareTemplate:function(){},styleSubtree:function(a,b){y.a();k(a,b)},styleElement:function(){y.a()},styleDocument:function(a){y.a();k(document.body,a)},getComputedStyleValue:function(a,b){return(a=window.getComputedStyle(a).getPropertyValue(b))?a.trim():\"\"},nativeCss:h,nativeShadow:c});window.ShadyCSS.CustomStyleInterface=y;}).call(this);\n\n//# sourceMappingURL=custom-style-interface.min.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/@webcomponents/shadycss/custom-style-interface.min.js\n// module id = 19\n// module chunks = 0","/*__wc__loader*/\nrequire('../../polymer-element.html');\n\nrequire('../utils/mixin.html');\n\nrequire('../utils/array-splice.html');\n\n\n(function() {\n  'use strict';\n\n  /**\n   * Element mixin for recording  dynamic associations between item paths in a\n   * master `items` array and a `selected` array such that path changes to the\n   * master array (at the host) element or elsewhere via data-binding) are\n   * correctly propagated to items in the selected array and vice-versa.\n   *\n   * The `items` property accepts an array of user data, and via the\n   * `select(item)` and `deselect(item)` API, updates the `selected` property\n   * which may be bound to other parts of the application, and any changes to\n   * sub-fields of `selected` item(s) will be kept in sync with items in the\n   * `items` array.  When `multi` is false, `selected` is a property\n   * representing the last selected item.  When `multi` is true, `selected`\n   * is an array of multiply selected items.\n   *\n   * @polymerMixin\n   * @memberof Polymer\n   */\n  let ArraySelectorMixin = Polymer.dedupingMixin(superClass => {\n\n    /**\n     * @polymerMixinClass\n     * @implements {Polymer_ArraySelectorMixin}\n     */\n    class ArraySelectorMixin extends superClass {\n\n      static get properties() {\n\n        return {\n\n          /**\n           * An array containing items from which selection will be made.\n           */\n          items: {\n            type: Array,\n          },\n\n          /**\n           * When `true`, multiple items may be selected at once (in this case,\n           * `selected` is an array of currently selected items).  When `false`,\n           * only one item may be selected at a time.\n           */\n          multi: {\n            type: Boolean,\n            value: false,\n          },\n\n          /**\n           * When `multi` is true, this is an array that contains any selected.\n           * When `multi` is false, this is the currently selected item, or `null`\n           * if no item is selected.\n           */\n          selected: {\n            type: Object,\n            notify: true\n          },\n\n          /**\n           * When `multi` is false, this is the currently selected item, or `null`\n           * if no item is selected.\n           */\n          selectedItem: {\n            type: Object,\n            notify: true\n          },\n\n          /**\n           * When `true`, calling `select` on an item that is already selected\n           * will deselect the item.\n           */\n          toggle: {\n            type: Boolean,\n            value: false\n          }\n\n        }\n      }\n\n      static get observers() {\n        return ['__updateSelection(multi, items.*)']\n      }\n\n      constructor() {\n        super();\n        this.__lastItems = null;\n        this.__lastMulti = null;\n        this.__selectedMap = null;\n      }\n\n      __updateSelection(multi, itemsInfo) {\n        let path = itemsInfo.path;\n        if (path == 'items') {\n          // Case 1 - items array changed, so diff against previous array and\n          // deselect any removed items and adjust selected indices\n          let newItems = itemsInfo.base || [];\n          let lastItems = this.__lastItems;\n          let lastMulti = this.__lastMulti;\n          if (multi !== lastMulti) {\n            this.clearSelection();\n          }\n          if (lastItems) {\n            let splices = Polymer.ArraySplice.calculateSplices(newItems, lastItems);\n            this.__applySplices(splices);\n          }\n          this.__lastItems = newItems;\n          this.__lastMulti = multi;\n        } else if (itemsInfo.path == 'items.splices') {\n          // Case 2 - got specific splice information describing the array mutation:\n          // deselect any removed items and adjust selected indices\n          this.__applySplices(itemsInfo.value.indexSplices);\n        } else {\n          // Case 3 - an array element was changed, so deselect the previous\n          // item for that index if it was previously selected\n          let part = path.slice('items.'.length);\n          let idx = parseInt(part, 10);\n          if ((part.indexOf('.') < 0) && part == idx) {\n            this.__deselectChangedIdx(idx);\n          }\n        }\n      }\n\n      __applySplices(splices) {\n        let selected = this.__selectedMap;\n        // Adjust selected indices and mark removals\n        for (let i=0; i<splices.length; i++) {\n          let s = splices[i];\n          selected.forEach((idx, item) => {\n            if (idx < s.index) {\n              // no change\n            } else if (idx >= s.index + s.removed.length) {\n              // adjust index\n              selected.set(item, idx + s.addedCount - s.removed.length);\n            } else {\n              // remove index\n              selected.set(item, -1);\n            }\n          });\n          for (let j=0; j<s.addedCount; j++) {\n            let idx = s.index + j;\n            if (selected.has(this.items[idx])) {\n              selected.set(this.items[idx], idx);\n            }\n          }\n        }\n        // Update linked paths\n        this.__updateLinks();\n        // Remove selected items that were removed from the items array\n        let sidx = 0;\n        selected.forEach((idx, item) => {\n          if (idx < 0) {\n            if (this.multi) {\n              this.splice('selected', sidx, 1);\n            } else {\n              this.selected = this.selectedItem = null;\n            }\n            selected.delete(item);\n          } else {\n            sidx++;\n          }\n        });\n      }\n\n      __updateLinks() {\n        this.__dataLinkedPaths = {};\n        if (this.multi) {\n          let sidx = 0;\n          this.__selectedMap.forEach(idx => {\n            if (idx >= 0) {\n              this.linkPaths('items.' + idx, 'selected.' + sidx++);\n            }\n          });\n        } else {\n          this.__selectedMap.forEach(idx => {\n            this.linkPaths('selected', 'items.' + idx);\n            this.linkPaths('selectedItem', 'items.' + idx);\n          });\n        }\n      }\n\n      /**\n       * Clears the selection state.\n       *\n       */\n      clearSelection() {\n        // Unbind previous selection\n        this.__dataLinkedPaths = {};\n        // The selected map stores 3 pieces of information:\n        // key: items array object\n        // value: items array index\n        // order: selected array index\n        this.__selectedMap = new Map();\n        // Initialize selection\n        this.selected = this.multi ? [] : null\n        this.selectedItem = null;\n      }\n\n      /**\n       * Returns whether the item is currently selected.\n       *\n       * @param {*} item Item from `items` array to test\n       * @return {boolean} Whether the item is selected\n       */\n      isSelected(item) {\n        return this.__selectedMap.has(item);\n      }\n\n      /**\n       * Returns whether the item is currently selected.\n       *\n       * @param {*} idx Index from `items` array to test\n       * @return {boolean} Whether the item is selected\n       */\n      isIndexSelected(idx) {\n        return this.isSelected(this.items[idx]);\n      }\n\n      __deselectChangedIdx(idx) {\n        let sidx = this.__selectedIndexForItemIndex(idx);\n        if (sidx >= 0) {\n          let i = 0;\n          this.__selectedMap.forEach((idx, item) => {\n            if (sidx == i++) {\n              this.deselect(item);\n            }\n          });\n        }\n      }\n\n      __selectedIndexForItemIndex(idx) {\n        let selected = this.__dataLinkedPaths['items.' + idx];\n        if (selected) {\n          return parseInt(selected.slice('selected.'.length), 10);\n        }\n      }\n\n      /**\n       * Deselects the given item if it is already selected.\n       *\n       * @param {*} item Item from `items` array to deselect\n       */\n      deselect(item) {\n        let idx = this.__selectedMap.get(item);\n        if (idx >= 0) {\n          this.__selectedMap.delete(item);\n          let sidx;\n          if (this.multi) {\n            sidx = this.__selectedIndexForItemIndex(idx);\n          }\n          this.__updateLinks();\n          if (this.multi) {\n            this.splice('selected', sidx, 1);\n          } else {\n            this.selected = this.selectedItem = null;\n          }\n        }\n      }\n\n      /**\n       * Deselects the given index if it is already selected.\n       *\n       * @param {number} idx Index from `items` array to deselect\n       */\n      deselectIndex(idx) {\n        this.deselect(this.items[idx]);\n      }\n\n      /**\n       * Selects the given item.  When `toggle` is true, this will automatically\n       * deselect the item if already selected.\n       *\n       * @param {*} item Item from `items` array to select\n       */\n      select(item) {\n        this.selectIndex(this.items.indexOf(item));\n      }\n\n      /**\n       * Selects the given index.  When `toggle` is true, this will automatically\n       * deselect the item if already selected.\n       *\n       * @param {number} idx Index from `items` array to select\n       */\n      selectIndex(idx) {\n        let item = this.items[idx];\n        if (!this.isSelected(item)) {\n          if (!this.multi) {\n            this.__selectedMap.clear();\n          }\n          this.__selectedMap.set(item, idx);\n          this.__updateLinks();\n          if (this.multi) {\n            this.push('selected', item);\n          } else {\n            this.selected = this.selectedItem = item;\n          }\n        } else if (this.toggle) {\n          this.deselectIndex(idx);\n        }\n      }\n\n    }\n\n    return ArraySelectorMixin;\n\n  });\n\n  // export mixin\n  Polymer.ArraySelectorMixin = ArraySelectorMixin;\n\n  /**\n   * @constructor\n   * @extends {Polymer.Element}\n   * @implements {Polymer_ArraySelectorMixin}\n   */\n  let baseArraySelector = ArraySelectorMixin(Polymer.Element);\n\n  /**\n   * Element implementing the `Polymer.ArraySelector` mixin, which records\n   * dynamic associations between item paths in a master `items` array and a\n   * `selected` array such that path changes to the master array (at the host)\n   * element or elsewhere via data-binding) are correctly propagated to items\n   * in the selected array and vice-versa.\n   *\n   * The `items` property accepts an array of user data, and via the\n   * `select(item)` and `deselect(item)` API, updates the `selected` property\n   * which may be bound to other parts of the application, and any changes to\n   * sub-fields of `selected` item(s) will be kept in sync with items in the\n   * `items` array.  When `multi` is false, `selected` is a property\n   * representing the last selected item.  When `multi` is true, `selected`\n   * is an array of multiply selected items.\n   *\n   * Example:\n   *\n   * ```html\n   * <dom-module id=\"employee-list\">\n   *\n   *   <template>\n   *\n   *     <div> Employee list: </div>\n   *     <template is=\"dom-repeat\" id=\"employeeList\" items=\"{{employees}}\">\n   *         <div>First name: <span>{{item.first}}</span></div>\n   *         <div>Last name: <span>{{item.last}}</span></div>\n   *         <button on-click=\"toggleSelection\">Select</button>\n   *     </template>\n   *\n   *     <array-selector id=\"selector\" items=\"{{employees}}\" selected=\"{{selected}}\" multi toggle></array-selector>\n   *\n   *     <div> Selected employees: </div>\n   *     <template is=\"dom-repeat\" items=\"{{selected}}\">\n   *         <div>First name: <span>{{item.first}}</span></div>\n   *         <div>Last name: <span>{{item.last}}</span></div>\n   *     </template>\n   *\n   *   </template>\n   *\n   * </dom-module>\n   * ```\n   *\n   * ```js\n   * Polymer({\n   *   is: 'employee-list',\n   *   ready() {\n   *     this.employees = [\n   *         {first: 'Bob', last: 'Smith'},\n   *         {first: 'Sally', last: 'Johnson'},\n   *         ...\n   *     ];\n   *   },\n   *   toggleSelection(e) {\n   *     let item = this.$.employeeList.itemForElement(e.target);\n   *     this.$.selector.select(item);\n   *   }\n   * });\n   * ```\n   *\n   * @polymerElement\n   * @extends Polymer.Element\n   * @mixes Polymer.ArraySelectorMixin\n   * @memberof Polymer\n   * @summary Custom element that links paths between an input `items` array and\n   *   an output `selected` item or array based on calls to its selection API.\n   */\n  class ArraySelector extends baseArraySelector {\n    // Not needed to find template; can be removed once the analyzer\n    // can find the tag name from customElements.define call\n    static get is() { return 'array-selector' }\n  }\n  customElements.define(ArraySelector.is, ArraySelector);\n  Polymer.ArraySelector = ArraySelector;\n\n})();\n\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/elements/array-selector.html\n// module id = 20\n// module chunks = 0","/*__wc__loader*/\nrequire('../../node_modules/@webcomponents/shadycss/custom-style-interface.html');\n\nrequire('../utils/style-gather.html');\n\n\n(function() {\n  'use strict';\n\n  const attr = 'include';\n\n  const CustomStyleInterface = window.ShadyCSS.CustomStyleInterface;\n\n  /**\n   * Custom element for defining styles in the main document that can take\n   * advantage of several special features of Polymer's styling system:\n   *\n   * - Document styles defined in a custom-style are shimmed to ensure they\n   *   do not leak into local DOM when running on browsers without native\n   *   Shadow DOM.\n   * - Custom properties used by Polymer's shim for cross-scope styling may\n   *   be defined in an custom-style. Use the :root selector to define custom\n   *   properties that apply to all custom elements.\n   *\n   * To use, simply wrap an inline `<style>` tag in the main document whose\n   * CSS uses these features with a `<custom-style>` element.\n   *\n   * @extends HTMLElement\n   * @memberof Polymer\n   * @summary Custom element for defining styles in the main document that can\n   *   take advantage of Polymer's style scoping and custom properties shims.\n   */\n  class CustomStyle extends HTMLElement {\n    constructor() {\n      super();\n      this._style = null;\n      CustomStyleInterface.addCustomStyle(this);\n    }\n    /**\n     * Returns the light-DOM `<style>` child this element wraps.  Upon first\n     * call any style modules referenced via the `include` attribute will be\n     * concatenated to this element's `<style>`.\n     *\n     * @return {HTMLStyleElement} This element's light-DOM `<style>`\n     */\n    getStyle() {\n      if (this._style) {\n        return this._style;\n      }\n      const style = this.querySelector('style');\n      if (!style) {\n        return;\n      }\n      this._style = style;\n      const include = style.getAttribute(attr);\n      if (include) {\n        style.removeAttribute(attr);\n        style.textContent = Polymer.StyleGather.cssFromModules(include) + style.textContent;\n      }\n      return this._style;\n    }\n  }\n\n  window.customElements.define('custom-style', CustomStyle);\n  Polymer.CustomStyle = CustomStyle;\n})();\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/elements/custom-style.html\n// module id = 21\n// module chunks = 0","/*__wc__loader*/\nrequire('../utils/boot.html');\n\nrequire('../mixins/property-effects.html');\n\nrequire('../mixins/mutable-data.html');\n\nrequire('../mixins/gesture-event-listeners.html');\n\n\n\n  (function() {\n    'use strict';\n\n    /**\n     * @constructor\n     * @implements {Polymer_PropertyEffects}\n     * @implements {Polymer_OptionalMutableData}\n     * @implements {Polymer_GestureEventListener}\n     * @extends {HTMLElement}\n     */\n    const domBindBase =\n      Polymer.GestureEventListeners(\n        Polymer.OptionalMutableData(\n          Polymer.PropertyEffects(HTMLElement)));\n\n    /**\n     * Custom element to allow using Polymer's template features (data binding,\n     * declarative event listeners, etc.) in the main document without defining\n     * a new custom element.\n     *\n     * `<template>` tags utilizing bindings may be wrapped with the `<dom-bind>`\n     * element, which will immediately stamp the wrapped template into the main\n     * document and bind elements to the `dom-bind` element itself as the\n     * binding scope.\n     *\n     * @extends HTMLElement\n     * @mixes Polymer.PropertyEffects\n     * @memberof Polymer\n     * @summary Custom element to allow using Polymer's template features (data\n     *   binding, declarative event listeners, etc.) in the main document.\n     */\n    class DomBind extends domBindBase {\n\n      static get observedAttributes() { return ['mutable-data'] }\n\n      // assumes only one observed attribute\n      attributeChangedCallback() {\n        this.mutableData = true;\n      }\n\n      connectedCallback() {\n        this.render();\n      }\n\n      disconnectedCallback() {\n        this.__removeChildren();\n      }\n\n      __insertChildren() {\n        this.parentNode.insertBefore(this.root, this);\n      }\n\n      __removeChildren() {\n        if (this.__children) {\n          for (let i=0; i<this.__children.length; i++) {\n            this.root.appendChild(this.__children[i]);\n          }\n        }\n      }\n\n      /**\n       * Forces the element to render its content. This is typically only\n       * necessary to call if HTMLImports with the async attribute are used.\n       */\n      render() {\n        let template;\n        if (!this.__children) {\n          template = template || this.querySelector('template');\n          if (!template) {\n            // Wait until childList changes and template should be there by then\n            let observer = new MutationObserver(() => {\n              template = this.querySelector('template');\n              if (template) {\n                observer.disconnect();\n                this.render(template);\n              } else {\n                throw new Error('dom-bind requires a <template> child');\n              }\n            })\n            observer.observe(this, {childList: true});\n            return;\n          }\n          this.root = this._stampTemplate(template);\n          this.$ = this.root.$;\n          this.__children = [];\n          for (let n=this.root.firstChild; n; n=n.nextSibling) {\n            this.__children[this.__children.length] = n;\n          }\n          this._enableProperties();\n        }\n        this.__insertChildren();\n        this.dispatchEvent(new CustomEvent('dom-change', {\n          bubbles: true,\n          composed: true\n        }));\n      }\n\n    }\n\n    customElements.define('dom-bind', DomBind);\n\n  })();\n\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/elements/dom-bind.html\n// module id = 22\n// module chunks = 0","/*__wc__loader*/\nrequire('../../polymer-element.html');\n\nrequire('../utils/templatize.html');\n\nrequire('../utils/debounce.html');\n\nrequire('../utils/flush.html');\n\n\n\n(function() {\n  'use strict';\n\n  /**\n   * The `<dom-if>` element will stamp a light-dom `<template>` child when\n   * the `if` property becomes truthy, and the template can use Polymer\n   * data-binding and declarative event features when used in the context of\n   * a Polymer element's template.\n   *\n   * When `if` becomes falsey, the stamped content is hidden but not\n   * removed from dom. When `if` subsequently becomes truthy again, the content\n   * is simply re-shown. This approach is used due to its favorable performance\n   * characteristics: the expense of creating template content is paid only\n   * once and lazily.\n   *\n   * Set the `restamp` property to true to force the stamped content to be\n   * created / destroyed when the `if` condition changes.\n   *\n   * @polymerElement\n   * @extends Polymer.Element\n   * @memberof Polymer\n   * @summary Custom element that conditionally stamps and hides or removes\n   *   template content based on a boolean flag.\n   */\n  class DomIf extends Polymer.Element {\n\n    // Not needed to find template; can be removed once the analyzer\n    // can find the tag name from customElements.define call\n    static get is() { return 'dom-if'; }\n\n    static get template() { return null; }\n\n    static get properties() {\n\n      return {\n\n        /**\n         * Fired whenever DOM is added or removed/hidden by this template (by\n         * default, rendering occurs lazily).  To force immediate rendering, call\n         * `render`.\n         *\n         * @event dom-change\n         */\n\n        /**\n         * A boolean indicating whether this template should stamp.\n         */\n        if: {\n          type: Boolean,\n          observer: '__debounceRender'\n        },\n\n        /**\n         * When true, elements will be removed from DOM and discarded when `if`\n         * becomes false and re-created and added back to the DOM when `if`\n         * becomes true.  By default, stamped elements will be hidden but left\n         * in the DOM when `if` becomes false, which is generally results\n         * in better performance.\n         */\n        restamp: {\n          type: Boolean,\n          observer: '__debounceRender'\n        }\n\n      }\n\n    }\n\n    constructor() {\n      super();\n      this.__renderDebouncer = null;\n      this.__invalidProps = null;\n      this.__instance = null;\n    }\n\n    __debounceRender() {\n      // Render is async for 2 reasons:\n      // 1. To eliminate dom creation trashing if user code thrashes `if` in the\n      //    same turn. This was more common in 1.x where a compound computed\n      //    property could result in the result changing multiple times, but is\n      //    mitigated to a large extent by batched property processing in 2.x.\n      // 2. To avoid double object propagation when a bag including values bound\n      //    to the `if` property as well as one or more hostProps could enqueue\n      //    the <dom-if> to flush before the <template>'s host property\n      //    forwarding. In that scenario creating an instance would result in\n      //    the host props being set once, and then the enqueued changes on the\n      //    template would set properties a second time, potentially causing an\n      //    object to be set to an instance more than once.  Creating the\n      //    instance async from flushing data ensures this doesn't happen. If\n      //    we wanted a sync option in the future, simply having <dom-if> flush\n      //    (or clear) its template's pending host properties before creating\n      //    the instance would also avoid the problem.\n      this.__renderDebouncer = Polymer.Debouncer.debounce(\n            this.__renderDebouncer\n          , Polymer.Async.microTask\n          , () => this.__render());\n      Polymer.enqueueDebouncer(this.__renderDebouncer);\n    }\n\n    disconnectedCallback() {\n      super.disconnectedCallback();\n      if (!this.parentNode ||\n          (this.parentNode.nodeType == Node.DOCUMENT_FRAGMENT_NODE &&\n           !this.parentNode.host)) {\n        this.__teardownInstance();\n      }\n    }\n\n    connectedCallback() {\n      super.connectedCallback();\n      if (this.if) {\n        this.__debounceRender();\n      }\n    }\n\n    /**\n     * Forces the element to render its content. Normally rendering is\n     * asynchronous to a provoking change. This is done for efficiency so\n     * that multiple changes trigger only a single render. The render method\n     * should be called if, for example, template rendering is required to\n     * validate application state.\n     */\n    render() {\n      Polymer.flush();\n    }\n\n    __render() {\n      if (this.if) {\n        if (!this.__ensureInstance()) {\n          // No template found yet\n          return;\n        }\n        this._showHideChildren();\n      } else if (this.restamp) {\n        this.__teardownInstance();\n      }\n      if (!this.restamp && this.__instance) {\n        this._showHideChildren();\n      }\n      if (this.if != this._lastIf) {\n        this.dispatchEvent(new CustomEvent('dom-change', {\n          bubbles: true,\n          composed: true\n        }));\n        this._lastIf = this.if;\n      }\n    }\n\n    __ensureInstance() {\n      let parentNode = this.parentNode;\n      // Guard against element being detached while render was queued\n      if (parentNode) {\n        if (!this.__ctor) {\n          let template = this.querySelector('template');\n          if (!template) {\n            // Wait until childList changes and template should be there by then\n            let observer = new MutationObserver(() => {\n              if (this.querySelector('template')) {\n                observer.disconnect();\n                this.__render();\n              } else {\n                throw new Error('dom-if requires a <template> child');\n              }\n            })\n            observer.observe(this, {childList: true});\n            return false;\n          }\n          this.__ctor = Polymer.Templatize.templatize(template, this, {\n            // dom-if templatizer instances require `mutable: true`, as\n            // `__syncHostProperties` relies on that behavior to sync objects\n            mutableData: true,\n            forwardHostProp: function(prop, value) {\n              if (this.__instance) {\n                if (this.if) {\n                  this.__instance.forwardHostProp(prop, value);\n                } else {\n                  // If we have an instance but are squelching host property\n                  // forwarding due to if being false, note the invalidated\n                  // properties so `__syncHostProperties` can sync them the next\n                  // time `if` becomes true\n                  this.__invalidProps = this.__invalidProps || Object.create(null);\n                  this.__invalidProps[Polymer.Path.root(prop)] = true;\n                }\n              }\n            }\n          });\n        }\n        if (!this.__instance) {\n          this.__instance = new this.__ctor();\n          parentNode.insertBefore(this.__instance.root, this);\n        } else {\n          this.__syncHostProperties();\n          let c$ = this.__instance.children;\n          if (c$ && c$.length) {\n            // Detect case where dom-if was re-attached in new position\n            let lastChild = this.previousSibling;\n            if (lastChild !== c$[c$.length-1]) {\n              for (let i=0, n; (i<c$.length) && (n=c$[i]); i++) {\n                parentNode.insertBefore(n, this);\n              }\n            }\n          }\n        }\n      }\n      return true;\n    }\n\n    __syncHostProperties() {\n      let props = this.__invalidProps;\n      if (props) {\n        for (let prop in props) {\n          this.__instance._setPendingProperty(prop, this.__dataHost[prop]);\n        }\n        this.__invalidProps = null;\n        this.__instance._flushProperties();\n      }\n    }\n\n    __teardownInstance() {\n      if (this.__instance) {\n        let c$ = this.__instance.children;\n        if (c$ && c$.length) {\n          // use first child parent, for case when dom-if may have been detached\n          let parent = c$[0].parentNode;\n          for (let i=0, n; (i<c$.length) && (n=c$[i]); i++) {\n            parent.removeChild(n);\n          }\n        }\n        this.__instance = null;\n        this.__invalidProps = null;\n      }\n    }\n\n    _showHideChildren() {\n      let hidden = this.__hideTemplateChildren__ || !this.if;\n      if (this.__instance) {\n        this.__instance._showHideChildren(hidden);\n      }\n    }\n\n  }\n\n  customElements.define(DomIf.is, DomIf);\n\n  Polymer.DomIf = DomIf;\n\n})();\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/elements/dom-if.html\n// module id = 23\n// module chunks = 0","/*__wc__loader*/\nrequire('../utils/boot.html');\n\nrequire('../utils/resolve-url.html');\n\n\n(function() {\n  'use strict';\n\n  let modules = {};\n  let lcModules = {};\n  function findModule(id) {\n    return modules[id] || lcModules[id.toLowerCase()];\n  }\n\n  function styleOutsideTemplateCheck(inst) {\n    if (inst.querySelector('style')) {\n      console.warn('dom-module %s has style outside template', inst.id);\n    }\n  }\n\n  /**\n   * The `dom-module` element registers the dom it contains to the name given\n   * by the module's id attribute. It provides a unified database of dom\n   * accessible via its static `import` API.\n   *\n   * A key use case of `dom-module` is for providing custom element `<template>`s\n   * via HTML imports that are parsed by the native HTML parser, that can be\n   * relocated during a bundling pass and still looked up by `id`.\n   *\n   * Example:\n   *\n   *     <dom-module id=\"foo\">\n   *       <img src=\"stuff.png\">\n   *     </dom-module>\n   *\n   * Then in code in some other location that cannot access the dom-module above\n   *\n   *     let img = document.createElement('dom-module').import('foo', 'img');\n   *\n   * @extends HTMLElement\n   * @memberof Polymer\n   * @summary Custom element that provides a registry of relocatable DOM content\n   *   by `id` that is agnostic to bundling.\n   */\n  class DomModule extends HTMLElement {\n\n    static get observedAttributes() { return ['id'] }\n\n    /**\n     * Retrieves the element specified by the css `selector` in the module\n     * registered by `id`. For example, this.import('foo', 'img');\n     * @param {string} id The id of the dom-module in which to search.\n     * @param {string=} selector The css selector by which to find the element.\n     * @return {Element} Returns the element which matches `selector` in the\n     * module registered at the specified `id`.\n     */\n    static import(id, selector) {\n      if (id) {\n        let m = findModule(id);\n        if (m && selector) {\n          return m.querySelector(selector);\n        }\n        return m;\n      }\n      return null;\n    }\n\n    attributeChangedCallback(name, old, value) {\n      if (old !== value) {\n        this.register();\n      }\n    }\n\n    /**\n     * The absolute URL of the original location of this `dom-module`.\n     *\n     * This value will differ from this element's `ownerDocument` in the\n     * following ways:\n     * - Takes into account any `assetpath` attribute added during bundling\n     *   to indicate the original location relative to the bundled location\n     * - Uses the HTMLImports polyfill's `importForElement` API to ensure\n     *   the path is relative to the import document's location since\n     *   `ownerDocument` is not currently polyfilled\n     */\n    get assetpath() {\n      // Don't override existing assetpath.\n      if (!this.__assetpath) {\n        // note: assetpath set via an attribute must be relative to this\n        // element's location; accomodate polyfilled HTMLImports\n        const owner = window.HTMLImports && HTMLImports.importForElement ?\n          HTMLImports.importForElement(this) || document : this.ownerDocument;\n        const url = Polymer.ResolveUrl.resolveUrl(\n          this.getAttribute('assetpath') || '', owner.baseURI);\n        this.__assetpath = Polymer.ResolveUrl.pathFromUrl(url);\n      }\n      return this.__assetpath;\n    }\n\n    /**\n     * Registers the dom-module at a given id. This method should only be called\n     * when a dom-module is imperatively created. For\n     * example, `document.createElement('dom-module').register('foo')`.\n     * @param {string=} id The id at which to register the dom-module.\n     */\n    register(id) {\n      id = id || this.id;\n      if (id) {\n        this.id = id;\n        // store id separate from lowercased id so that\n        // in all cases mixedCase id will stored distinctly\n        // and lowercase version is a fallback\n        modules[id] = this;\n        lcModules[id.toLowerCase()] = this;\n        styleOutsideTemplateCheck(this);\n      }\n    }\n  }\n\n  DomModule.prototype['modules'] = modules;\n\n  customElements.define('dom-module', DomModule);\n\n  // export\n  Polymer.DomModule = DomModule;\n\n})();\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/elements/dom-module.html\n// module id = 24\n// module chunks = 0","/*__wc__loader*/\nrequire('../../polymer-element.html');\n\nrequire('../utils/templatize.html');\n\nrequire('../utils/debounce.html');\n\nrequire('../utils/flush.html');\n\nrequire('../mixins/mutable-data.html');\n\n\n(function() {\n  'use strict';\n\n  /**\n   * @constructor\n   * @implements {Polymer_OptionalMutableData}\n   * @extends {Polymer.Element}\n   */\n  const domRepeatBase = Polymer.OptionalMutableData(Polymer.Element);\n\n  /**\n   * The `<dom-repeat>` element will automatically stamp and binds one instance\n   * of template content to each object in a user-provided array.\n   * `dom-repeat` accepts an `items` property, and one instance of the template\n   * is stamped for each item into the DOM at the location of the `dom-repeat`\n   * element.  The `item` property will be set on each instance's binding\n   * scope, thus templates should bind to sub-properties of `item`.\n   *\n   * Example:\n   *\n   * ```html\n   * <dom-module id=\"employee-list\">\n   *\n   *   <template>\n   *\n   *     <div> Employee list: </div>\n   *     <template is=\"dom-repeat\" items=\"{{employees}}\">\n   *         <div>First name: <span>{{item.first}}</span></div>\n   *         <div>Last name: <span>{{item.last}}</span></div>\n   *     </template>\n   *\n   *   </template>\n   *\n   *   <script>\n   *     Polymer({\n   *       is: 'employee-list',\n   *       ready: function() {\n   *         this.employees = [\n   *             {first: 'Bob', last: 'Smith'},\n   *             {first: 'Sally', last: 'Johnson'},\n   *             ...\n   *         ];\n   *       }\n   *     });\n   *   < /script>\n   *\n   * </dom-module>\n   * ```\n   *\n   * Notifications for changes to items sub-properties will be forwarded to template\n   * instances, which will update via the normal structured data notification system.\n   *\n   * Mutations to the `items` array itself should be made using the Array\n   * mutation API's on `Polymer.Base` (`push`, `pop`, `splice`, `shift`,\n   * `unshift`), and template instances will be kept in sync with the data in the\n   * array.\n   *\n   * Events caught by event handlers within the `dom-repeat` template will be\n   * decorated with a `model` property, which represents the binding scope for\n   * each template instance.  The model is an instance of Polymer.Base, and should\n   * be used to manipulate data on the instance, for example\n   * `event.model.set('item.checked', true);`.\n   *\n   * Alternatively, the model for a template instance for an element stamped by\n   * a `dom-repeat` can be obtained using the `modelForElement` API on the\n   * `dom-repeat` that stamped it, for example\n   * `this.$.domRepeat.modelForElement(event.target).set('item.checked', true);`.\n   * This may be useful for manipulating instance data of event targets obtained\n   * by event handlers on parents of the `dom-repeat` (event delegation).\n   *\n   * A view-specific filter/sort may be applied to each `dom-repeat` by supplying a\n   * `filter` and/or `sort` property.  This may be a string that names a function on\n   * the host, or a function may be assigned to the property directly.  The functions\n   * should implemented following the standard `Array` filter/sort API.\n   *\n   * In order to re-run the filter or sort functions based on changes to sub-fields\n   * of `items`, the `observe` property may be set as a space-separated list of\n   * `item` sub-fields that should cause a re-filter/sort when modified.  If\n   * the filter or sort function depends on properties not contained in `items`,\n   * the user should observe changes to those properties and call `render` to update\n   * the view based on the dependency change.\n   *\n   * For example, for an `dom-repeat` with a filter of the following:\n   *\n   * ```js\n   * isEngineer: function(item) {\n   *     return item.type == 'engineer' || item.manager.type == 'engineer';\n   * }\n   * ```\n   *\n   * Then the `observe` property should be configured as follows:\n   *\n   * ```html\n   * <template is=\"dom-repeat\" items=\"{{employees}}\"\n   *           filter=\"isEngineer\" observe=\"type manager.type\">\n   * ```\n   *\n   * @polymerElement\n   * @memberof Polymer\n   * @extends Polymer.Element\n   * @mixes Polymer.MutableData\n   * @summary Custom element for stamping instance of a template bound to\n   *   items in an array.\n   */\n  class DomRepeat extends domRepeatBase {\n\n    // Not needed to find template; can be removed once the analyzer\n    // can find the tag name from customElements.define call\n    static get is() { return 'dom-repeat'; }\n\n    static get template() { return null; }\n\n    static get properties() {\n\n      /**\n       * Fired whenever DOM is added or removed by this template (by\n       * default, rendering occurs lazily).  To force immediate rendering, call\n       * `render`.\n       *\n       * @event dom-change\n       */\n      return {\n\n        /**\n         * An array containing items determining how many instances of the template\n         * to stamp and that that each template instance should bind to.\n         */\n        items: {\n          type: Array\n        },\n\n        /**\n         * The name of the variable to add to the binding scope for the array\n         * element associated with a given template instance.\n         */\n        as: {\n          type: String,\n          value: 'item'\n        },\n\n        /**\n         * The name of the variable to add to the binding scope with the index\n         * of the instance in the sorted and filtered list of rendered items.\n         * Note, for the index in the `this.items` array, use the value of the\n         * `itemsIndexAs` property.\n         */\n        indexAs: {\n          type: String,\n          value: 'index'\n        },\n\n        /**\n         * The name of the variable to add to the binding scope with the index\n         * of the instance in the `this.items` array. Note, for the index of\n         * this instance in the sorted and filtered list of rendered items,\n         * use the value of the `indexAs` property.\n         */\n        itemsIndexAs: {\n          type: String,\n          value: 'itemsIndex'\n        },\n\n        /**\n         * A function that should determine the sort order of the items.  This\n         * property should either be provided as a string, indicating a method\n         * name on the element's host, or else be an actual function.  The\n         * function should match the sort function passed to `Array.sort`.\n         * Using a sort function has no effect on the underlying `items` array.\n         */\n        sort: {\n          type: Function,\n          observer: '__sortChanged'\n        },\n\n        /**\n         * A function that can be used to filter items out of the view.  This\n         * property should either be provided as a string, indicating a method\n         * name on the element's host, or else be an actual function.  The\n         * function should match the sort function passed to `Array.filter`.\n         * Using a filter function has no effect on the underlying `items` array.\n         */\n        filter: {\n          type: Function,\n          observer: '__filterChanged'\n        },\n\n        /**\n         * When using a `filter` or `sort` function, the `observe` property\n         * should be set to a space-separated list of the names of item\n         * sub-fields that should trigger a re-sort or re-filter when changed.\n         * These should generally be fields of `item` that the sort or filter\n         * function depends on.\n         */\n        observe: {\n          type: String,\n          observer: '__observeChanged'\n        },\n\n        /**\n         * When using a `filter` or `sort` function, the `delay` property\n         * determines a debounce time after a change to observed item\n         * properties that must pass before the filter or sort is re-run.\n         * This is useful in rate-limiting shuffing of the view when\n         * item changes may be frequent.\n         */\n        delay: Number,\n\n        /**\n         * Count of currently rendered items after `filter` (if any) has been applied.\n         * If \"chunking mode\" is enabled, `renderedItemCount` is updated each time a\n         * set of template instances is rendered.\n         *\n         */\n        renderedItemCount: {\n          type: Number,\n          notify: true,\n          readOnly: true\n        },\n\n        /**\n         * Defines an initial count of template instances to render after setting\n         * the `items` array, before the next paint, and puts the `dom-repeat`\n         * into \"chunking mode\".  The remaining items will be created and rendered\n         * incrementally at each animation frame therof until all instances have\n         * been rendered.\n         */\n        initialCount: {\n          type: Number,\n          observer: '__initializeChunking'\n        },\n\n        /**\n         * When `initialCount` is used, this property defines a frame rate to\n         * target by throttling the number of instances rendered each frame to\n         * not exceed the budget for the target frame rate.  Setting this to a\n         * higher number will allow lower latency and higher throughput for\n         * things like event handlers, but will result in a longer time for the\n         * remaining items to complete rendering.\n         */\n        targetFramerate: {\n          type: Number,\n          value: 20\n        },\n\n        _targetFrameTime: {\n          type: Number,\n          computed: '__computeFrameTime(targetFramerate)'\n        }\n\n      }\n\n    }\n\n    static get observers() {\n      return [ '__itemsChanged(items.*)' ]\n    }\n\n    constructor() {\n      super();\n      this.__instances = [];\n      this.__limit = Infinity;\n      this.__pool = [];\n      this.__renderDebouncer = null;\n      this.__itemsIdxToInstIdx = {};\n      this.__chunkCount = null;\n      this.__lastChunkTime = null;\n      this.__needFullRefresh = false;\n      this.__sortFn = null;\n      this.__filterFn = null;\n      this.__observePaths = null;\n      this.__ctor = null;\n    }\n\n    disconnectedCallback() {\n      super.disconnectedCallback();\n      this.__isDetached = true;\n      for (let i=0; i<this.__instances.length; i++) {\n        this.__detachInstance(i);\n      }\n    }\n\n    connectedCallback() {\n      super.connectedCallback();\n      // only perform attachment if the element was previously detached.\n      if (this.__isDetached) {\n        this.__isDetached = false;\n        let parent = this.parentNode;\n        for (let i=0; i<this.__instances.length; i++) {\n          this.__attachInstance(i, parent);\n        }\n      }\n    }\n\n    __ensureTemplatized() {\n      // Templatizing (generating the instance constructor) needs to wait\n      // until ready, since won't have its template content handed back to\n      // it until then\n      if (!this.__ctor) {\n        let template = this.template = this.querySelector('template');\n        if (!template) {\n          // // Wait until childList changes and template should be there by then\n          let observer = new MutationObserver(() => {\n            if (this.querySelector('template')) {\n              observer.disconnect();\n              this.__render();\n            } else {\n              throw new Error('dom-repeat requires a <template> child');\n            }\n          })\n          observer.observe(this, {childList: true});\n          return false;\n        }\n        // Template instance props that should be excluded from forwarding\n        let instanceProps = {};\n        instanceProps[this.as] = true;\n        instanceProps[this.indexAs] = true;\n        instanceProps[this.itemsIndexAs] = true;\n        this.__ctor = Polymer.Templatize.templatize(template, this, {\n          mutableData: this.mutableData,\n          parentModel: true,\n          instanceProps: instanceProps,\n          forwardHostProp: function(prop, value) {\n            let i$ = this.__instances;\n            for (let i=0, inst; (i<i$.length) && (inst=i$[i]); i++) {\n              inst.forwardHostProp(prop, value);\n            }\n          },\n          notifyInstanceProp: function(inst, prop, value) {\n            if (Polymer.Path.matches(this.as, prop)) {\n              let idx = inst[this.itemsIndexAs];\n              if (prop == this.as) {\n                this.items[idx] = value;\n              }\n              let path = Polymer.Path.translate(this.as, 'items.' + idx, prop);\n              this.notifyPath(path, value);\n            }\n          }\n        });\n      }\n      return true;\n    }\n\n    __getMethodHost() {\n      // Technically this should be the owner of the outermost template.\n      // In shadow dom, this is always getRootNode().host, but we can\n      // approximate this via cooperation with our dataHost always setting\n      // `_methodHost` as long as there were bindings (or id's) on this\n      // instance causing it to get a dataHost.\n      return this.__dataHost._methodHost || this.__dataHost;\n    }\n\n    __sortChanged(sort) {\n      let methodHost = this.__getMethodHost();\n      this.__sortFn = sort && (typeof sort == 'function' ? sort :\n        function() { return methodHost[sort].apply(methodHost, arguments); });\n      this.__needFullRefresh = true;\n      if (this.items) {\n        this.__debounceRender(this.__render);\n      }\n    }\n\n    __filterChanged(filter) {\n      let methodHost = this.__getMethodHost();\n      this.__filterFn = filter && (typeof filter == 'function' ? filter :\n        function() { return methodHost[filter].apply(methodHost, arguments); });\n      this.__needFullRefresh = true;\n      if (this.items) {\n        this.__debounceRender(this.__render);\n      }\n    }\n\n    __computeFrameTime(rate) {\n      return Math.ceil(1000/rate);\n    }\n\n    __initializeChunking() {\n      if (this.initialCount) {\n        this.__limit = this.initialCount;\n        this.__chunkCount = this.initialCount;\n        this.__lastChunkTime = performance.now();\n      }\n    }\n\n    __tryRenderChunk() {\n      // Debounced so that multiple calls through `_render` between animation\n      // frames only queue one new rAF (e.g. array mutation & chunked render)\n      if (this.items && this.__limit < this.items.length) {\n        this.__debounceRender(this.__requestRenderChunk);\n      }\n    }\n\n    __requestRenderChunk() {\n      requestAnimationFrame(()=>this.__renderChunk());\n    }\n\n    __renderChunk() {\n      // Simple auto chunkSize throttling algorithm based on feedback loop:\n      // measure actual time between frames and scale chunk count by ratio\n      // of target/actual frame time\n      let currChunkTime = performance.now();\n      let ratio = this._targetFrameTime / (currChunkTime - this.__lastChunkTime);\n      this.__chunkCount = Math.round(this.__chunkCount * ratio) || 1;\n      this.__limit += this.__chunkCount;\n      this.__lastChunkTime = currChunkTime;\n      this.__debounceRender(this.__render);\n    }\n\n    __observeChanged() {\n      this.__observePaths = this.observe &&\n        this.observe.replace('.*', '.').split(' ');\n    }\n\n    __itemsChanged(change) {\n      if (this.items && !Array.isArray(this.items)) {\n        console.warn('dom-repeat expected array for `items`, found', this.items);\n      }\n      // If path was to an item (e.g. 'items.3' or 'items.3.foo'), forward the\n      // path to that instance synchronously (retuns false for non-item paths)\n      if (!this.__handleItemPath(change.path, change.value)) {\n        // Otherwise, the array was reset ('items') or spliced ('items.splices'),\n        // so queue a full refresh\n        this.__needFullRefresh = true;\n        this.__initializeChunking();\n        this.__debounceRender(this.__render);\n      }\n    }\n\n    __handleObservedPaths(path) {\n      if (this.__observePaths) {\n        path = path.substring(path.indexOf('.') + 1);\n        let paths = this.__observePaths;\n        for (let i=0; i<paths.length; i++) {\n          if (path.indexOf(paths[i]) === 0) {\n            this.__needFullRefresh = true;\n            this.__debounceRender(this.__render, this.delay);\n            return true;\n          }\n        }\n      }\n    }\n\n    /**\n     * @param {function()} fn Function to debounce.\n     * @param {number=} delay Delay in ms to debounce by.\n     */\n    __debounceRender(fn, delay) {\n      this.__renderDebouncer = Polymer.Debouncer.debounce(\n            this.__renderDebouncer\n          , delay > 0 ? Polymer.Async.timeOut.after(delay) : Polymer.Async.microTask\n          , fn.bind(this));\n      Polymer.enqueueDebouncer(this.__renderDebouncer);\n    }\n\n    /**\n     * Forces the element to render its content. Normally rendering is\n     * asynchronous to a provoking change. This is done for efficiency so\n     * that multiple changes trigger only a single render. The render method\n     * should be called if, for example, template rendering is required to\n     * validate application state.\n     */\n    render() {\n      // Queue this repeater, then flush all in order\n      this.__needFullRefresh = true;\n      this.__debounceRender(this.__render);\n      Polymer.flush();\n    }\n\n    __render() {\n      if (!this.__ensureTemplatized()) {\n        // No template found yet\n        return;\n      }\n      this.__applyFullRefresh();\n      // Reset the pool\n      // TODO(kschaaf): Reuse pool across turns and nested templates\n      // Now that objects/arrays are re-evaluated when set, we can safely\n      // reuse pooled instances across turns, however we still need to decide\n      // semantics regarding how long to hold, how many to hold, etc.\n      this.__pool.length = 0;\n      // Set rendered item count\n      this._setRenderedItemCount(this.__instances.length);\n      // Notify users\n      this.dispatchEvent(new CustomEvent('dom-change', {\n        bubbles: true,\n        composed: true\n      }));\n      // Check to see if we need to render more items\n      this.__tryRenderChunk();\n    }\n\n    __applyFullRefresh() {\n      const items = this.items || [];\n      let isntIdxToItemsIdx = new Array(items.length);\n      for (let i=0; i<items.length; i++) {\n        isntIdxToItemsIdx[i] = i;\n      }\n      // Apply user filter\n      if (this.__filterFn) {\n        isntIdxToItemsIdx = isntIdxToItemsIdx.filter((i, idx, array) =>\n          this.__filterFn(items[i], idx, array));\n      }\n      // Apply user sort\n      if (this.__sortFn) {\n        isntIdxToItemsIdx.sort((a, b) => this.__sortFn(items[a], items[b]));\n      }\n      // items->inst map kept for item path forwarding\n      const itemsIdxToInstIdx = this.__itemsIdxToInstIdx = {};\n      let instIdx = 0;\n      // Generate instances and assign items\n      const limit = Math.min(isntIdxToItemsIdx.length, this.__limit);\n      for (; instIdx<limit; instIdx++) {\n        let inst = this.__instances[instIdx];\n        let itemIdx = isntIdxToItemsIdx[instIdx];\n        let item = items[itemIdx];\n        itemsIdxToInstIdx[itemIdx] = instIdx;\n        if (inst && instIdx < this.__limit) {\n          inst._setPendingProperty(this.as, item);\n          inst._setPendingProperty(this.indexAs, instIdx);\n          inst._setPendingProperty(this.itemsIndexAs, itemIdx);\n          inst._flushProperties();\n        } else {\n          this.__insertInstance(item, instIdx, itemIdx);\n        }\n      }\n      // Remove any extra instances from previous state\n      for (let i=this.__instances.length-1; i>=instIdx; i--) {\n        this.__detachAndRemoveInstance(i);\n      }\n    }\n\n    __detachInstance(idx) {\n      let inst = this.__instances[idx];\n      for (let i=0; i<inst.children.length; i++) {\n        let el = inst.children[i];\n        inst.root.appendChild(el);\n      }\n      return inst;\n    }\n\n    __attachInstance(idx, parent) {\n      let inst = this.__instances[idx];\n      parent.insertBefore(inst.root, this);\n    }\n\n    __detachAndRemoveInstance(idx) {\n      let inst = this.__detachInstance(idx);\n      if (inst) {\n        this.__pool.push(inst);\n      }\n      this.__instances.splice(idx, 1);\n    }\n\n    __stampInstance(item, instIdx, itemIdx) {\n      let model = {};\n      model[this.as] = item;\n      model[this.indexAs] = instIdx;\n      model[this.itemsIndexAs] = itemIdx;\n      return new this.__ctor(model);\n    }\n\n    __insertInstance(item, instIdx, itemIdx) {\n      let inst = this.__pool.pop();\n      if (inst) {\n        // TODO(kschaaf): If the pool is shared across turns, hostProps\n        // need to be re-set to reused instances in addition to item\n        inst._setPendingProperty(this.as, item);\n        inst._setPendingProperty(this.indexAs, instIdx);\n        inst._setPendingProperty(this.itemsIndexAs, itemIdx);\n        inst._flushProperties();\n      } else {\n        inst = this.__stampInstance(item, instIdx, itemIdx);\n      }\n      let beforeRow = this.__instances[instIdx + 1];\n      let beforeNode = beforeRow ? beforeRow.children[0] : this;\n      this.parentNode.insertBefore(inst.root, beforeNode);\n      this.__instances[instIdx] = inst;\n      return inst;\n    }\n\n    // Implements extension point from Templatize mixin\n    _showHideChildren(hidden) {\n      for (let i=0; i<this.__instances.length; i++) {\n        this.__instances[i]._showHideChildren(hidden);\n      }\n    }\n\n    // Called as a side effect of a host items.<key>.<path> path change,\n    // responsible for notifying item.<path> changes to inst for key\n    __handleItemPath(path, value) {\n      let itemsPath = path.slice(6); // 'items.'.length == 6\n      let dot = itemsPath.indexOf('.');\n      let itemsIdx = dot < 0 ? itemsPath : itemsPath.substring(0, dot);\n      // If path was index into array...\n      if (itemsIdx == parseInt(itemsIdx, 10)) {\n        let itemSubPath = dot < 0 ? '' : itemsPath.substring(dot+1);\n        // See if the item subpath should trigger a full refresh...\n        if (!this.__handleObservedPaths(itemSubPath)) {\n          // If not, forward to the instance for that index\n          let instIdx = this.__itemsIdxToInstIdx[itemsIdx];\n          let inst = this.__instances[instIdx];\n          if (inst) {\n            let itemPath = this.as + (itemSubPath ? '.' + itemSubPath : '');\n            // This is effectively `notifyPath`, but avoids some of the overhead\n            // of the public API\n            inst._setPendingPropertyOrPath(itemPath, value, false, true);\n            inst._flushProperties();\n          }\n        }\n        return true;\n      }\n    }\n\n    /**\n     * Returns the item associated with a given element stamped by\n     * this `dom-repeat`.\n     *\n     * Note, to modify sub-properties of the item,\n     * `modelForElement(el).set('item.<sub-prop>', value)`\n     * should be used.\n     *\n     * @param {HTMLElement} el Element for which to return the item.\n     * @return {*} Item associated with the element.\n     */\n    itemForElement(el) {\n      let instance = this.modelForElement(el);\n      return instance && instance[this.as];\n    }\n\n    /**\n     * Returns the inst index for a given element stamped by this `dom-repeat`.\n     * If `sort` is provided, the index will reflect the sorted order (rather\n     * than the original array order).\n     *\n     * @param {HTMLElement} el Element for which to return the index.\n     * @return {*} Row index associated with the element (note this may\n     *   not correspond to the array index if a user `sort` is applied).\n     */\n    indexForElement(el) {\n      let instance = this.modelForElement(el);\n      return instance && instance[this.indexAs];\n    }\n\n    /**\n     * Returns the template \"model\" associated with a given element, which\n     * serves as the binding scope for the template instance the element is\n     * contained in. A template model is an instance of `Polymer.Base`, and\n     * should be used to manipulate data associated with this template instance.\n     *\n     * Example:\n     *\n     *   let model = modelForElement(el);\n     *   if (model.index < 10) {\n     *     model.set('item.checked', true);\n     *   }\n     *\n     * @param {HTMLElement} el Element for which to return a template model.\n     * @return {TemplateInstanceBase} Model representing the binding scope for\n     *   the element.\n     */\n    modelForElement(el) {\n      return Polymer.Templatize.modelForElement(this.template, el);\n    }\n\n  }\n\n  customElements.define(DomRepeat.is, DomRepeat);\n\n  Polymer.DomRepeat = DomRepeat;\n\n})();\n\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/elements/dom-repeat.html\n// module id = 25\n// module chunks = 0","/*__wc__loader*/\nrequire('./legacy-element-mixin.html');\n\n\n\n  (function() {\n\n    'use strict';\n\n    let LegacyElementMixin = Polymer.LegacyElementMixin;\n\n    let metaProps = {\n      attached: true,\n      detached: true,\n      ready: true,\n      created: true,\n      beforeRegister: true,\n      registered: true,\n      attributeChanged: true,\n      // meta objects\n      behaviors: true\n    }\n\n    /**\n     * Applies a \"legacy\" behavior or array of behaviors to the provided class.\n     *\n     * Note: this method will automatically also apply the `Polymer.LegacyElementMixin`\n     * to ensure that any legacy behaviors can rely on legacy Polymer API on\n     * the underlying element.\n     *\n     * @param {Object|Array} behaviors Behavior object or array of behaviors.\n     * @param {HTMLElement} klass Element class.\n     * @return {HTMLElement} Returns a new Element class extended by the\n     * passed in `behaviors` and also by `Polymer.LegacyElementMixin`.\n     * @memberof Polymer\n     */\n    function mixinBehaviors(behaviors, klass) {\n      if (!behaviors) {\n        return klass;\n      }\n      // NOTE: ensure the bahevior is extending a class with\n      // legacy element api. This is necessary since behaviors expect to be able\n      // to access 1.x legacy api.\n      klass = LegacyElementMixin(klass);\n      if (!Array.isArray(behaviors)) {\n        behaviors = [behaviors];\n      }\n      let superBehaviors = klass.prototype.behaviors;\n      // get flattened, deduped list of behaviors *not* already on super class\n      behaviors = flattenBehaviors(behaviors, null, superBehaviors);\n      // mixin new behaviors\n      klass = _mixinBehaviors(behaviors, klass);\n      if (superBehaviors) {\n        behaviors = superBehaviors.concat(behaviors);\n      }\n      // Set behaviors on prototype for BC...\n      klass.prototype.behaviors = behaviors;\n      return klass;\n    }\n\n    // NOTE:\n    // 1.x\n    // Behaviors were mixed in *in reverse order* and de-duped on the fly.\n    // The rule was that behavior properties were copied onto the element\n    // prototype if and only if the property did not already exist.\n    // Given: Polymer{ behaviors: [A, B, C, A, B]}, property copy order was:\n    // (1), B, (2), A, (3) C. This means prototype properties win over\n    // B properties win over A win over C. This mirrors what would happen\n    // with inheritance if element extended B extended A extended C.\n    //\n    // Again given, Polymer{ behaviors: [A, B, C, A, B]}, the resulting\n    // `behaviors` array was [C, A, B].\n    // Behavior lifecycle methods were called in behavior array order\n    // followed by the element, e.g. (1) C.created, (2) A.created,\n    // (3) B.created, (4) element.created. There was no support for\n    // super, and \"super-behavior\" methods were callable only by name).\n    //\n    // 2.x\n    // Behaviors are made into proper mixins which live in the\n    // element's prototype chain. Behaviors are placed in the element prototype\n    // eldest to youngest and de-duped youngest to oldest:\n    // So, first [A, B, C, A, B] becomes [C, A, B] then,\n    // the element prototype becomes (oldest) (1) Polymer.Element, (2) class(C),\n    // (3) class(A), (4) class(B), (5) class(Polymer({...})).\n    // Result:\n    // This means element properties win over B properties win over A win\n    // over C. (same as 1.x)\n    // If lifecycle is called (super then me), order is\n    // (1) C.created, (2) A.created, (3) B.created, (4) element.created\n    // (again same as 1.x)\n    function _mixinBehaviors(behaviors, klass) {\n      for (let i=0; i<behaviors.length; i++) {\n        let b = behaviors[i];\n        if (b) {\n          klass = Array.isArray(b) ? _mixinBehaviors(b, klass) :\n            GenerateClassFromInfo(b, klass);\n        }\n      }\n      return klass;\n    }\n\n    /**\n     * @param {Array} behaviors List of behaviors to flatten.\n     * @param {Array=} list Target list to flatten behaviors into.\n     * @param {Array=} exclude List of behaviors to exclude from the list.\n     * @return {Array} Returns the list of flattened behaviors.\n     */\n    function flattenBehaviors(behaviors, list, exclude) {\n      list = list || [];\n      for (let i=behaviors.length-1; i >= 0; i--) {\n        let b = behaviors[i];\n        if (b) {\n          if (Array.isArray(b)) {\n            flattenBehaviors(b, list);\n          } else {\n            // dedup\n            if (list.indexOf(b) < 0 && (!exclude || exclude.indexOf(b) < 0)) {\n              list.unshift(b);\n            }\n          }\n        } else {\n          console.warn('behavior is null, check for missing or 404 import');\n        }\n      }\n      return list;\n    }\n\n    function GenerateClassFromInfo(info, Base) {\n\n      class PolymerGenerated extends Base {\n\n        static get properties() {\n          return info.properties;\n        }\n\n        static get observers() {\n          return info.observers;\n        }\n\n        static get template() {\n          // get template first from any imperative set in `info._template`\n          return info._template ||\n            // next look in dom-module associated with this element's is.\n            Polymer.DomModule.import(this.is, 'template') ||\n            // next look for superclass template (note: use superclass symbol\n            // to ensure correct `this.is`)\n            Base.template ||\n            // finally fall back to `_template` in element's protoype.\n            this.prototype._template;\n        }\n\n        created() {\n          super.created();\n          if (info.created) {\n            info.created.call(this);\n          }\n        }\n\n        _registered() {\n          super._registered();\n          /* NOTE: `beforeRegister` is called here for bc, but the behavior\n           is different than in 1.x. In 1.0, the method was called *after*\n           mixing prototypes together but *before* processing of meta-objects.\n           However, dynamic effects can still be set here and can be done either\n           in `beforeRegister` or `registered`. It is no longer possible to set\n           `is` in `beforeRegister` as you could in 1.x.\n          */\n          if (info.beforeRegister) {\n            info.beforeRegister.call(Object.getPrototypeOf(this));\n          }\n          if (info.registered) {\n            info.registered.call(Object.getPrototypeOf(this));\n          }\n        }\n\n        _applyListeners() {\n          super._applyListeners();\n          if (info.listeners) {\n            for (let l in info.listeners) {\n              this._addMethodEventListenerToNode(this, l, info.listeners[l]);\n            }\n          }\n        }\n\n        // note: exception to \"super then me\" rule;\n        // do work before calling super so that super attributes\n        // only apply if not already set.\n        _ensureAttributes() {\n          if (info.hostAttributes) {\n            for (let a in info.hostAttributes) {\n              this._ensureAttribute(a, info.hostAttributes[a]);\n            }\n          }\n          super._ensureAttributes();\n        }\n\n        ready() {\n          super.ready();\n          if (info.ready) {\n            info.ready.call(this);\n          }\n        }\n\n        attached() {\n          super.attached();\n          if (info.attached) {\n            info.attached.call(this);\n          }\n        }\n\n        detached() {\n          super.detached();\n          if (info.detached) {\n            info.detached.call(this);\n          }\n        }\n\n        attributeChanged(name, old, value) {\n          super.attributeChanged(name, old, value);\n          if (info.attributeChanged) {\n            info.attributeChanged.call(this, name, old, value);\n          }\n       }\n      }\n\n      PolymerGenerated.generatedFrom =  info\n\n      for (let p in info) {\n        // NOTE: cannot copy `metaProps` methods onto prototype at least because\n        // `super.ready` must be called and is not included in the user fn.\n        if (!(p in metaProps)) {\n          let pd = Object.getOwnPropertyDescriptor(info, p);\n          if (pd) {\n            Object.defineProperty(PolymerGenerated.prototype, p, pd);\n          }\n        }\n      }\n\n      return PolymerGenerated;\n    }\n\n    /**\n     * Generates a class that extends `Polymer.LegacyElement` based on the\n     * provided info object.  Metadata objects on the `info` object\n     * (`properties`, `observers`, `listeners`, `behaviors`, `is`) are used\n     * for Polymer's meta-programming systems, and any functions are copied\n     * to the generated class.\n     *\n     * Valid \"metadata\" values are as follows:\n     *\n     * `is`: String providing the tag name to register the element under. In\n     * addition, if a `dom-module` with the same id exists, the first template\n     * in that `dom-module` will be stamped into the shadow root of this element,\n     * with support for declarative event listeners (`on-...`), Polymer data\n     * bindings (`[[...]]` and `{{...}}`), and id-based node finding into\n     * `this.$`.\n     *\n     * `properties`: Object describing property-related metadata used by Polymer\n     * features (key: property names, value: object containing property metadata).\n     * Valid keys in per-property metadata include:\n     * - `type` (String|Number|Object|Array|...): Used by\n     *   `attributeChangedCallback` to determine how string-based attributes\n     *   are deserialized to JavaScript property values.\n     * - `notify` (boolean): Causes a change in the property to fire a\n     *   non-bubbling event called `<property>-changed`. Elements that have\n     *   enabled two-way binding to the property use this event to observe changes.\n     * - `readOnly` (boolean): Creates a getter for the property, but no setter.\n     *   To set a read-only property, use the private setter method\n     *   `_setProperty(property, value)`.\n     * - `observer` (string): Observer method name that will be called when\n     *   the property changes. The arguments of the method are\n     *   `(value, previousValue)`.\n     * - `computed` (string): String describing method and dependent properties\n     *   for computing the value of this property (e.g. `'computeFoo(bar, zot)'`).\n     *   Computed properties are read-only by default and can only be changed\n     *   via the return value of the computing method.\n     *\n     * `observers`: Array of strings describing multi-property observer methods\n     *  and their dependent properties (e.g. `'observeABC(a, b, c)'`).\n     *\n     * `listeners`: Object describing event listeners to be added to each\n     *  instance of this element (key: event name, value: method name).\n     *\n     * `behaviors`: Array of additional `info` objects containing metadata\n     * and callbacks in the same format as the `info` object here which are\n     * merged into this element.\n     *\n     * `hostAttributes`: Object listing attributes to be applied to the host\n     *  once created (key: attribute name, value: attribute value).  Values\n     *  are serialized based on the type of the value.  Host attributes should\n     *  generally be limited to attributes such as `tabIndex` and `aria-...`.\n     *  Attributes in `hostAttributes` are only applied if a user-supplied\n     *  attribute is not already present (attributes in markup override\n     *  `hostAttributes`).\n     *\n     * In addition, the following Polymer-specific callbacks may be provided:\n     * - `registered`: called after first instance of this element,\n     * - `created`: called during `constructor`\n     * - `attached`: called during `connectedCallback`\n     * - `detached`: called during `disconnectedCallback`\n     * - `ready`: called before first `attached`, after all properties of\n     *   this element have been propagated to its template and all observers\n     *   have run\n     *\n     * @param {Object} info Object containing Polymer metadata and functions\n     *   to become class methods.\n     * @return {Polymer.LegacyElement} Generated class\n     * @memberof Polymer\n     */\n    Polymer.Class = function(info) {\n      if (!info) {\n        console.warn('Polymer.Class requires `info` argument');\n      }\n      let klass = GenerateClassFromInfo(info, info.behaviors ?\n        // note: mixinBehaviors ensures `LegacyElementMixin`.\n        mixinBehaviors(info.behaviors, HTMLElement) :\n        LegacyElementMixin(HTMLElement));\n      // decorate klass with registration info\n      klass.is = info.is;\n      return klass;\n    }\n\n    Polymer.mixinBehaviors = mixinBehaviors;\n\n  })();\n\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/legacy/class.html\n// module id = 26\n// module chunks = 0","/*__wc__loader*/\nrequire('../mixins/mutable-data.html');\n\n\n(function() {\n  'use strict';\n\n  let mutablePropertyChange = Polymer.MutableData._mutablePropertyChange;\n\n  /**\n   * Legacy element behavior to skip strict dirty-checking for objects and arrays,\n   * (always consider them to be \"dirty\") for use on legacy API Polymer elements.\n   *\n   * By default, `Polymer.PropertyEffects` performs strict dirty checking on\n   * objects, which means that any deep modifications to an object or array will\n   * not be propagated unless \"immutable\" data patterns are used (i.e. all object\n   * references from the root to the mutation were changed).\n   *\n   * Polymer also provides a proprietary data mutation and path notification API\n   * (e.g. `notifyPath`, `set`, and array mutation API's) that allow efficient\n   * mutation and notification of deep changes in an object graph to all elements\n   * bound to the same object graph.\n   *\n   * In cases where neither immutable patterns nor the data mutation API can be\n   * used, applying this mixin will cause Polymer to skip dirty checking for\n   * objects and arrays (always consider them to be \"dirty\").  This allows a\n   * user to make a deep modification to a bound object graph, and then either\n   * simply re-set the object (e.g. `this.items = this.items`) or call `notifyPath`\n   * (e.g. `this.notifyPath('items')`) to update the tree.  Note that all\n   * elements that wish to be updated based on deep mutations must apply this\n   * mixin or otherwise skip strict dirty checking for objects/arrays.\n   *\n   * In order to make the dirty check strategy configurable, see\n   * `Polymer.OptionalMutableDataBehavior`.\n   *\n   * Note, the performance characteristics of propagating large object graphs\n   * will be worse as opposed to using strict dirty checking with immutable\n   * patterns or Polymer's path notification API.\n   *\n   * @polymerBehavior\n   * @memberof Polymer\n   * @summary Behavior to skip strict dirty-checking for objects and\n   *   arrays\n   */\n  Polymer.MutableDataBehavior = {\n\n    /**\n     * Overrides `Polymer.PropertyEffects` to provide option for skipping\n     * strict equality checking for Objects and Arrays.\n     *\n     * This method pulls the value to dirty check against from the `__dataTemp`\n     * cache (rather than the normal `__data` cache) for Objects.  Since the temp\n     * cache is cleared at the end of a turn, this implementation allows\n     * side-effects of deep object changes to be processed by re-setting the\n     * same object (using the temp cache as an in-turn backstop to prevent\n     * cycles due to 2-way notification).\n     *\n     * @param {string} property Property name\n     * @param {*} value New property value\n     * @param {*} old Previous property value\n     * @return {boolean} Whether the property should be considered a change\n     * @protected\n     */\n    _shouldPropertyChange(property, value, old) {\n      return mutablePropertyChange(this, property, value, old, true);\n    }\n  };\n\n  /**\n   * Legacy element behavior to add the optional ability to skip strict\n   * dirty-checking for objects and arrays (always consider them to be\n   * \"dirty\") by setting a `mutable-data` attribute on an element instance.\n   *\n   * By default, `Polymer.PropertyEffects` performs strict dirty checking on\n   * objects, which means that any deep modifications to an object or array will\n   * not be propagated unless \"immutable\" data patterns are used (i.e. all object\n   * references from the root to the mutation were changed).\n   *\n   * Polymer also provides a proprietary data mutation and path notification API\n   * (e.g. `notifyPath`, `set`, and array mutation API's) that allow efficient\n   * mutation and notification of deep changes in an object graph to all elements\n   * bound to the same object graph.\n   *\n   * In cases where neither immutable patterns nor the data mutation API can be\n   * used, applying this mixin will allow Polymer to skip dirty checking for\n   * objects and arrays (always consider them to be \"dirty\").  This allows a\n   * user to make a deep modification to a bound object graph, and then either\n   * simply re-set the object (e.g. `this.items = this.items`) or call `notifyPath`\n   * (e.g. `this.notifyPath('items')`) to update the tree.  Note that all\n   * elements that wish to be updated based on deep mutations must apply this\n   * mixin or otherwise skip strict dirty checking for objects/arrays.\n   *\n   * While this behavior adds the ability to forgo Object/Array dirty checking,\n   * the `mutableData` flag defaults to false and must be set on the instance.\n   *\n   * Note, the performance characteristics of propagating large object graphs\n   * will be worse by relying on `mutableData: true` as opposed to using\n   * strict dirty checking with immutable patterns or Polymer's path notification\n   * API.\n   *\n   * @polymerBehavior\n   * @memberof Polymer\n   * @summary Behavior to optionally skip strict dirty-checking for objects and\n   *   arrays\n   */\n  Polymer.OptionalMutableDataBehavior = {\n\n    properties: {\n      /**\n       * Instance-level flag for configuring the dirty-checking strategy\n       * for this element.  When true, Objects and Arrays will skip dirty\n       * checking, otherwise strict equality checking will be used.\n       */\n      mutableData: Boolean\n    },\n\n    /**\n     * Overrides `Polymer.PropertyEffects` to skip strict equality checking\n     * for Objects and Arrays.\n     *\n     * Pulls the value to dirty check against from the `__dataTemp` cache\n     * (rather than the normal `__data` cache) for Objects.  Since the temp\n     * cache is cleared at the end of a turn, this implementation allows\n     * side-effects of deep object changes to be processed by re-setting the\n     * same object (using the temp cache as an in-turn backstop to prevent\n     * cycles due to 2-way notification).\n     *\n     * @param {string} property Property name\n     * @param {*} value New property value\n     * @param {*} old Previous property value\n     * @return {boolean} Whether the property should be considered a change\n     * @protected\n     */\n    _shouldPropertyChange(property, value, old) {\n      return mutablePropertyChange(this, property, value, old, this.mutableData);\n    }\n  };\n\n})();\n\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/legacy/mutable-data-behavior.html\n// module id = 27\n// module chunks = 0","/*__wc__loader*/\nrequire('./class.html');\n\n\n\n  (function() {\n    'use strict';\n\n    /**\n     * Legacy class factory and registration helper for defining Polymer\n     * elements.\n     *\n     * This method is equivalent to\n     * `customElements.define(info.is, Polymer.Class(info));`\n     *\n     * See `Polymer.Class` for details on valid legacy metadata format for `info`.\n     *\n     * @override\n     * @function Polymer\n     * @param {Object} info Object containing Polymer metadata and functions\n     *   to become class methods.\n     * @return {Polymer.LegacyElement} Generated class\n     */\n    window.Polymer._polymerFn = function(info) {\n      // if input is a `class` (aka a function with a prototype), use the prototype\n      // remember that the `constructor` will never be called\n      let klass;\n      if (typeof info === 'function') {\n        klass = info;\n      } else {\n        klass = Polymer.Class(info);\n      }\n      customElements.define(klass.is, klass);\n      return klass;\n    };\n\n  })();\n\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/legacy/polymer-fn.html\n// module id = 28\n// module chunks = 0","/*__wc__loader*/\nrequire('../utils/boot.html');\n\nrequire('../utils/settings.html');\n\nrequire('../utils/flattened-nodes-observer.html');\n\nrequire('../utils/flush.html');\n\n\n(function() {\n  'use strict';\n\n  const p = Element.prototype;\n  const normalizedMatchesSelector = p.matches || p.matchesSelector ||\n    p.mozMatchesSelector || p.msMatchesSelector ||\n    p.oMatchesSelector || p.webkitMatchesSelector;\n\n  /**\n   * Cross-platform `element.matches` shim.\n   *\n   * @function matchesSelector\n   * @memberof Polymer.dom\n   * @param {Node} node Node to check selector against\n   * @param {string} selector Selector to match\n   * @return {boolean} True if node matched selector\n   */\n  const matchesSelector = function(node, selector) {\n    return normalizedMatchesSelector.call(node, selector);\n  }\n\n  /**\n   * Node API wrapper class returned from `Polymer.dom.(target)` when\n   * `target` is a `Node`.\n   */\n  class DomApi {\n\n    constructor(node) {\n      this.node = node;\n    }\n\n    /**\n     * Returns an instance of `Polymer.FlattenedNodesObserver` that\n     * listens for node changes on this element.\n     *\n     * @param {Function} callback Called when direct or distributed children\n     *   of this element changes\n     * @return {Polymer.FlattenedNodesObserver} Observer instance\n     */\n    observeNodes(callback) {\n      return new Polymer.FlattenedNodesObserver(this.node, callback);\n    }\n\n    /**\n     * Disconnects an observer previously created via `observeNodes`\n     *\n     * @param {Polymer.FlattenedNodesObserver} observerHandle Observer instance\n     *   to disconnect.\n     */\n    unobserveNodes(observerHandle) {\n      observerHandle.disconnect();\n    }\n\n    /**\n     * Provided as a backwards-compatible API only.  This method does nothing.\n     */\n    notifyObserver() {}\n\n    /**\n     * Returns true if the provided node is contained with this element's\n     * light-DOM children or shadow root, including any nested shadow roots\n     * of children therein.\n     *\n     * @param {Node} node Node to test\n     * @return {boolean} Returns true if the given `node` is contained within\n     *   this element's light or shadow DOM.\n     */\n    deepContains(node) {\n      if (this.node.contains(node)) {\n        return true;\n      }\n      let n = node;\n      let doc = node.ownerDocument;\n      // walk from node to `this` or `document`\n      while (n && n !== doc && n !== this.node) {\n        // use logical parentnode, or native ShadowRoot host\n        n = n.parentNode || n.host;\n      }\n      return n === this.node;\n    }\n\n    /**\n     * Returns the root node of this node.  Equivalent to `getRoodNode()`.\n     *\n     * @return {Node} Top most element in the dom tree in which the node\n     * exists. If the node is connected to a document this is either a\n     * shadowRoot or the document; otherwise, it may be the node\n     * itself or a node or document fragment containing it.\n     */\n    getOwnerRoot() {\n      return this.node.getRootNode();\n    }\n\n    /**\n     * For slot elements, returns the nodes assigned to the slot; otherwise\n     * an empty array. It is equivalent to `<slot>.addignedNodes({flatten:true})`.\n     *\n     * @return {Array<Node>} Array of assigned nodes\n     */\n    getDistributedNodes() {\n      return (this.node.localName === 'slot') ?\n        this.node.assignedNodes({flatten: true}) :\n        [];\n    }\n\n    /**\n     * Returns an array of all slots this element was distributed to.\n     *\n     * @return {Array<HTMLSlotElement>} Description\n     */\n    getDestinationInsertionPoints() {\n      let ip$ = [];\n      let n = this.node.assignedSlot;\n      while (n) {\n        ip$.push(n);\n        n = n.assignedSlot;\n      }\n      return ip$;\n    }\n\n    /**\n     * Calls `importNode` on the `ownerDocument` for this node.\n     *\n     * @param {Node} node Node to import\n     * @param {boolean} deep True if the node should be cloned deeply during\n     *   import\n     * @return {Node} Clone of given node imported to this owner document\n     */\n    importNode(node, deep) {\n      let doc = this.node instanceof Document ? this.node :\n        this.node.ownerDocument;\n      return doc.importNode(node, deep);\n    }\n\n    /**\n     * Returns a flattened list of all child nodes and nodes distributed\n     * to child slots.\n     *\n     * @return {type} Description\n     */\n    getEffectiveChildNodes() {\n      return Polymer.FlattenedNodesObserver.getFlattenedNodes(this.node);\n    }\n\n    /**\n     * Returns a filtered list of flattened child elements for this element based\n     * on the given selector.\n     *\n     * @param {string} selector Selector to filter nodes against\n     * @return {Array<HTMLElement>} List of flattened child elements\n     */\n    queryDistributedElements(selector) {\n      let c$ = this.getEffectiveChildNodes();\n      let list = [];\n      for (let i=0, l=c$.length, c; (i<l) && (c=c$[i]); i++) {\n        if ((c.nodeType === Node.ELEMENT_NODE) &&\n            matchesSelector(c, selector)) {\n          list.push(c);\n        }\n      }\n      return list;\n    }\n\n    /**\n     * For shadow roots, returns the currently focused element within this\n     * shadow root.\n     *\n     * @return {Node|undefined} Currently focused element\n     */\n    get activeElement() {\n      let node = this.node;\n      return node._activeElement !== undefined ? node._activeElement : node.activeElement;\n    }\n  }\n\n  function forwardMethods(proto, methods) {\n    for (let i=0; i < methods.length; i++) {\n      let method = methods[i];\n      proto[method] = function() {\n        return this.node[method].apply(this.node, arguments);\n      }\n    }\n  }\n\n  function forwardReadOnlyProperties(proto, properties) {\n    for (let i=0; i < properties.length; i++) {\n      let name = properties[i];\n      Object.defineProperty(proto, name, {\n        get: function() {\n          return this.node[name];\n        },\n        configurable: true\n      });\n    }\n  }\n\n  function forwardProperties(proto, properties) {\n    for (let i=0; i < properties.length; i++) {\n      let name = properties[i];\n      Object.defineProperty(proto, name, {\n        get: function() {\n          return this.node[name];\n        },\n        set: function(value) {\n          this.node[name] = value;\n        },\n        configurable: true\n      });\n    }\n  }\n\n  forwardMethods(DomApi.prototype, [\n    'cloneNode', 'appendChild', 'insertBefore', 'removeChild',\n    'replaceChild', 'setAttribute', 'removeAttribute',\n    'querySelector', 'querySelectorAll'\n  ]);\n\n  forwardReadOnlyProperties(DomApi.prototype, [\n    'parentNode', 'firstChild', 'lastChild',\n    'nextSibling', 'previousSibling', 'firstElementChild',\n    'lastElementChild', 'nextElementSibling', 'previousElementSibling',\n    'childNodes', 'children', 'classList'\n  ]);\n\n  forwardProperties(DomApi.prototype, [\n    'textContent', 'innerHTML'\n  ]);\n\n\n  /**\n   * Event API wrapper class returned from `Polymer.dom.(target)` when\n   * `target` is an `Event`.\n   */\n  class EventApi {\n    constructor(event) {\n      this.event = event;\n    }\n\n    /**\n     * Returns the first node on the `composedPath` of this event.\n     *\n     * @return {Node} The node this event was dispatched to\n     */\n    get rootTarget() {\n      return this.event.composedPath()[0];\n    }\n\n    /**\n     * Returns the local (re-targeted) target for this event.\n     *\n     * @return {Node} The local (re-targeted) target for this event.\n     */\n    get localTarget() {\n      return this.event.target;\n    }\n\n    /**\n     * Returns the `composedPath` for this event.\n     */\n    get path() {\n      return this.event.composedPath();\n    }\n  }\n\n  /**\n   * Legacy DOM and Event manipulation API wrapper factory used to abstract\n   * differences between native Shadow DOM and \"Shady DOM\" when polyfilling on\n   * older browsers.\n   *\n   * Note that in Polymer 2.x use of `Polymer.dom` is no longer required and\n   * in the majority of cases simply facades directly to the standard native\n   * API.\n   *\n   * @namespace\n   * @summary Legacy DOM and Event manipulation API wrapper factory used to\n   * abstract differences between native Shadow DOM and \"Shady DOM.\"\n   * @memberof Polymer\n   * @param {Node|Event} obj Node or event to operate on\n   * @return {DomApi|EventApi} Wrapper providing either node API or event API\n   */\n  Polymer.dom = function(obj) {\n    obj = obj || document;\n    let ctor = obj instanceof Event ? EventApi : DomApi;\n    if (!obj.__domApi) {\n      obj.__domApi = new ctor(obj);\n    }\n    return obj.__domApi;\n  };\n\n  Polymer.dom.matchesSelector = matchesSelector;\n\n  /**\n   * Forces several classes of asynchronously queued tasks to flush:\n   * - Debouncers added via `Polymer.enqueueDebouncer`\n   * - ShadyDOM distribution\n   *\n   * This method facades to `Polymer.flush`.\n   *\n   * @memberof Polymer.dom\n   */\n  Polymer.dom.flush = Polymer.flush;\n\n  /**\n   * Adds a `Polymer.Debouncer` to a list of globally flushable tasks.\n   *\n   * This method facades to `Polymer.enqueueDebouncer`.\n   *\n   * @memberof Polymer.dom\n   * @param {Polymer.Debouncer} debouncer Debouncer to enqueue\n   */\n  Polymer.dom.addDebouncer = Polymer.enqueueDebouncer;\n})();\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/legacy/polymer.dom.html\n// module id = 29\n// module chunks = 0","/*__wc__loader*/\nrequire('../utils/templatize.html');\n\n\n  (function() {\n    'use strict';\n\n    /**\n     * The `Polymer.Templatizer` behavior adds methods to generate instances of\n     * templates that are each managed by an anonymous `Polymer.PropertyEffects`\n     * instance where data-bindings in the stamped template content are bound to\n     * accessors on itself.\n     *\n     * This behavior is provided in Polymer 2.x as a hybrid-element convenience\n     * only.  For non-hybrid usage, the `Polymer.Templatize` library\n     * should be used instead.\n     *\n     * Example:\n     *\n     *     // Get a template from somewhere, e.g. light DOM\n     *     let template = this.querySelector('template');\n     *     // Prepare the template\n     *     this.templatize(template);\n     *     // Instance the template with an initial data model\n     *     let instance = this.stamp({myProp: 'initial'});\n     *     // Insert the instance's DOM somewhere, e.g. light DOM\n     *     Polymer.dom(this).appendChild(instance.root);\n     *     // Changing a property on the instance will propagate to bindings\n     *     // in the template\n     *     instance.myProp = 'new value';\n     *\n     * Users of `Templatizer` may need to implement the following abstract\n     * API's to determine how properties and paths from the host should be\n     * forwarded into to instances:\n     *\n     *     _forwardHostPropV2: function(prop, value)\n     *\n     * Likewise, users may implement these additional abstract API's to determine\n     * how instance-specific properties that change on the instance should be\n     * forwarded out to the host, if necessary.\n     *\n     *     _notifyInstancePropV2: function(inst, prop, value)\n     *\n     * In order to determine which properties are instance-specific and require\n     * custom notification via `_notifyInstanceProp`, define an `_instanceProps`\n     * object containing keys for each instance prop, for example:\n     *\n     *     _instanceProps: {\n     *       item: true,\n     *       index: true\n     *     }\n     *\n     * Any properties used in the template that are not defined in _instanceProp\n     * will be forwarded out to the Templatize `owner` automatically.\n     *\n     * Users may also implement the following abstract function to show or\n     * hide any DOM generated using `stamp`:\n     *\n     *     _showHideChildren: function(shouldHide)\n     *\n     * Note that some callbacks are suffixed with `V2` in the Polymer 2.x behavior\n     * as the implementations will need to differ from the callbacks required\n     * by the 1.x Templatizer API due to changes in the `TemplateInstance` API\n     * between versions 1.x and 2.x.\n     *\n     * @polymerBehavior\n     * @memberof Polymer\n     */\n    let Templatizer = {\n\n      /**\n       * Generates an anonymous `TemplateInstance` class (stored as `this.ctor`)\n       * for the provided template.  This method should be called once per\n       * template to prepare an element for stamping the template, followed\n       * by `stamp` to create new instances of the template.\n       *\n       * @param {HTMLTemplateElement} template Template to prepare\n       * @param {boolean=} mutableData When `true`, the generated class will skip\n       *   strict dirty-checking for objects and arrays (always consider them to\n       *   be \"dirty\"). Defaults to false.\n       */\n      templatize(template, mutableData) {\n        this._templatizerTemplate = template;\n        this.ctor = Polymer.Templatize.templatize(template, this, {\n          mutableData: Boolean(mutableData),\n          parentModel: this._parentModel,\n          instanceProps: this._instanceProps,\n          forwardHostProp: this._forwardHostPropV2,\n          notifyInstanceProp: this._notifyInstancePropV2\n        });\n      },\n\n      /**\n       * Creates an instance of the template prepared by `templatize`.  The object\n       * returned is an instance of the anonymous class generated by `templatize`\n       * whose `root` property is a document fragment containing newly cloned\n       * template content, and which has property accessors corresponding to\n       * properties referenced in template bindings.\n       *\n       * @param {Object=} model Object containing initial property values to\n       *   populate into the template bindings.\n       * @return {TemplateInstanceBase} Returns the created instance of\n       * the template prepared by `templatize`.\n       */\n      stamp(model) {\n        return new this.ctor(model);\n      },\n\n      /**\n       * Returns the template \"model\" (`TemplateInstance`) associated with\n       * a given element, which serves as the binding scope for the template\n       * instance the element is contained in.  A template model should be used\n       * to manipulate data associated with this template instance.\n       *\n       * @param {HTMLElement} el Element for which to return a template model.\n       * @return {TemplateInstanceBase} Model representing the binding scope for\n       *   the element.\n       */\n      modelForElement(el) {\n        return Polymer.Templatize.modelForElement(this._templatizerTemplate, el);\n      }\n    };\n\n    Polymer.Templatizer = Templatizer;\n\n  })();\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/legacy/templatizer-behavior.html\n// module id = 30\n// module chunks = 0","/*__wc__loader*/\nrequire('../utils/boot.html');\n\nrequire('../utils/mixin.html');\n\nrequire('../utils/case-map.html');\n\nrequire('../utils/async.html');\n\n\n(function() {\n\n  'use strict';\n\n  let caseMap = Polymer.CaseMap;\n\n  let microtask = Polymer.Async.microTask;\n\n  // Save map of native properties; this forms a blacklist or properties\n  // that won't have their values \"saved\" by `saveAccessorValue`, since\n  // reading from an HTMLElement accessor from the context of a prototype throws\n  const nativeProperties = {};\n  let proto = HTMLElement.prototype;\n  while (proto) {\n    let props = Object.getOwnPropertyNames(proto);\n    for (let i=0; i<props.length; i++) {\n      nativeProperties[props[i]] = true;\n    }\n    proto = Object.getPrototypeOf(proto);\n  }\n\n  /**\n   * Used to save the value of a property that will be overridden with\n   * an accessor. If the `model` is a prototype, the values will be saved\n   * in `__dataProto`, and it's up to the user (or downstream mixin) to\n   * decide how/when to set these values back into the accessors.\n   * If `model` is already an instance (it has a `__data` property), then\n   * the value will be set as a pending property, meaning the user should\n   * call `_invalidateProperties` or `_flushProperties` to take effect\n   *\n   * @param {Object} model Prototype or instance\n   * @param {string} property Name of property\n   * @private\n   */\n  function saveAccessorValue(model, property) {\n    // Don't read/store value for any native properties since they could throw\n    if (!nativeProperties[property]) {\n      let value = model[property];\n      if (value !== undefined) {\n        if (model.__data) {\n          // Adding accessor to instance; update the property\n          // It is the user's responsibility to call _flushProperties\n          model._setPendingProperty(property, value);\n        } else {\n          // Adding accessor to proto; save proto's value for instance-time use\n          if (!model.__dataProto) {\n            model.__dataProto = {};\n          } else if (!model.hasOwnProperty(JSCompiler_renameProperty('__dataProto', model))) {\n            model.__dataProto = Object.create(model.__dataProto);\n          }\n          model.__dataProto[property] = value;\n        }\n      }\n    }\n  }\n\n  /**\n   * Element class mixin that provides basic meta-programming for creating one\n   * or more property accessors (getter/setter pair) that enqueue an async\n   * (batched) `_propertiesChanged` callback.\n   *\n   * For basic usage of this mixin, simply declare attributes to observe via\n   * the standard `static get observedAttributes()`, implement `_propertiesChanged`\n   * on the class, and then call `MyClass.createPropertiesForAttributes()` once\n   * on the class to generate property accessors for each observed attribute\n   * prior to instancing.  Last, call `this._flushProperties()` once to enable\n   * the accessors.\n   *\n   * Any `observedAttributes` will automatically be\n   * deserialized via `attributeChangedCallback` and set to the associated\n   * property using `dash-case`-to-`camelCase` convention.\n   *\n   * @polymerMixin\n   * @memberof Polymer\n   * @summary Element class mixin for reacting to property changes from\n   *   generated property accessors.\n   */\n  Polymer.PropertyAccessors = Polymer.dedupingMixin(superClass => {\n\n    /**\n     * @polymerMixinClass\n     * @implements {Polymer_PropertyAccessors}\n     * @unrestricted\n     */\n    class PropertyAccessors extends superClass {\n\n      /**\n       * Generates property accessors for all attributes in the standard\n       * static `observedAttributes` array.\n       *\n       * Attribute names are mapped to property names using the `dash-case` to\n       * `camelCase` convention\n       *\n       */\n      static createPropertiesForAttributes() {\n        let a$ = this.observedAttributes;\n        for (let i=0; i < a$.length; i++) {\n          this.prototype._createPropertyAccessor(caseMap.dashToCamelCase(a$[i]));\n        }\n      }\n\n      constructor() {\n        super();\n        this._initializeProperties();\n      }\n\n      attributeChangedCallback(name, old, value) {\n        if (old !== value) {\n          this._attributeToProperty(name, value);\n        }\n      }\n\n      /**\n       * Initializes the local storage for property accessors.\n       *\n       * Provided as an override point for performing any setup work prior\n       * to initializing the property accessor system.\n       *\n       * @protected\n       */\n      _initializeProperties() {\n        this.__serializing = false;\n        this.__dataCounter = 0;\n        this.__dataEnabled = false;\n        this.__dataReady = false;\n        this.__dataInvalid = false;\n        // initialize data with prototype values saved when creating accessors\n        this.__data = {};\n        this.__dataPending = null;\n        this.__dataOld = null;\n        if (this.__dataProto) {\n          this._initializeProtoProperties(this.__dataProto);\n          this.__dataProto = null;\n        }\n        // Capture instance properties; these will be set into accessors\n        // during first flush. Don't set them here, since we want\n        // these to overwrite defaults/constructor assignments\n        for (let p in this.__dataHasAccessor) {\n          if (this.hasOwnProperty(p)) {\n            this.__dataInstanceProps = this.__dataInstanceProps || {};\n            this.__dataInstanceProps[p] = this[p];\n            delete this[p];\n          }\n        }\n      }\n\n      /**\n       * Called at instance time with bag of properties that were overwritten\n       * by accessors on the prototype when accessors were created.\n       *\n       * The default implementation sets these properties back into the\n       * setter at instance time.  This method is provided as an override\n       * point for customizing or providing more efficient initialization.\n       *\n       * @param {Object} props Bag of property values that were overwritten\n       *   when creating property accessors.\n       * @protected\n       */\n      _initializeProtoProperties(props) {\n        for (let p in props) {\n          this._setProperty(p, props[p]);\n        }\n      }\n\n      /**\n       * Called at ready time with bag of instance properties that overwrote\n       * accessors when the element upgraded.\n       *\n       * The default implementation sets these properties back into the\n       * setter at ready time.  This method is provided as an override\n       * point for customizing or providing more efficient initialization.\n       *\n       * @param {Object} props Bag of property values that were overwritten\n       *   when creating property accessors.\n       * @protected\n       */\n      _initializeInstanceProperties(props) {\n        Object.assign(this, props);\n      }\n\n      /**\n       * Ensures the element has the given attribute. If it does not,\n       * assigns the given value to the attribute.\n       *\n       *\n       * @param {string} attribute Name of attribute to ensure is set.\n       * @param {string} value of the attribute.\n       */\n      _ensureAttribute(attribute, value) {\n        if (!this.hasAttribute(attribute)) {\n          this._valueToNodeAttribute(this, value, attribute);\n        }\n      }\n\n      /**\n       * Deserializes an attribute to its associated property.\n       *\n       * This method calls the `_deserializeValue` method to convert the string to\n       * a typed value.\n       *\n       * @param {string} attribute Name of attribute to deserialize.\n       * @param {string} value of the attribute.\n       * @param {*} type type to deserialize to.\n       */\n      _attributeToProperty(attribute, value, type) {\n        // Don't deserialize back to property if currently reflecting\n        if (!this.__serializing) {\n          let property = caseMap.dashToCamelCase(attribute);\n          this[property] = this._deserializeValue(value, type);\n        }\n      }\n\n      /**\n       * Serializes a property to its associated attribute.\n       *\n       * @param {string} property Property name to reflect.\n       * @param {string=} attribute Attribute name to reflect.\n       * @param {*=} value Property value to refect.\n       */\n      _propertyToAttribute(property, attribute, value) {\n        this.__serializing = true;\n        value = (arguments.length < 3) ? this[property] : value;\n        this._valueToNodeAttribute(this, value,\n          attribute || caseMap.camelToDashCase(property));\n        this.__serializing = false;\n      }\n\n      /**\n       * Sets a typed value to an HTML attribute on a node.\n       *\n       * This method calls the `_serializeValue` method to convert the typed\n       * value to a string.  If the `_serializeValue` method returns `undefined`,\n       * the attribute will be removed (this is the default for boolean\n       * type `false`).\n       *\n       * @param {Element} node Element to set attribute to.\n       * @param {*} value Value to serialize.\n       * @param {string} attribute Attribute name to serialize to.\n       */\n      _valueToNodeAttribute(node, value, attribute) {\n        let str = this._serializeValue(value);\n        if (str === undefined) {\n          node.removeAttribute(attribute);\n        } else {\n          node.setAttribute(attribute, str);\n        }\n      }\n\n      /**\n       * Converts a typed JavaScript value to a string.\n       *\n       * This method is called by Polymer when setting JS property values to\n       * HTML attributes.  Users may override this method on Polymer element\n       * prototypes to provide serialization for custom types.\n       *\n       * @param {*} value Property value to serialize.\n       * @return {string | undefined} String serialized from the provided property value.\n       */\n      _serializeValue(value) {\n        /* eslint-disable no-fallthrough */\n        switch (typeof value) {\n          case 'boolean':\n            return value ? '' : undefined;\n\n          case 'object':\n            if (value instanceof Date) {\n              return value.toString();\n            } else if (value) {\n              try {\n                return JSON.stringify(value);\n              } catch(x) {\n                return '';\n              }\n            }\n\n          default:\n            return value != null ? value.toString() : undefined;\n        }\n      }\n\n      /**\n       * Converts a string to a typed JavaScript value.\n       *\n       * This method is called by Polymer when reading HTML attribute values to\n       * JS properties.  Users may override this method on Polymer element\n       * prototypes to provide deserialization for custom `type`s.  Note,\n       * the `type` argument is the value of the `type` field provided in the\n       * `properties` configuration object for a given property, and is\n       * by convention the constructor for the type to deserialize.\n       *\n       * Note: The return value of `undefined` is used as a sentinel value to\n       * indicate the attribute should be removed.\n       *\n       * @param {string} value Attribute value to deserialize.\n       * @param {*} type Type to deserialize the string to.\n       * @return {*} Typed value deserialized from the provided string.\n       */\n      _deserializeValue(value, type) {\n        /**\n         * @type {*}\n         */\n        let outValue;\n        switch (type) {\n          case Number:\n            outValue = Number(value);\n            break;\n\n          case Boolean:\n            outValue = (value !== null);\n            break;\n\n          case Object:\n            try {\n              outValue = JSON.parse(value);\n            } catch(x) {\n              // allow non-JSON literals like Strings and Numbers\n            }\n            break;\n\n          case Array:\n            try {\n              outValue = JSON.parse(value);\n            } catch(x) {\n              outValue = null;\n              console.warn(`Polymer::Attributes: couldn't decode Array as JSON: ${value}`);\n            }\n            break;\n\n          case Date:\n            outValue = new Date(value);\n            break;\n\n          case String:\n          default:\n            outValue = value;\n            break;\n        }\n\n        return outValue;\n      }\n      /* eslint-enable no-fallthrough */\n\n      /**\n       * Creates a setter/getter pair for the named property with its own\n       * local storage.  The getter returns the value in the local storage,\n       * and the setter calls `_setProperty`, which updates the local storage\n       * for the property and enqueues a `_propertiesChanged` callback.\n       *\n       * This method may be called on a prototype or an instance.  Calling\n       * this method may overwrite a property value that already exists on\n       * the prototype/instance by creating the accessor.  When calling on\n       * a prototype, any overwritten values are saved in `__dataProto`,\n       * and it is up to the subclasser to decide how/when to set those\n       * properties back into the accessor.  When calling on an instance,\n       * the overwritten value is set via `_setPendingProperty`, and the\n       * user should call `_invalidateProperties` or `_flushProperties`\n       * for the values to take effect.\n       *\n       * @param {string} property Name of the property\n       * @param {boolean=} readOnly When true, no setter is created; the\n       *   protected `_setProperty` function must be used to set the property\n       * @protected\n       */\n      _createPropertyAccessor(property, readOnly) {\n        if (!this.hasOwnProperty('__dataHasAccessor')) {\n          this.__dataHasAccessor = Object.assign({}, this.__dataHasAccessor);\n        }\n        if (!this.__dataHasAccessor[property]) {\n          this.__dataHasAccessor[property] = true;\n          saveAccessorValue(this, property);\n          Object.defineProperty(this, property, {\n            get: function() {\n              return this.__data[property];\n            },\n            set: readOnly ? function() { } : function(value) {\n              this._setProperty(property, value);\n            }\n          });\n        }\n      }\n\n      /**\n       * Returns true if this library created an accessor for the given property.\n       *\n       * @param {string} property Property name\n       * @return {boolean} True if an accessor was created\n       */\n      _hasAccessor(property) {\n        return this.__dataHasAccessor && this.__dataHasAccessor[property];\n      }\n\n      /**\n       * Updates the local storage for a property (via `_setPendingProperty`)\n       * and enqueues a `_proeprtiesChanged` callback.\n       *\n       * @param {string} property Name of the property\n       * @param {*} value Value to set\n       * @protected\n       */\n      _setProperty(property, value) {\n        if (this._setPendingProperty(property, value)) {\n          this._invalidateProperties();\n        }\n      }\n\n      /**\n       * Updates the local storage for a property, records the previous value,\n       * and adds it to the set of \"pending changes\" that will be passed to the\n       * `_propertiesChanged` callback.  This method does not enqueue the\n       * `_propertiesChanged` callback.\n       *\n       * @param {string} property Name of the property\n       * @param {*} value Value to set\n       * @return {boolean} Returns true if the property changed\n       * @protected\n       */\n      _setPendingProperty(property, value) {\n        let old = this.__data[property];\n        if (this._shouldPropertyChange(property, value, old)) {\n          if (!this.__dataPending) {\n            this.__dataPending = {};\n            this.__dataOld = {};\n          }\n          // Ensure old is captured from the last turn\n          if (!(property in this.__dataOld)) {\n            this.__dataOld[property] = old;\n          }\n          this.__data[property] = value;\n          this.__dataPending[property] = value;\n          return true;\n        }\n      }\n\n      /**\n       * Returns true if the specified property has a pending change.\n       *\n       * @param {string} prop Property name\n       * @return {boolean} True if property has a pending change\n       * @protected\n       */\n      _isPropertyPending(prop) {\n        return this.__dataPending && (prop in this.__dataPending);\n      }\n\n      /**\n       * Marks the properties as invalid, and enqueues an async\n       * `_propertiesChanged` callback.\n       *\n       * @protected\n       */\n      _invalidateProperties() {\n        if (!this.__dataInvalid && this.__dataReady) {\n          this.__dataInvalid = true;\n          microtask.run(() => {\n            if (this.__dataInvalid) {\n              this.__dataInvalid = false;\n              this._flushProperties();\n            }\n          });\n        }\n      }\n\n      /**\n       * Call to enable property accessor processing. Before this method is\n       * called accessor values will be set but side effects are\n       * queued. When called, any pending side effects occur immediately.\n       * For elements, generally `connectedCallback` is a normal spot to do so.\n       * It is safe to call this method multiple times as it only turns on\n       * property accessors once.\n       */\n      _enableProperties() {\n        if (!this.__dataEnabled) {\n          this.__dataEnabled = true;\n          if (this.__dataInstanceProps) {\n            this._initializeInstanceProperties(this.__dataInstanceProps);\n            this.__dataInstanceProps = null;\n          }\n          this.ready()\n        }\n      }\n\n      /**\n       * Calls the `_propertiesChanged` callback with the current set of\n       * pending changes (and old values recorded when pending changes were\n       * set), and resets the pending set of changes. Generally, this method\n       * should not be called in user code.\n       *\n       *\n       * @protected\n       */\n      _flushProperties() {\n        if (this.__dataPending) {\n          let changedProps = this.__dataPending;\n          this.__dataPending = null;\n          this.__dataCounter++;\n          this._propertiesChanged(this.__data, changedProps, this.__dataOld);\n          this.__dataCounter--;\n        }\n      }\n\n      /**\n       * Lifecycle callback called the first time properties are being flushed.\n       * Prior to `ready`, all property sets through accessors are queued and\n       * their effects are flushed after this method returns.\n       *\n       * Users may override this function to implement behavior that is\n       * dependent on the element having its properties initialized, e.g.\n       * from defaults (initialized from `constructor`, `_initializeProperties`),\n       * `attributeChangedCallback`, or values propagated from host e.g. via\n       * bindings.  `super.ready()` must be called to ensure the data system\n       * becomes enabled.\n       *\n       * @public\n       */\n      ready() {\n        this.__dataReady = true;\n        // Run normal flush\n        this._flushProperties();\n      }\n\n      /**\n       * Callback called when any properties with accessors created via\n       * `_createPropertyAccessor` have been set.\n       *\n       * @param {Object} currentProps Bag of all current accessor values\n       * @param {Object} changedProps Bag of properties changed since the last\n       *   call to `_propertiesChanged`\n       * @param {Object} oldProps Bag of previous values for each property\n       *   in `changedProps`\n       * @protected\n       */\n      _propertiesChanged(currentProps, changedProps, oldProps) { // eslint-disable-line no-unused-vars\n      }\n\n      /**\n       * Method called to determine whether a property value should be\n       * considered as a change and cause the `_propertiesChanged` callback\n       * to be enqueued.\n       *\n       * The default implementation returns `true` for primitive types if a\n       * strict equality check fails, and returns `true` for all Object/Arrays.\n       * The method always returns false for `NaN`.\n       *\n       * Override this method to e.g. provide stricter checking for\n       * Objects/Arrays when using immutable patterns.\n       *\n       * @param {string} property Property name\n       * @param {*} value New property value\n       * @param {*} old Previous property value\n       * @return {boolean} Whether the property should be considered a change\n       *   and enqueue a `_proeprtiesChanged` callback\n       * @protected\n       */\n      _shouldPropertyChange(property, value, old) {\n        return (\n          // Strict equality check\n          (old !== value &&\n           // This ensures (old==NaN, value==NaN) always returns false\n           (old === old || value === value))\n        );\n      }\n\n    }\n\n    return PropertyAccessors;\n\n  });\n\n})();\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/mixins/property-accessors.html\n// module id = 31\n// module chunks = 0","/*__wc__loader*/\nrequire('../utils/boot.html');\n\nrequire('../utils/mixin.html');\n\n\n(function() {\n\n  'use strict';\n\n  // 1.x backwards-compatible auto-wrapper for template type extensions\n  // This is a clear layering violation and gives favored-nation status to\n  // dom-if and dom-repeat templates.  This is a conceit we're choosing to keep\n  // a.) to ease 1.x backwards-compatibility due to loss of `is`, and\n  // b.) to maintain if/repeat capability in parser-constrained elements\n  //     (e.g. table, select) in lieu of native CE type extensions without\n  //     massive new invention in this space (e.g. directive system)\n  const templateExtensions = {\n    'dom-if': true,\n    'dom-repeat': true\n  };\n  function wrapTemplateExtension(node) {\n    let is = node.getAttribute('is');\n    if (is && templateExtensions[is]) {\n      let t = node;\n      t.removeAttribute('is');\n      node = t.ownerDocument.createElement(is);\n      t.parentNode.replaceChild(node, t);\n      node.appendChild(t);\n      while(t.attributes.length) {\n        node.setAttribute(t.attributes[0].name, t.attributes[0].value);\n        t.removeAttribute(t.attributes[0].name);\n      }\n    }\n    return node;\n  }\n\n  function findTemplateNode(root, nodeInfo) {\n    // recursively ascend tree until we hit root\n    let parent = nodeInfo.parentInfo && findTemplateNode(root, nodeInfo.parentInfo);\n    // unwind the stack, returning the indexed node at each level\n    if (parent) {\n      // note: marginally faster than indexing via childNodes\n      // (http://jsperf.com/childnodes-lookup)\n      for (let n=parent.firstChild, i=0; n; n=n.nextSibling) {\n        if (nodeInfo.parentIndex === i++) {\n          return n;\n        }\n      }\n    } else {\n      return root;\n    }\n  }\n\n  // construct `$` map (from id annotations)\n  function applyIdToMap(inst, map, node, nodeInfo) {\n    if (nodeInfo.id) {\n      map[nodeInfo.id] = node;\n    }\n  }\n\n  // install event listeners (from event annotations)\n  function applyEventListener(inst, node, nodeInfo) {\n    if (nodeInfo.events && nodeInfo.events.length) {\n      for (let j=0, e$=nodeInfo.events, e; (j<e$.length) && (e=e$[j]); j++) {\n        inst._addMethodEventListenerToNode(node, e.name, e.value, inst);\n      }\n    }\n  }\n\n  // push configuration references at configure time\n  function applyTemplateContent(inst, node, nodeInfo) {\n    if (nodeInfo.templateInfo) {\n      node._templateInfo = nodeInfo.templateInfo;\n    }\n  }\n\n  function createNodeEventHandler(context, eventName, methodName) {\n    // Instances can optionally have a _methodHost which allows redirecting where\n    // to find methods. Currently used by `templatize`.\n    context = context._methodHost || context;\n    let handler = function(e) {\n      if (context[methodName]) {\n        context[methodName](e, e.detail);\n      } else {\n        console.warn('listener method `' + methodName + '` not defined');\n      }\n    };\n    return handler;\n  }\n\n  /**\n   * Element mixin that provides basic template parsing and stamping, including\n   * the following template-related features for stamped templates:\n   *\n   * - Declarative event listeners (`on-eventname=\"listener\"`)\n   * - Map of node id's to stamped node instances (`this.$.id`)\n   * - Nested template content caching/removal and re-installation (performance\n   *   optimization)\n   *\n   * @polymerMixin\n   * @memberof Polymer\n   * @summary Element class mixin that provides basic template parsing and stamping\n   */\n  Polymer.TemplateStamp = Polymer.dedupingMixin(superClass => {\n\n    /**\n     * @polymerMixinClass\n     * @implements {Polymer_TemplateStamp}\n     */\n    class TemplateStamp extends superClass {\n\n      /**\n       * Scans a template to produce template metadata.\n       *\n       * Template-specific metadata are stored in the object returned, and node-\n       * specific metadata are stored in objects in its flattened `nodeInfoList`\n       * array.  Only nodes in the template that were parsed as nodes of\n       * interest contain an object in `nodeInfoList`.  Each `nodeInfo` object\n       * contains an `index` (`childNodes` index in parent) and optionally\n       * `parent`, which points to node info of its parent (including its index).\n       *\n       * The template metadata object returned from this method has the following\n       * structure (many fields optional):\n       *\n       * ```js\n       *   {\n       *     // Flattened list of node metadata (for nodes that generated metadata)\n       *     nodeInfoList: [\n       *       {\n       *         // `id` attribute for any nodes with id's for generating `$` map\n       *         id: {string},\n       *         // `on-event=\"handler\"` metadata\n       *         events: [\n       *           {\n       *             name: {string},   // event name\n       *             value: {string},  // handler method name\n       *           }, ...\n       *         ],\n       *         // Notes when the template contained a `<slot>` for shady DOM\n       *         // optimization purposes\n       *         hasInsertionPoint: {boolean},\n       *         // For nested `<template>`` nodes, nested template metadata\n       *         templateInfo: {object}, // nested template metadata\n       *         // Metadata to allow efficient retrieval of instanced node\n       *         // corresponding to this metadata\n       *         parentInfo: {number},   // reference to parent nodeInfo>\n       *         parentIndex: {number},  // index in parent's `childNodes` collection\n       *         infoIndex: {number},    // index of this `nodeInfo` in `templateInfo.nodeInfoList`\n       *       },\n       *       ...\n       *     ],\n       *     // When true, the template had the `strip-whitespace` attribute\n       *     // or was nested in a template with that setting\n       *     stripWhitespace: {boolean},\n       *     // For nested templates, nested template content is moved into\n       *     // a document fragment stored here; this is an optimization to\n       *     // avoid the cost of nested template cloning\n       *     content: {DocumentFragment}\n       *   }\n       * ```\n       *\n       * This method kicks off a recursive treewalk as follows:\n       *\n       * ```\n       *    _parseTemplate <---------------------+\n       *      _parseTemplateContent              |\n       *        _parseTemplateNode  <------------|--+\n       *          _parseTemplateNestedTemplate --+  |\n       *          _parseTemplateChildNodes ---------+\n       *          _parseTemplateNodeAttributes\n       *            _parseTemplateNodeAttribute\n       *\n       * ```\n       *\n       * These methods may be overridden to add custom metadata about templates\n       * to either `templateInfo` or `nodeInfo`.\n       *\n       * Note that this method may be destructive to the template, in that\n       * e.g. event annotations may be removed after being noted in the\n       * template metadata.\n       *\n       * @param {HTMLTemplateElement} template Template to parse\n       * @param {Object=} outerTemplateInfo Template metadata from the outer\n       *   template, for parsing nested templates\n       * @return {Object} Parsed template metadata\n       */\n      static _parseTemplate(template, outerTemplateInfo) {\n        // since a template may be re-used, memo-ize metadata\n        if (!template._templateInfo) {\n          let templateInfo = template._templateInfo = {};\n          templateInfo.nodeInfoList = [];\n          templateInfo.stripWhiteSpace =\n            (outerTemplateInfo && outerTemplateInfo.stripWhiteSpace) ||\n            template.hasAttribute('strip-whitespace');\n          this._parseTemplateContent(template, templateInfo, {parent: null});\n        }\n        return template._templateInfo;\n      }\n\n      static _parseTemplateContent(template, templateInfo, nodeInfo) {\n        return this._parseTemplateNode(template.content, templateInfo, nodeInfo);\n      }\n\n      /**\n       * Parses template node and adds template and node metadata based on\n       * the current node, and its `childNodes` and `attributes`.\n       *\n       * This method may be overridden to add custom node or template specific\n       * metadata based on this node.\n       *\n       * @param {Node} node Node to parse\n       * @param {Object} templateInfo Template metadata for current template\n       * @param {Object} nodeInfo Node metadata for current template.\n       * @return {boolean} `true` if the visited node added node-specific\n       *   metadata to `nodeInfo`\n       */\n      static _parseTemplateNode(node, templateInfo, nodeInfo) {\n        let noted;\n        if (node.localName == 'template' && !node.hasAttribute('preserve-content')) {\n          noted = this._parseTemplateNestedTemplate(node, templateInfo, nodeInfo) || noted;\n        } else if (node.localName === 'slot') {\n          // For ShadyDom optimization, indicating there is an insertion point\n          templateInfo.hasInsertionPoint = true;\n        }\n        if (node.firstChild) {\n          noted = this._parseTemplateChildNodes(node, templateInfo, nodeInfo) || noted;\n        }\n        if (node.hasAttributes && node.hasAttributes()) {\n          noted = this._parseTemplateNodeAttributes(node, templateInfo, nodeInfo) || noted;\n        }\n        return noted;\n      }\n\n      /**\n       * Parses template child nodes for the given root node.\n       *\n       * This method also wraps whitelisted legacy template extensions\n       * (`is=\"dom-if\"` and `is=\"dom-repeat\"`) with their equivalent element\n       * wrappers, collapses text nodes, and strips whitespace from the template\n       * if the `templateInfo.stripWhitespace` setting was provided.\n       *\n       * @param {Node} root Root node whose `childNodes` will be parsed\n       * @param {Object} templateInfo Template metadata for current template\n       * @param {Object} nodeInfo Node metadata for current template.\n       */\n      static _parseTemplateChildNodes(root, templateInfo, nodeInfo) {\n        for (let node=root.firstChild, parentIndex=0, next; node; node=next) {\n          // Wrap templates\n          if (node.localName == 'template') {\n            node = wrapTemplateExtension(node);\n          }\n          // collapse adjacent textNodes: fixes an IE issue that can cause\n          // text nodes to be inexplicably split =(\n          // note that root.normalize() should work but does not so we do this\n          // manually.\n          next = node.nextSibling;\n          if (node.nodeType === Node.TEXT_NODE) {\n            let n = next;\n            while (n && (n.nodeType === Node.TEXT_NODE)) {\n              node.textContent += n.textContent;\n              next = n.nextSibling;\n              root.removeChild(n);\n              n = next;\n            }\n            // optionally strip whitespace\n            if (templateInfo.stripWhiteSpace && !node.textContent.trim()) {\n              root.removeChild(node);\n              continue;\n            }\n          }\n          let childInfo = { parentIndex, parentInfo: nodeInfo };\n          if (this._parseTemplateNode(node, templateInfo, childInfo)) {\n            childInfo.infoIndex = templateInfo.nodeInfoList.push(childInfo) - 1;\n          }\n          // Increment if not removed\n          if (node.parentNode) {\n            parentIndex++;\n          }\n        }\n      }\n\n      /**\n       * Parses template content for the given nested `<template>`.\n       *\n       * Nested template info is stored as `templateInfo` in the current node's\n       * `nodeInfo`. `template.content` is removed and stored in `templateInfo`.\n       * It will then be the responsibility of the host to set it back to the\n       * template and for users stamping nested templates to use the\n       * `_contentForTemplate` method to retrieve the content for this template\n       * (an optimization to avoid the cost of cloning nested template content).\n       *\n       * @param {HTMLTemplateElement} node Node to parse (a <template>)\n       * @param {Object} outerTemplateInfo Template metadata for current template\n       *   that includes the template `node`\n       * @param {Object} nodeInfo Node metadata for current template.\n       * @return {boolean} `true` if the visited node added node-specific\n       *   metadata to `nodeInfo`\n       */\n      static _parseTemplateNestedTemplate(node, outerTemplateInfo, nodeInfo) {\n        let templateInfo = this._parseTemplate(node, outerTemplateInfo);\n        let content = templateInfo.content =\n          node.content.ownerDocument.createDocumentFragment();\n        content.appendChild(node.content);\n        nodeInfo.templateInfo = templateInfo;\n        return true;\n      }\n\n      /**\n       * Parses template node attributes and adds node metadata to `nodeInfo`\n       * for nodes of interest.\n       *\n       * @param {Node} node Node to parse\n       * @param {Object} templateInfo Template metadata for current template\n       * @param {Object} nodeInfo Node metadata for current template.\n       * @return {boolean} `true` if the visited node added node-specific\n       *   metadata to `nodeInfo`\n       */\n      static _parseTemplateNodeAttributes(node, templateInfo, nodeInfo) {\n        // Make copy of original attribute list, since the order may change\n        // as attributes are added and removed\n        let noted;\n        let attrs = Array.from(node.attributes);\n        for (let i=attrs.length-1, a; (a=attrs[i]); i--) {\n          noted = this._parseTemplateNodeAttribute(node, templateInfo, nodeInfo, a.name, a.value) || noted;\n        }\n        return noted;\n      }\n\n      /**\n       * Parses a single template node attribute and adds node metadata to\n       * `nodeInfo` for attributes of interest.\n       *\n       * This implementation adds metadata for `on-event=\"handler\"` attributes\n       * and `id` attributes.\n       *\n       * @param {Node} node Node to parse\n       * @param {Object} templateInfo Template metadata for current template\n       * @param {Object} nodeInfo Node metadata for current template.\n       * @param {string} name Attribute name\n       * @param {*} value Attribute value\n       * @return {boolean} `true` if the visited node added node-specific\n       *   metadata to `nodeInfo`\n       */\n      static _parseTemplateNodeAttribute(node, templateInfo, nodeInfo, name, value) {\n        // events (on-*)\n        if (name.slice(0, 3) === 'on-') {\n          node.removeAttribute(name);\n          nodeInfo.events = nodeInfo.events || [];\n          nodeInfo.events.push({\n            name: name.slice(3),\n            value\n          });\n          return true;\n        }\n        // static id\n        else if (name === 'id') {\n          nodeInfo.id = value;\n          return true;\n        }\n      }\n\n      /**\n       * Returns the `content` document fragment for a given template.\n       *\n       * For nested templates, Polymer performs an optimization to cache nested\n       * template content to avoid the cost of cloning deeply nested templates.\n       * This method retrieves the cached content for a given template.\n       *\n       * @param {HTMLTemplateElement} template Template to retrieve `content` for\n       * @return {DocumentFragment} Content fragment\n       */\n      static _contentForTemplate(template) {\n        let templateInfo = template._templateInfo;\n        return (templateInfo && templateInfo.content) || template.content;\n      }\n\n      /**\n       * Clones the provided template content and returns a document fragment\n       * containing the cloned dom.\n       *\n       * The template is parsed (once and memoized) using this library's\n       * template parsing features, and provides the following value-added\n       * features:\n       * * Adds declarative event listeners for `on-event=\"handler\"` attributes\n       * * Generates an \"id map\" for all nodes with id's under `$` on returned\n       *   document fragment\n       * * Passes template info including `content` back to templates as\n       *   `_templateInfo` (a performance optimization to avoid deep template\n       *   cloning)\n       *\n       * Note that the memoized template parsing process is destructive to the\n       * template: attributes for bindings and declarative event listeners are\n       * removed after being noted in notes, and any nested `<template>.content`\n       * is removed and stored in notes as well.\n       *\n       * @param {HTMLTemplateElement} template Template to stamp\n       * @return {DocumentFragment} Cloned template content\n       */\n      _stampTemplate(template) {\n        // Polyfill support: bootstrap the template if it has not already been\n        if (template && !template.content &&\n            window.HTMLTemplateElement && HTMLTemplateElement.decorate) {\n          HTMLTemplateElement.decorate(template);\n        }\n        let templateInfo = this.constructor._parseTemplate(template);\n        let nodeInfo = templateInfo.nodeInfoList;\n        let content = templateInfo.content || template.content;\n        let dom = document.importNode(content, true);\n        // NOTE: ShadyDom optimization indicating there is an insertion point\n        dom.__noInsertionPoint = !templateInfo.hasInsertionPoint;\n        let nodes = dom.nodeList = new Array(nodeInfo.length);\n        dom.$ = {};\n        for (let i=0, l=nodeInfo.length, info; (i<l) && (info=nodeInfo[i]); i++) {\n          let node = nodes[i] = findTemplateNode(dom, info);\n          applyIdToMap(this, dom.$, node, info);\n          applyTemplateContent(this, node, info);\n          applyEventListener(this, node, info);\n        }\n        return dom;\n      }\n\n      /**\n       * Adds an event listener by method name for the event provided.\n       *\n       * This method generates a handler function that looks up the method\n       * name at handling time.\n       *\n       * @param {Node} node Node to add listener on\n       * @param {string} eventName Name of event\n       * @param {string} methodName Name of method\n       * @param {*=} context Context the method will be called on (defaults\n       *   to `node`)\n       * @return {Function} Generated handler function\n       */\n      _addMethodEventListenerToNode(node, eventName, methodName, context) {\n        context = context || node;\n        let handler = createNodeEventHandler(context, eventName, methodName);\n        this._addEventListenerToNode(node, eventName, handler);\n        return handler;\n      }\n\n      /**\n       * Override point for adding custom or simulated event handling.\n       *\n       * @param {Node} node Node to add event listener to\n       * @param {string} eventName Name of event\n       * @param {Function} handler Listener function to add\n       */\n      _addEventListenerToNode(node, eventName, handler) {\n        node.addEventListener(eventName, handler);\n      }\n\n      /**\n       * Override point for adding custom or simulated event handling.\n       *\n       * @param {Node} node Node to remove event listener from\n       * @param {string} eventName Name of event\n       * @param {Function} handler Listener function to remove\n       */\n      _removeEventListenerFromNode(node, eventName, handler) {\n        node.removeEventListener(eventName, handler);\n      }\n\n    }\n\n    return TemplateStamp;\n\n  });\n\n})();\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/mixins/template-stamp.html\n// module id = 32\n// module chunks = 0","/*__wc__loader*/\nrequire('../utils/boot.html');\n\nrequire('../utils/array-splice.html');\n\nrequire('../utils/async.html');\n\n\n(function() {\n  'use strict';\n\n  function isSlot(node) {\n    return (node.localName === 'slot');\n  }\n\n  /**\n   * Class that listens for changes (additions or removals) to\n   * \"flattened nodes\" on a given `node`. The list of flattened nodes consists\n   * of a node's children and, for any children that are `<slot>` elements,\n   * the expanded flattened list of `assignedNodes`.\n   * For example, if the observed node has children `<a></a><slot></slot><b></b>`\n   * and the `<slot>` has one `<div>` assigned to it, then the flattened\n   * nodes list is `<a></a><div></div><b></b>`. If the `<slot>` has other\n   * `<slot>` elements assigned to it, these are flattened as well.\n   *\n   * The provided `callback` is called whenever any change to this list\n   * of flattened nodes occurs, where an addition or removal of a node is\n   * considered a change. The `callback` is called with one argument, an object\n   * containing an array of any `addedNodes` and `removedNodes`.\n   *\n   * Note: the callback is called asynchronous to any changes\n   * at a microtask checkpoint. This is because observation is performed using\n   * `MutationObserver` and the `<slot>` element's `slotchange` event which\n   * are asynchronous.\n   *\n   * @memberof Polymer\n   * @param {Node} target Node on which to listen for changes.\n   * @param {Function} callback Function called when there are additions\n   * or removals from the target's list of flattened nodes.\n   * @summary Class that listens for changes (additions or removals) to\n   * \"flattened nodes\" on a given `node`.\n   */\n  class FlattenedNodesObserver {\n\n    /**\n     * Returns the list of flattened nodes for the given `node`.\n     * This list consists of a node's children and, for any children\n     * that are `<slot>` elements, the expanded flattened list of `assignedNodes`.\n     * For example, if the observed node has children `<a></a><slot></slot><b></b>`\n     * and the `<slot>` has one `<div>` assigned to it, then the flattened\n     * nodes list is `<a></a><div></div><b></b>`. If the `<slot>` has other\n     * `<slot>` elements assigned to it, these are flattened as well.\n     *\n     * @param {Node} node The node for which to return the list of flattened nodes.\n     * @return {Array} The list of flattened nodes for the given `node`.\n    */\n    static getFlattenedNodes(node) {\n      if (isSlot(node)) {\n        return node.assignedNodes({flatten: true});\n      } else {\n        return Array.from(node.childNodes).map(node => {\n          if (isSlot(node)) {\n            return node.assignedNodes({flatten: true});\n          } else {\n            return [node];\n          }\n        }).reduce((a, b) => a.concat(b), []);\n      }\n    }\n\n    constructor(target, callback) {\n      /** @type {MutationObserver} */\n      this._shadyChildrenObserver = null;\n      /** @type {MutationObserver} */\n      this._nativeChildrenObserver = null;\n      this._connected = false;\n      this._target = target;\n      this.callback = callback;\n      this._effectiveNodes = [];\n      this._observer = null;\n      this._scheduled = false;\n      this._boundSchedule = () => {\n        this._schedule();\n      }\n      this.connect();\n      this._schedule();\n    }\n\n    /**\n     * Activates an observer. This method is automatically called when\n     * a `FlattenedNodesObserver` is created. It should only be called to\n     * re-activate an observer that has been deactivated via the `disconnect` method.\n     */\n    connect() {\n      if (isSlot(this._target)) {\n        this._listenSlots([this._target]);\n      } else {\n        this._listenSlots(this._target.children);\n        if (window.ShadyDOM) {\n          this._shadyChildrenObserver =\n            ShadyDOM.observeChildren(this._target, (mutations) => {\n              this._processMutations(mutations);\n            });\n        } else {\n          this._nativeChildrenObserver =\n            new MutationObserver((mutations) => {\n              this._processMutations(mutations);\n            });\n          this._nativeChildrenObserver.observe(this._target, {childList: true});\n        }\n      }\n      this._connected = true;\n    }\n\n    /**\n     * Deactivates the flattened nodes observer. After calling this method\n     * the observer callback will not be called when changes to flattened nodes\n     * occur. The `connect` method may be subsequently called to reactivate\n     * the observer.\n     */\n    disconnect() {\n      if (isSlot(this._target)) {\n        this._unlistenSlots([this._target]);\n      } else {\n        this._unlistenSlots(this._target.children);\n        if (window.ShadyDOM && this._shadyChildrenObserver) {\n          ShadyDOM.unobserveChildren(this._shadyChildrenObserver);\n          this._shadyChildrenObserver = null;\n        } else if (this._nativeChildrenObserver) {\n          this._nativeChildrenObserver.disconnect();\n          this._nativeChildrenObserver = null;\n        }\n      }\n      this._connected = false;\n    }\n\n    _schedule() {\n      if (!this._scheduled) {\n        this._scheduled = true;\n        Polymer.Async.microTask.run(() => this.flush());\n      }\n    }\n\n    _processMutations(mutations) {\n      this._processSlotMutations(mutations);\n      this.flush();\n    }\n\n    _processSlotMutations(mutations) {\n      if (mutations) {\n        for (let i=0; i < mutations.length; i++) {\n          let mutation = mutations[i];\n          if (mutation.addedNodes) {\n            this._listenSlots(mutation.addedNodes);\n          }\n          if (mutation.removedNodes) {\n            this._unlistenSlots(mutation.removedNodes);\n          }\n        }\n      }\n    }\n\n    /**\n     * Flushes the observer causing any pending changes to be immediately\n     * delivered the observer callback. By default these changes are delivered\n     * asynchronously at the next microtask checkpoint.\n     *\n     * @return {boolean} Returns true if any pending changes caused the observer\n     * callback to run.\n     */\n    flush() {\n      if (!this._connected) {\n        return;\n      }\n      if (window.ShadyDOM) {\n        ShadyDOM.flush();\n      }\n      if (this._nativeChildrenObserver) {\n        this._processSlotMutations(this._nativeChildrenObserver.takeRecords());\n      } else if (this._shadyChildrenObserver) {\n        this._processSlotMutations(this._shadyChildrenObserver.takeRecords());\n      }\n      this._scheduled = false;\n      let info = {\n        target: this._target,\n        addedNodes: [],\n        removedNodes: []\n      };\n      let newNodes = this.constructor.getFlattenedNodes(this._target);\n      let splices = Polymer.ArraySplice.calculateSplices(newNodes,\n        this._effectiveNodes);\n      // process removals\n      for (let i=0, s; (i<splices.length) && (s=splices[i]); i++) {\n        for (let j=0, n; (j < s.removed.length) && (n=s.removed[j]); j++) {\n          info.removedNodes.push(n);\n        }\n      }\n      // process adds\n      for (let i=0, s; (i<splices.length) && (s=splices[i]); i++) {\n        for (let j=s.index; j < s.index + s.addedCount; j++) {\n          info.addedNodes.push(newNodes[j]);\n        }\n      }\n      // update cache\n      this._effectiveNodes = newNodes;\n      let didFlush = false;\n      if (info.addedNodes.length || info.removedNodes.length) {\n        didFlush = true;\n        this.callback.call(this._target, info);\n      }\n      return didFlush;\n    }\n\n    _listenSlots(nodeList) {\n      for (let i=0; i < nodeList.length; i++) {\n        let n = nodeList[i];\n        if (isSlot(n)) {\n          n.addEventListener('slotchange', this._boundSchedule);\n        }\n      }\n    }\n\n    _unlistenSlots(nodeList) {\n      for (let i=0; i < nodeList.length; i++) {\n        let n = nodeList[i];\n        if (isSlot(n)) {\n          n.removeEventListener('slotchange', this._boundSchedule);\n        }\n      }\n    }\n\n  }\n\n  Polymer.FlattenedNodesObserver = FlattenedNodesObserver;\n\n})();\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/utils/flattened-nodes-observer.html\n// module id = 33\n// module chunks = 0","/*__wc__loader*/\nrequire('./boot.html');\n\nrequire('./async.html');\n\nrequire('./debounce.html');\n\n\n(function() {\n\n  'use strict';\n\n  // detect native touch action support\n  let HAS_NATIVE_TA = typeof document.head.style.touchAction === 'string';\n  let GESTURE_KEY = '__polymerGestures';\n  let HANDLED_OBJ = '__polymerGesturesHandled';\n  let TOUCH_ACTION = '__polymerGesturesTouchAction';\n  // radius for tap and track\n  let TAP_DISTANCE = 25;\n  let TRACK_DISTANCE = 5;\n  // number of last N track positions to keep\n  let TRACK_LENGTH = 2;\n\n  // Disabling \"mouse\" handlers for 2500ms is enough\n  let MOUSE_TIMEOUT = 2500;\n  let MOUSE_EVENTS = ['mousedown', 'mousemove', 'mouseup', 'click'];\n  // an array of bitmask values for mapping MouseEvent.which to MouseEvent.buttons\n  let MOUSE_WHICH_TO_BUTTONS = [0, 1, 4, 2];\n  let MOUSE_HAS_BUTTONS = (function() {\n    try {\n      return new MouseEvent('test', {buttons: 1}).buttons === 1;\n    } catch (e) {\n      return false;\n    }\n  })();\n\n  /* eslint no-empty: [\"error\", { \"allowEmptyCatch\": true }] */\n  // check for passive event listeners\n  let SUPPORTS_PASSIVE = false;\n  (function() {\n    try {\n      let opts = Object.defineProperty({}, 'passive', {get: function() {SUPPORTS_PASSIVE = true;}})\n      window.addEventListener('test', null, opts);\n      window.removeEventListener('test', null, opts);\n    } catch(e) {}\n  })();\n\n  // Check for touch-only devices\n  let IS_TOUCH_ONLY = navigator.userAgent.match(/iP(?:[oa]d|hone)|Android/);\n\n  // touch will make synthetic mouse events\n  // `preventDefault` on touchend will cancel them,\n  // but this breaks `<input>` focus and link clicks\n  // disable mouse handlers for MOUSE_TIMEOUT ms after\n  // a touchend to ignore synthetic mouse events\n  let mouseCanceller = function(mouseEvent) {\n    // Check for sourceCapabilities, used to distinguish synthetic events\n    // if mouseEvent did not come from a device that fires touch events,\n    // it was made by a real mouse and should be counted\n    // http://wicg.github.io/InputDeviceCapabilities/#dom-inputdevicecapabilities-firestouchevents\n    let sc = mouseEvent.sourceCapabilities;\n    if (sc && !sc.firesTouchEvents) {\n      return;\n    }\n    // skip synthetic mouse events\n    mouseEvent[HANDLED_OBJ] = {skip: true};\n    // disable \"ghost clicks\"\n    if (mouseEvent.type === 'click') {\n      let path = mouseEvent.composedPath && mouseEvent.composedPath();\n      if (path) {\n        for (let i = 0; i < path.length; i++) {\n          if (path[i] === POINTERSTATE.mouse.target) {\n            return;\n          }\n        }\n      }\n      mouseEvent.preventDefault();\n      mouseEvent.stopPropagation();\n    }\n  };\n\n  /**\n   * @param {boolean=} setup True to add, false to remove.\n   */\n  function setupTeardownMouseCanceller(setup) {\n    let events = IS_TOUCH_ONLY ? ['click'] : MOUSE_EVENTS;\n    for (let i = 0, en; i < events.length; i++) {\n      en = events[i];\n      if (setup) {\n        document.addEventListener(en, mouseCanceller, true);\n      } else {\n        document.removeEventListener(en, mouseCanceller, true);\n      }\n    }\n  }\n\n  function ignoreMouse(e) {\n    if (!POINTERSTATE.mouse.mouseIgnoreJob) {\n      setupTeardownMouseCanceller(true);\n    }\n    let unset = function() {\n      setupTeardownMouseCanceller();\n      POINTERSTATE.mouse.target = null;\n      POINTERSTATE.mouse.mouseIgnoreJob = null;\n    };\n    POINTERSTATE.mouse.target = e.composedPath()[0];\n    POINTERSTATE.mouse.mouseIgnoreJob = Polymer.Debouncer.debounce(\n          POINTERSTATE.mouse.mouseIgnoreJob\n        , Polymer.Async.timeOut.after(MOUSE_TIMEOUT)\n        , unset);\n  }\n\n  function hasLeftMouseButton(ev) {\n    let type = ev.type;\n    // exit early if the event is not a mouse event\n    if (MOUSE_EVENTS.indexOf(type) === -1) {\n      return false;\n    }\n    // ev.button is not reliable for mousemove (0 is overloaded as both left button and no buttons)\n    // instead we use ev.buttons (bitmask of buttons) or fall back to ev.which (deprecated, 0 for no buttons, 1 for left button)\n    if (type === 'mousemove') {\n      // allow undefined for testing events\n      let buttons = ev.buttons === undefined ? 1 : ev.buttons;\n      if ((ev instanceof window.MouseEvent) && !MOUSE_HAS_BUTTONS) {\n        buttons = MOUSE_WHICH_TO_BUTTONS[ev.which] || 0;\n      }\n      // buttons is a bitmask, check that the left button bit is set (1)\n      return Boolean(buttons & 1);\n    } else {\n      // allow undefined for testing events\n      let button = ev.button === undefined ? 0 : ev.button;\n      // ev.button is 0 in mousedown/mouseup/click for left button activation\n      return button === 0;\n    }\n  }\n\n  function isSyntheticClick(ev) {\n    if (ev.type === 'click') {\n      // ev.detail is 0 for HTMLElement.click in most browsers\n      if (ev.detail === 0) {\n        return true;\n      }\n      // in the worst case, check that the x/y position of the click is within\n      // the bounding box of the target of the event\n      // Thanks IE 10 >:(\n      let t = Gestures._findOriginalTarget(ev);\n      // make sure the target of the event is an element so we can use getBoundingClientRect,\n      // if not, just assume it is a synthetic click\n      if (t.nodeType !== Node.ELEMENT_NODE) {\n        return true;\n      }\n      let bcr = t.getBoundingClientRect();\n      // use page x/y to account for scrolling\n      let x = ev.pageX, y = ev.pageY;\n      // ev is a synthetic click if the position is outside the bounding box of the target\n      return !((x >= bcr.left && x <= bcr.right) && (y >= bcr.top && y <= bcr.bottom));\n    }\n    return false;\n  }\n\n  let POINTERSTATE = {\n    mouse: {\n      target: null,\n      mouseIgnoreJob: null\n    },\n    touch: {\n      x: 0,\n      y: 0,\n      id: -1,\n      scrollDecided: false\n    }\n  };\n\n  function firstTouchAction(ev) {\n    let ta = 'auto';\n    let path = ev.composedPath && ev.composedPath();\n    if (path) {\n      for (let i = 0, n; i < path.length; i++) {\n        n = path[i];\n        if (n[TOUCH_ACTION]) {\n          ta = n[TOUCH_ACTION];\n          break;\n        }\n      }\n    }\n    return ta;\n  }\n\n  function trackDocument(stateObj, movefn, upfn) {\n    stateObj.movefn = movefn;\n    stateObj.upfn = upfn;\n    document.addEventListener('mousemove', movefn);\n    document.addEventListener('mouseup', upfn);\n  }\n\n  function untrackDocument(stateObj) {\n    document.removeEventListener('mousemove', stateObj.movefn);\n    document.removeEventListener('mouseup', stateObj.upfn);\n    stateObj.movefn = null;\n    stateObj.upfn = null;\n  }\n\n  // use a document-wide touchend listener to start the ghost-click prevention mechanism\n  // Use passive event listeners, if supported, to not affect scrolling performance\n  document.addEventListener('touchend', ignoreMouse, SUPPORTS_PASSIVE ? {passive: true} : false);\n\n  /**\n   * Module for adding listeners to a node for the following normalized\n   * cross-platform \"gesture\" events:\n   * - `down` - mouse or touch went down\n   * - `up` - mouse or touch went up\n   * - `tap` - mouse click or finger tap\n   * - `track` - mouse drag or touch move\n   *\n   * @namespace\n   * @memberof Polymer\n   * @summary Module for adding cross-platform gesture event listeners.\n   */\n  const Gestures = {\n    gestures: {},\n    recognizers: [],\n\n    /**\n     * Finds the element rendered on the screen at the provided coordinates.\n     *\n     * Similar to `document.elementFromPoint`, but pierces through\n     * shadow roots.\n     *\n     * @memberof Polymer.Gestures\n     * @param {number} x Horizontal pixel coordinate\n     * @param {number} y Vertical pixel coordinate\n     * @return {HTMLElement} Returns the deepest shadowRoot inclusive element\n     * found at the screen position given.\n     */\n    deepTargetFind: function(x, y) {\n      let node = document.elementFromPoint(x, y);\n      let next = node;\n      // this code path is only taken when native ShadowDOM is used\n      // if there is a shadowroot, it may have a node at x/y\n      // if there is not a shadowroot, exit the loop\n      while (next && next.shadowRoot && !window.ShadyDOM) {\n        // if there is a node at x/y in the shadowroot, look deeper\n        let oldNext = next;\n        next = next.shadowRoot.elementFromPoint(x, y);\n        // on Safari, elementFromPoint may return the shadowRoot host\n        if (oldNext === next) {\n          break;\n        }\n        if (next) {\n          node = next;\n        }\n      }\n      return node;\n    },\n    /**\n     * a cheaper check than ev.composedPath()[0];\n     *\n     * @private\n     * @param {Event} ev Event.\n     * @return {HTMLElement} Returns the event target.\n     */\n    _findOriginalTarget: function(ev) {\n      // shadowdom\n      if (ev.composedPath) {\n        return ev.composedPath()[0];\n      }\n      // shadydom\n      return ev.target;\n    },\n\n    /**\n     * @private\n     * @param {Event} ev Event.\n     */\n    _handleNative: function(ev) {\n      let handled;\n      let type = ev.type;\n      let node = ev.currentTarget;\n      let gobj = node[GESTURE_KEY];\n      if (!gobj) {\n        return;\n      }\n      let gs = gobj[type];\n      if (!gs) {\n        return;\n      }\n      if (!ev[HANDLED_OBJ]) {\n        ev[HANDLED_OBJ] = {};\n        if (type.slice(0, 5) === 'touch') {\n          let t = ev.changedTouches[0];\n          if (type === 'touchstart') {\n            // only handle the first finger\n            if (ev.touches.length === 1) {\n              POINTERSTATE.touch.id = t.identifier;\n            }\n          }\n          if (POINTERSTATE.touch.id !== t.identifier) {\n            return;\n          }\n          if (!HAS_NATIVE_TA) {\n            if (type === 'touchstart' || type === 'touchmove') {\n              Gestures._handleTouchAction(ev);\n            }\n          }\n        }\n      }\n      handled = ev[HANDLED_OBJ];\n      // used to ignore synthetic mouse events\n      if (handled.skip) {\n        return;\n      }\n      let recognizers = Gestures.recognizers;\n      // reset recognizer state\n      for (let i = 0, r; i < recognizers.length; i++) {\n        r = recognizers[i];\n        if (gs[r.name] && !handled[r.name]) {\n          if (r.flow && r.flow.start.indexOf(ev.type) > -1 && r.reset) {\n            r.reset();\n          }\n        }\n      }\n      // enforce gesture recognizer order\n      for (let i = 0, r; i < recognizers.length; i++) {\n        r = recognizers[i];\n        if (gs[r.name] && !handled[r.name]) {\n          handled[r.name] = true;\n          r[type](ev);\n        }\n      }\n    },\n\n    /**\n     * @private\n     * @param {Event} ev Event.\n     */\n    _handleTouchAction: function(ev) {\n      let t = ev.changedTouches[0];\n      let type = ev.type;\n      if (type === 'touchstart') {\n        POINTERSTATE.touch.x = t.clientX;\n        POINTERSTATE.touch.y = t.clientY;\n        POINTERSTATE.touch.scrollDecided = false;\n      } else if (type === 'touchmove') {\n        if (POINTERSTATE.touch.scrollDecided) {\n          return;\n        }\n        POINTERSTATE.touch.scrollDecided = true;\n        let ta = firstTouchAction(ev);\n        let prevent = false;\n        let dx = Math.abs(POINTERSTATE.touch.x - t.clientX);\n        let dy = Math.abs(POINTERSTATE.touch.y - t.clientY);\n        if (!ev.cancelable) {\n          // scrolling is happening\n        } else if (ta === 'none') {\n          prevent = true;\n        } else if (ta === 'pan-x') {\n          prevent = dy > dx;\n        } else if (ta === 'pan-y') {\n          prevent = dx > dy;\n        }\n        if (prevent) {\n          ev.preventDefault();\n        } else {\n          Gestures.prevent('track');\n        }\n      }\n    },\n\n    /**\n     * Adds an event listener to a node for the given gesture type.\n     *\n     * @memberof Polymer.Gestures\n     * @param {Node} node Node to add listener on\n     * @param {string} evType Gesture type: `down`, `up`, `track`, or `tap`\n     * @param {Function} handler Event listener function to call\n     * @return {boolean} Returns true if a gesture event listener was added.\n     */\n    addListener: function(node, evType, handler) {\n      if (this.gestures[evType]) {\n        this._add(node, evType, handler);\n        return true;\n      }\n    },\n\n    /**\n     * Removes an event listener from a node for the given gesture type.\n     *\n     * @memberof Polymer.Gestures\n     * @param {Node} node Node to remove listener from\n     * @param {string} evType Gesture type: `down`, `up`, `track`, or `tap`\n     * @param {Function} handler Event listener function previously passed to\n     *  `addListener`.\n     * @return {boolean} Returns true if a gesture event listener was removed.\n     */\n    removeListener: function(node, evType, handler) {\n      if (this.gestures[evType]) {\n        this._remove(node, evType, handler);\n        return true;\n      }\n    },\n\n    /**\n     * automate the event listeners for the native events\n     *\n     * @private\n     * @param {HTMLElement} node Node on which to add the event.\n     * @param {string} evType Event type to add.\n     * @param {function} handler Event handler function.\n     */\n    _add: function(node, evType, handler) {\n      let recognizer = this.gestures[evType];\n      let deps = recognizer.deps;\n      let name = recognizer.name;\n      let gobj = node[GESTURE_KEY];\n      if (!gobj) {\n        node[GESTURE_KEY] = gobj = {};\n      }\n      for (let i = 0, dep, gd; i < deps.length; i++) {\n        dep = deps[i];\n        // don't add mouse handlers on iOS because they cause gray selection overlays\n        if (IS_TOUCH_ONLY && MOUSE_EVENTS.indexOf(dep) > -1 && dep !== 'click') {\n          continue;\n        }\n        gd = gobj[dep];\n        if (!gd) {\n          gobj[dep] = gd = {_count: 0};\n        }\n        if (gd._count === 0) {\n          node.addEventListener(dep, this._handleNative);\n        }\n        gd[name] = (gd[name] || 0) + 1;\n        gd._count = (gd._count || 0) + 1;\n      }\n      node.addEventListener(evType, handler);\n      if (recognizer.touchAction) {\n        this.setTouchAction(node, recognizer.touchAction);\n      }\n    },\n\n    /**\n     * automate event listener removal for native events\n     *\n     * @private\n     * @param {HTMLElement} node Node on which to remove the event.\n     * @param {string} evType Event type to remove.\n     * @param {function} handler Event handler function.\n     */\n    _remove: function(node, evType, handler) {\n      let recognizer = this.gestures[evType];\n      let deps = recognizer.deps;\n      let name = recognizer.name;\n      let gobj = node[GESTURE_KEY];\n      if (gobj) {\n        for (let i = 0, dep, gd; i < deps.length; i++) {\n          dep = deps[i];\n          gd = gobj[dep];\n          if (gd && gd[name]) {\n            gd[name] = (gd[name] || 1) - 1;\n            gd._count = (gd._count || 1) - 1;\n            if (gd._count === 0) {\n              node.removeEventListener(dep, this._handleNative);\n            }\n          }\n        }\n      }\n      node.removeEventListener(evType, handler);\n    },\n\n    /**\n     * Registers a new gesture event recognizer for adding new custom\n     * gesture event types.\n     *\n     * @memberof Polymer.Gestures\n     * @param {Object} recog Gesture recognizer descriptor\n     */\n    register: function(recog) {\n      this.recognizers.push(recog);\n      for (let i = 0; i < recog.emits.length; i++) {\n        this.gestures[recog.emits[i]] = recog;\n      }\n    },\n\n    /**\n     * @private\n     * @param {string} evName Event name.\n     * @return {Object} Returns the gesture for the given event name.\n     */\n    _findRecognizerByEvent: function(evName) {\n      for (let i = 0, r; i < this.recognizers.length; i++) {\n        r = this.recognizers[i];\n        for (let j = 0, n; j < r.emits.length; j++) {\n          n = r.emits[j];\n          if (n === evName) {\n            return r;\n          }\n        }\n      }\n      return null;\n    },\n\n    /**\n     * Sets scrolling direction on node.\n     *\n     * This value is checked on first move, thus it should be called prior to\n     * adding event listeners.\n     *\n     * @memberof Polymer.Gestures\n     * @param {Node} node Node to set touch action setting on\n     * @param {string} value Touch action value\n     */\n    setTouchAction: function(node, value) {\n      if (HAS_NATIVE_TA) {\n        node.style.touchAction = value;\n      }\n      node[TOUCH_ACTION] = value;\n    },\n\n    /**\n     * Dispatches an event on the `target` element of `type` with the given\n     * `detail`.\n     * @private\n     * @param {HTMLElement} target The element on which to fire an event.\n     * @param {string} type The type of event to fire.\n     * @param {Object=} detail The detail object to populate on the event.\n     */\n    _fire: function(target, type, detail) {\n      let ev = new Event(type, { bubbles: true, cancelable: true, composed: true });\n      ev.detail = detail;\n      target.dispatchEvent(ev);\n      // forward `preventDefault` in a clean way\n      if (ev.defaultPrevented) {\n        let preventer = detail.preventer || detail.sourceEvent;\n        if (preventer && preventer.preventDefault) {\n          preventer.preventDefault();\n        }\n      }\n    },\n\n    /**\n     * Prevents the dispatch and default action of the given event name.\n     *\n     * @memberof Polymer.Gestures\n     * @param {string} evName Event name.\n     */\n    prevent: function(evName) {\n      let recognizer = this._findRecognizerByEvent(evName);\n      if (recognizer.info) {\n        recognizer.info.prevent = true;\n      }\n    },\n\n    /**\n     * Reset the 2500ms timeout on processing mouse input after detecting touch input.\n     *\n     * Touch inputs create synthesized mouse inputs anywhere from 0 to 2000ms after the touch.\n     * This method should only be called during testing with simulated touch inputs.\n     * Calling this method in production may cause duplicate taps or other Gestures.\n     *\n     * @memberof Polymer.Gestures\n     */\n    resetMouseCanceller: function() {\n      if (POINTERSTATE.mouse.mouseIgnoreJob) {\n        POINTERSTATE.mouse.mouseIgnoreJob.flush();\n      }\n    }\n  };\n\n  Gestures.register({\n    name: 'downup',\n    deps: ['mousedown', 'touchstart', 'touchend'],\n    flow: {\n      start: ['mousedown', 'touchstart'],\n      end: ['mouseup', 'touchend']\n    },\n    emits: ['down', 'up'],\n\n    info: {\n      movefn: null,\n      upfn: null\n    },\n\n    reset: function() {\n      untrackDocument(this.info);\n    },\n\n    mousedown: function(e) {\n      if (!hasLeftMouseButton(e)) {\n        return;\n      }\n      let t = Gestures._findOriginalTarget(e);\n      let self = this;\n      let movefn = function movefn(e) {\n        if (!hasLeftMouseButton(e)) {\n          self._fire('up', t, e);\n          untrackDocument(self.info);\n        }\n      };\n      let upfn = function upfn(e) {\n        if (hasLeftMouseButton(e)) {\n          self._fire('up', t, e);\n        }\n        untrackDocument(self.info);\n      };\n      trackDocument(this.info, movefn, upfn);\n      this._fire('down', t, e);\n    },\n    touchstart: function(e) {\n      this._fire('down', Gestures._findOriginalTarget(e), e.changedTouches[0], e);\n    },\n    touchend: function(e) {\n      this._fire('up', Gestures._findOriginalTarget(e), e.changedTouches[0], e);\n    },\n    _fire: function(type, target, event, preventer) {\n      Gestures._fire(target, type, {\n        x: event.clientX,\n        y: event.clientY,\n        sourceEvent: event,\n        preventer: preventer,\n        prevent: function(e) {\n          return Gestures.prevent(e);\n        }\n      });\n    }\n  });\n\n  Gestures.register({\n    name: 'track',\n    touchAction: 'none',\n    deps: ['mousedown', 'touchstart', 'touchmove', 'touchend'],\n    flow: {\n      start: ['mousedown', 'touchstart'],\n      end: ['mouseup', 'touchend']\n    },\n    emits: ['track'],\n\n    info: {\n      x: 0,\n      y: 0,\n      state: 'start',\n      started: false,\n      moves: [],\n      addMove: function(move) {\n        if (this.moves.length > TRACK_LENGTH) {\n          this.moves.shift();\n        }\n        this.moves.push(move);\n      },\n      movefn: null,\n      upfn: null,\n      prevent: false\n    },\n\n    reset: function() {\n      this.info.state = 'start';\n      this.info.started = false;\n      this.info.moves = [];\n      this.info.x = 0;\n      this.info.y = 0;\n      this.info.prevent = false;\n      untrackDocument(this.info);\n    },\n\n    hasMovedEnough: function(x, y) {\n      if (this.info.prevent) {\n        return false;\n      }\n      if (this.info.started) {\n        return true;\n      }\n      let dx = Math.abs(this.info.x - x);\n      let dy = Math.abs(this.info.y - y);\n      return (dx >= TRACK_DISTANCE || dy >= TRACK_DISTANCE);\n    },\n\n    mousedown: function(e) {\n      if (!hasLeftMouseButton(e)) {\n        return;\n      }\n      let t = Gestures._findOriginalTarget(e);\n      let self = this;\n      let movefn = function movefn(e) {\n        let x = e.clientX, y = e.clientY;\n        if (self.hasMovedEnough(x, y)) {\n          // first move is 'start', subsequent moves are 'move', mouseup is 'end'\n          self.info.state = self.info.started ? (e.type === 'mouseup' ? 'end' : 'track') : 'start';\n          if (self.info.state === 'start') {\n            // if and only if tracking, always prevent tap\n            Gestures.prevent('tap');\n          }\n          self.info.addMove({x: x, y: y});\n          if (!hasLeftMouseButton(e)) {\n            // always _fire \"end\"\n            self.info.state = 'end';\n            untrackDocument(self.info);\n          }\n          self._fire(t, e);\n          self.info.started = true;\n        }\n      };\n      let upfn = function upfn(e) {\n        if (self.info.started) {\n          movefn(e);\n        }\n\n        // remove the temporary listeners\n        untrackDocument(self.info);\n      };\n      // add temporary document listeners as mouse retargets\n      trackDocument(this.info, movefn, upfn);\n      this.info.x = e.clientX;\n      this.info.y = e.clientY;\n    },\n\n    touchstart: function(e) {\n      let ct = e.changedTouches[0];\n      this.info.x = ct.clientX;\n      this.info.y = ct.clientY;\n    },\n\n    touchmove: function(e) {\n      let t = Gestures._findOriginalTarget(e);\n      let ct = e.changedTouches[0];\n      let x = ct.clientX, y = ct.clientY;\n      if (this.hasMovedEnough(x, y)) {\n        if (this.info.state === 'start') {\n          // if and only if tracking, always prevent tap\n          Gestures.prevent('tap');\n        }\n        this.info.addMove({x: x, y: y});\n        this._fire(t, ct);\n        this.info.state = 'track';\n        this.info.started = true;\n      }\n    },\n\n    touchend: function(e) {\n      let t = Gestures._findOriginalTarget(e);\n      let ct = e.changedTouches[0];\n      // only trackend if track was started and not aborted\n      if (this.info.started) {\n        // reset started state on up\n        this.info.state = 'end';\n        this.info.addMove({x: ct.clientX, y: ct.clientY});\n        this._fire(t, ct, e);\n      }\n    },\n\n    _fire: function(target, touch) {\n      let secondlast = this.info.moves[this.info.moves.length - 2];\n      let lastmove = this.info.moves[this.info.moves.length - 1];\n      let dx = lastmove.x - this.info.x;\n      let dy = lastmove.y - this.info.y;\n      let ddx, ddy = 0;\n      if (secondlast) {\n        ddx = lastmove.x - secondlast.x;\n        ddy = lastmove.y - secondlast.y;\n      }\n      return Gestures._fire(target, 'track', {\n        state: this.info.state,\n        x: touch.clientX,\n        y: touch.clientY,\n        dx: dx,\n        dy: dy,\n        ddx: ddx,\n        ddy: ddy,\n        sourceEvent: touch,\n        hover: function() {\n          return Gestures.deepTargetFind(touch.clientX, touch.clientY);\n        }\n      });\n    }\n\n  });\n\n  Gestures.register({\n    name: 'tap',\n    deps: ['mousedown', 'click', 'touchstart', 'touchend'],\n    flow: {\n      start: ['mousedown', 'touchstart'],\n      end: ['click', 'touchend']\n    },\n    emits: ['tap'],\n    info: {\n      x: NaN,\n      y: NaN,\n      prevent: false\n    },\n    reset: function() {\n      this.info.x = NaN;\n      this.info.y = NaN;\n      this.info.prevent = false;\n    },\n    save: function(e) {\n      this.info.x = e.clientX;\n      this.info.y = e.clientY;\n    },\n\n    mousedown: function(e) {\n      if (hasLeftMouseButton(e)) {\n        this.save(e);\n      }\n    },\n    click: function(e) {\n      if (hasLeftMouseButton(e)) {\n        this.forward(e);\n      }\n    },\n\n    touchstart: function(e) {\n      this.save(e.changedTouches[0], e);\n    },\n    touchend: function(e) {\n      this.forward(e.changedTouches[0], e);\n    },\n\n    forward: function(e, preventer) {\n      let dx = Math.abs(e.clientX - this.info.x);\n      let dy = Math.abs(e.clientY - this.info.y);\n      let t = Gestures._findOriginalTarget(e);\n      // dx,dy can be NaN if `click` has been simulated and there was no `down` for `start`\n      if (isNaN(dx) || isNaN(dy) || (dx <= TAP_DISTANCE && dy <= TAP_DISTANCE) || isSyntheticClick(e)) {\n        // prevent taps from being generated if an event has canceled them\n        if (!this.info.prevent) {\n          Gestures._fire(t, 'tap', {\n            x: e.clientX,\n            y: e.clientY,\n            sourceEvent: e,\n            preventer: preventer\n          });\n        }\n      }\n    }\n  });\n\n  /** @deprecated */\n  Gestures.findOriginalTarget = Gestures._findOriginalTarget;\n\n  /** @deprecated */\n  Gestures.add = Gestures.addListener;\n\n  /** @deprecated */\n  Gestures.remove = Gestures.removeListener;\n\n  Polymer.Gestures = Gestures;\n\n})();\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/utils/gestures.html\n// module id = 34\n// module chunks = 0","/*__wc__loader*/\nrequire('./boot.html');\n\n\n\n(function() {\n\n  'use strict';\n\n  // run a callback when HTMLImports are ready or immediately if\n  // this api is not available.\n  function whenImportsReady(cb) {\n    if (window.HTMLImports) {\n      HTMLImports.whenReady(cb);\n    } else {\n      cb();\n    }\n  }\n\n  /**\n   * Convenience method for importing an HTML document imperatively.\n   *\n   * This method creates a new `<link rel=\"import\">` element with\n   * the provided URL and appends it to the document to start loading.\n   * In the `onload` callback, the `import` property of the `link`\n   * element will contain the imported document contents.\n   *\n   * @memberof Polymer\n   * @param {string} href URL to document to load.\n   * @param {Function=} onload Callback to notify when an import successfully\n   *   loaded.\n   * @param {Function=} onerror Callback to notify when an import\n   *   unsuccessfully loaded.\n   * @param {boolean=} optAsync True if the import should be loaded `async`.\n   *   Defaults to `false`.\n   * @return {HTMLLinkElement} The link element for the URL to be loaded.\n   */\n  Polymer.importHref = function(href, onload, onerror, optAsync) {\n    let link =\n      document.head.querySelector('link[href=\"' + href + '\"][import-href]');\n    if (!link) {\n      link = document.createElement('link');\n      link.rel = 'import';\n      link.href = href;\n      link.setAttribute('import-href', '');\n    }\n    // always ensure link has `async` attribute if user specified one,\n    // even if it was previously not async. This is considered less confusing.\n    if (optAsync) {\n      link.setAttribute('async', '');\n    }\n    // NOTE: the link may now be in 3 states: (1) pending insertion,\n    // (2) inflight, (3) already laoded. In each case, we need to add\n    // event listeners to process callbacks.\n    let cleanup = function() {\n      link.removeEventListener('load', loadListener);\n      link.removeEventListener('error', errorListener);\n    }\n    let loadListener = function(event) {\n      cleanup();\n      // In case of a successful load, cache the load event on the link so\n      // that it can be used to short-circuit this method in the future when\n      // it is called with the same href param.\n      link.__dynamicImportLoaded = true;\n      if (onload) {\n        whenImportsReady(() => {\n          onload(event);\n        });\n      }\n    };\n    let errorListener = function(event) {\n      cleanup();\n      // In case of an error, remove the link from the document so that it\n      // will be automatically created again the next time `importHref` is\n      // called.\n      if (link.parentNode) {\n        link.parentNode.removeChild(link);\n      }\n      if (onerror) {\n        whenImportsReady(() => {\n          onerror(event);\n        });\n      }\n    };\n    link.addEventListener('load', loadListener);\n    link.addEventListener('error', errorListener);\n    if (link.parentNode == null) {\n      document.head.appendChild(link);\n    // if the link already loaded, dispatch a fake load event\n    // so that listeners are called and get a proper event argument.\n    } else if (link.__dynamicImportLoaded) {\n      link.dispatchEvent(new Event('load'));\n    }\n    return link;\n  };\n\n})();\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/utils/import-href.html\n// module id = 35\n// module chunks = 0","/*__wc__loader*/\nrequire('./boot.html');\n\n\n(function() {\n  'use strict';\n\n  /**\n   * Module with utilities for manipulating structured data path strings.\n   *\n   * @namespace\n   * @memberof Polymer\n   * @summary Module with utilities for manipulating structured data path strings.\n   */\n  const Path = {\n\n    /**\n     * Returns true if the given string is a structured data path (has dots).\n     *\n     * Example:\n     *\n     * ```\n     * Polymer.Path.isPath('foo.bar.baz') // true\n     * Polymer.Path.isPath('foo')         // false\n     * ```\n     *\n     * @memberof Polymer.Path\n     * @param {string} path Path string\n     * @return {boolean} True if the string contained one or more dots\n     */\n    isPath: function(path) {\n      return path.indexOf('.') >= 0;\n    },\n\n    /**\n     * Returns the root property name for the given path.\n     *\n     * Example:\n     *\n     * ```\n     * Polymer.Path.root('foo.bar.baz') // 'foo'\n     * Polymer.Path.root('foo')         // 'foo'\n     * ```\n     *\n     * @memberof Polymer.Path\n     * @param {string} path Path string\n     * @return {string} Root property name\n     */\n    root: function(path) {\n      let dotIndex = path.indexOf('.');\n      if (dotIndex === -1) {\n        return path;\n      }\n      return path.slice(0, dotIndex);\n    },\n\n    /**\n     * Given `base` is `foo.bar`, `foo` is an ancestor, `foo.bar` is not\n     * Returns true if the given path is an ancestor of the base path.\n     *\n     * Example:\n     *\n     * ```\n     * Polymer.Path.isAncestor('foo.bar', 'foo')         // true\n     * Polymer.Path.isAncestor('foo.bar', 'foo.bar')     // false\n     * Polymer.Path.isAncestor('foo.bar', 'foo.bar.baz') // false\n     * ```\n     *\n     * @memberof Polymer.Path\n     * @param {string} base Path string to test against.\n     * @param {string} path Path string to test.\n     * @return {boolean} True if `path` is an ancestor of `base`.\n     */\n    isAncestor: function(base, path) {\n      //     base.startsWith(path + '.');\n      return base.indexOf(path + '.') === 0;\n    },\n\n    /**\n     * Given `base` is `foo.bar`, `foo.bar.baz` is an descendant\n     *\n     * Example:\n     *\n     * ```\n     * Polymer.Path.isDescendant('foo.bar', 'foo.bar.baz') // true\n     * Polymer.Path.isDescendant('foo.bar', 'foo.bar')     // false\n     * Polymer.Path.isDescendant('foo.bar', 'foo')         // false\n     * ```\n     *\n     * @memberof Polymer.Path\n     * @param {string} base Path string to test against.\n     * @param {string} path Path string to test.\n     * @return {boolean} True if `path` is a descendant of `base`.\n     */\n    isDescendant: function(base, path) {\n      //     path.startsWith(base + '.');\n      return path.indexOf(base + '.') === 0;\n    },\n\n    /**\n     * Replaces a previous base path with a new base path, preserving the\n     * remainder of the path.\n     *\n     * User must ensure `path` has a prefix of `base`.\n     *\n     * Example:\n     *\n     * ```\n     * Polymer.Path.translate('foo.bar', 'zot' 'foo.bar.baz') // 'zot.baz'\n     * ```\n     *\n     * @memberof Polymer.Path\n     * @param {string} base Current base string to remove\n     * @param {string} newBase New base string to replace with\n     * @param {string} path Path to translate\n     * @return {string} Translated string\n     */\n    translate: function(base, newBase, path) {\n      return newBase + path.slice(base.length);\n    },\n\n    matches: function(base, path) {\n      return (base === path) ||\n             this.isAncestor(base, path) ||\n             this.isDescendant(base, path);\n    },\n\n    /**\n     * Converts array-based paths to flattened path.  String-based paths\n     * are returned as-is.\n     *\n     * Example:\n     *\n     * ```\n     * Polymer.Path.normalize(['foo.bar', 0, 'baz'])  // 'foo.bar.0.baz'\n     * Polymer.Path.normalize('foo.bar.0.baz')        // 'foo.bar.0.baz'\n     * ```\n     *\n     * @memberof Polymer.Path\n     * @param {string | !Array<string|number>} path Input path\n     * @return {string} Flattened path\n     */\n    normalize: function(path) {\n      if (Array.isArray(path)) {\n        let parts = [];\n        for (let i=0; i<path.length; i++) {\n          let args = path[i].toString().split('.');\n          for (let j=0; j<args.length; j++) {\n            parts.push(args[j]);\n          }\n        }\n        return parts.join('.');\n      } else {\n        return path;\n      }\n    },\n\n    /**\n     * Splits a path into an array of property names. Accepts either arrays\n     * of path parts or strings.\n     *\n     * Example:\n     *\n     * ```\n     * Polymer.Path.split(['foo.bar', 0, 'baz'])  // ['foo', 'bar', '0', 'baz']\n     * Polymer.Path.split('foo.bar.0.baz')        // ['foo', 'bar', '0', 'baz']\n     * ```\n     *\n     * @memberof Polymer.Path\n     * @param {string | !Array<string|number>} path Input path\n     * @return {!Array<string>} Array of path parts\n     */\n    split: function(path) {\n      if (Array.isArray(path)) {\n        return this.normalize(path).split('.');\n      }\n      return path.toString().split('.');\n    },\n\n    /**\n     * Reads a value from a path.  If any sub-property in the path is `undefined`,\n     * this method returns `undefined` (will never throw.\n     *\n     * @memberof Polymer.Path\n     * @param {Object} root Object from which to dereference path from\n     * @param {string | !Array<string|number>} path Path to read\n     * @param {Object=} info If an object is provided to `info`, the normalized\n     *  (flattened) path will be set to `info.path`.\n     * @return {*} Value at path, or `undefined` if the path could not be\n     *  fully dereferenced.\n     */\n    get: function(root, path, info) {\n      let prop = root;\n      let parts = this.split(path);\n      // Loop over path parts[0..n-1] and dereference\n      for (let i=0; i<parts.length; i++) {\n        if (!prop) {\n          return;\n        }\n        let part = parts[i];\n        prop = prop[part];\n      }\n      if (info) {\n        info.path = parts.join('.');\n      }\n      return prop;\n    },\n\n    /**\n     * Sets a value to a path.  If any sub-property in the path is `undefined`,\n     * this method will no-op.\n     *\n     * @memberof Polymer.Path\n     * @param {Object} root Object from which to dereference path from\n     * @param {string | !Array<string|number>} path Path to set\n     * @param {*} value Value to set to path\n     * @return {string | undefined} The normalized version of the input path\n     */\n    set: function(root, path, value) {\n      let prop = root;\n      let parts = this.split(path);\n      let last = parts[parts.length-1];\n      if (parts.length > 1) {\n        // Loop over path parts[0..n-2] and dereference\n        for (let i=0; i<parts.length-1; i++) {\n          let part = parts[i];\n          prop = prop[part];\n          if (!prop) {\n            return;\n          }\n        }\n        // Set value to object at end of path\n        prop[last] = value;\n      } else {\n        // Simple property set\n        prop[path] = value;\n      }\n      return parts.join('.');\n    }\n\n  };\n\n  /**\n   * Returns true if the given string is a structured data path (has dots).\n   *\n   * This function is deprecated.  Use `Polymer.Path.isPath` instead.\n   *\n   * Example:\n   *\n   * ```\n   * Polymer.Path.isDeep('foo.bar.baz') // true\n   * Polymer.Path.isDeep('foo')         // false\n   * ```\n   *\n   * @deprecated\n   * @memberof Polymer.Path\n   * @param {string} path Path string\n   * @return {boolean} True if the string contained one or more dots\n   */\n  Path.isDeep = Path.isPath;\n\n  Polymer.Path = Path;\n\n})();\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/utils/path.html\n// module id = 36\n// module chunks = 0","/*__wc__loader*/\nrequire('./boot.html');\n\n\n(function() {\n\n  'use strict';\n\n  let scheduled = false;\n  let beforeRenderQueue = [];\n  let afterRenderQueue = [];\n\n  function schedule() {\n    scheduled = true;\n    // before next render\n    requestAnimationFrame(function() {\n      scheduled = false;\n      flushQueue(beforeRenderQueue);\n      // after the render\n      setTimeout(function() {\n        runQueue(afterRenderQueue);\n      });\n    });\n  }\n\n  function flushQueue(queue) {\n    while (queue.length) {\n      callMethod(queue.shift());\n    }\n  }\n\n  function runQueue(queue) {\n    for (let i=0, l=queue.length; i < l; i++) {\n      callMethod(queue.shift());\n    }\n  }\n\n  function callMethod(info) {\n    const context = info[0];\n    const callback = info[1];\n    const args = info[2];\n    try {\n      callback.apply(context, args);\n    } catch(e) {\n      setTimeout(() => {\n        throw e;\n      })\n    }\n  }\n\n  function flush() {\n    while (beforeRenderQueue.length || afterRenderQueue.length) {\n      flushQueue(beforeRenderQueue);\n      flushQueue(afterRenderQueue);\n    }\n    scheduled = false;\n  }\n\n  /**\n   * Module for scheduling flushable pre-render and post-render tasks.\n   *\n   * @namespace\n   * @memberof Polymer\n   * @summary Module for scheduling flushable pre-render and post-render tasks.\n   */\n  Polymer.RenderStatus = {\n\n    /**\n     * Enqueues a callback which will be run before the next render, at\n     * `requestAnimationFrame` timing.\n     *\n     * This method is useful for enqueuing work that requires DOM measurement,\n     * since measurement may not be reliable in custom element callbacks before\n     * the first render, as well as for batching measurement tasks in general.\n     *\n     * Tasks in this queue may be flushed by calling `Polymer.RenderStatus.flush()`.\n     *\n     * @memberof Polymer.RenderStatus\n     * @param {*} context Context object the callback function will be bound to\n     * @param {function()} callback Callback function\n     * @param {Array} args An array of arguments to call the callback function with\n     */\n    beforeNextRender: function(context, callback, args) {\n      if (!scheduled) {\n        schedule();\n      }\n      beforeRenderQueue.push([context, callback, args]);\n    },\n\n    /**\n     * Enqueues a callback which will be run after the next render, equivalent\n     * to one task (`setTimeout`) after the next `requestAnimationFrame`.\n     *\n     * This method is useful for tuning the first-render performance of an\n     * element or application by deferring non-critical work until after the\n     * first paint.  Typical non-render-critical work may include adding UI\n     * event listeners and aria attributes.\n     *\n     * @memberof Polymer.RenderStatus\n     * @param {*} context Context object the callback function will be bound to\n     * @param {function()} callback Callback function\n     * @param {Array} args An array of arguments to call the callback function with\n     */\n    afterNextRender: function(context, callback, args) {\n      if (!scheduled) {\n        schedule();\n      }\n      afterRenderQueue.push([context, callback, args]);\n    },\n\n    /**\n     * Flushes all `beforeNextRender` tasks, followed by all `afterNextRender`\n     * tasks.\n     *\n     * @memberof Polymer.RenderStatus\n     */\n    flush: flush\n\n  };\n\n})();\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/utils/render-status.html\n// module id = 37\n// module chunks = 0","/*__wc__loader*/\n\n(function() {\n  'use strict';\n\n  // unresolved\n\n  function resolve() {\n    document.body.removeAttribute('unresolved');\n  }\n\n  if (window.WebComponents) {\n    window.addEventListener('WebComponentsReady', resolve);\n  } else {\n    if (document.readyState === 'interactive' || document.readyState === 'complete') {\n      resolve();\n    } else {\n      window.addEventListener('DOMContentLoaded', resolve);\n    }\n  }\n\n})();\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/utils/unresolved.html\n// module id = 38\n// module chunks = 0","/*__wc__loader*/\nrequire('./apply-shim.min.js');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/@webcomponents/shadycss/apply-shim.html\n// module id = 39\n// module chunks = 0","/*__wc__loader*/\nrequire('./custom-style-interface.min.js');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/@webcomponents/shadycss/custom-style-interface.html\n// module id = 40\n// module chunks = 0"],"sourceRoot":""}